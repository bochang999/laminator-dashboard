// ===== Capacitor „Éó„É©„Ç∞„Ç§„É≥Ë®≠ÂÆö Ver.5.0 ÊîπÂñÑÁâà =====
// Sequential Thinking + Context7„Å´„Çà„ÇãÊäÄË°ìÊ§úË®ºÊ∏à„ÅøÂÆüË£Ö
let indexedDBSupported = false;

// Capacitor PreferencesÂãï‰Ωú„ÉÜ„Çπ„Éà
async function testCapacitorPreferences() {
    if (!CapacitorPreferences) return;
    
    try {
        const testKey = 'capacitor_test_key';
        const testValue = 'test_success_' + Date.now();
        
        // Êõ∏„ÅçËæº„Åø„ÉÜ„Çπ„Éà
        await CapacitorPreferences.set({
            key: testKey,
            value: testValue
        });
        
        // Ë™≠„ÅøËæº„Åø„ÉÜ„Çπ„Éà
        const result = await CapacitorPreferences.get({ key: testKey });
        
        if (result.value === testValue) {
            console.log('‚úÖ Capacitor Preferences Ë™≠„ÅøÊõ∏„Åç„ÉÜ„Çπ„ÉàÊàêÂäü');
            
            // „ÉÜ„Çπ„Éà„Éá„Éº„Çø„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó
            await CapacitorPreferences.remove({ key: testKey });
        } else {
            console.error('‚ùå Capacitor Preferences „ÉÜ„Çπ„ÉàÂ§±Êïó: Ë™≠„ÅøËæº„ÅøÂÄ§„Åå‰∏ç‰∏ÄËá¥');
            isCapacitorEnvironment = false;
        }
    } catch (error) {
        console.error('‚ùå Capacitor Preferences „ÉÜ„Çπ„Éà„Ç®„É©„Éº:', error);
        isCapacitorEnvironment = false;
    }
}

// Âè§„ÅÑDOMContentLoaded„ÅØÂâäÈô§ - Êñ∞„Åó„ÅÑÊîπÂñÑÁâà„ÇíÂæå„Åß‰ΩøÁî®

// Capacitor PreferencesË©≥Á¥∞Ë®≠ÂÆö
async function configureCapacitorPreferences() {
    try {
        console.log('üîß Capacitor Preferences Ë©≥Á¥∞Ë®≠ÂÆö„ÇíÈñãÂßã...');
        
        // ÂÖ¨ÂºèÊé®Â•®: „Ç´„Çπ„Çø„É†„Ç∞„É´„Éº„ÉóË®≠ÂÆö„Åß„Éç„Ç§„ÉÜ„Ç£„Éñ„Çπ„Éà„É¨„Éº„Ç∏„Çí‰ΩøÁî®
        await CapacitorPreferences.configure({
            group: 'NativeStorage' // cordova-plugin-nativestorage‰∫íÊèõÊÄß
        });
        
        console.log('‚úÖ Capacitor Preferences „Ç´„Çπ„Çø„É†„Ç∞„É´„Éº„ÉóË®≠ÂÆöÂÆå‰∫Ü');
        
        // Ë®≠ÂÆöÂæå„ÅÆÂãï‰Ωú„ÉÜ„Çπ„Éà
        await testCapacitorPreferencesAdvanced();
        
    } catch (error) {
        console.warn('‚ö†Ô∏è Capacitor PreferencesË®≠ÂÆöË≠¶Âëä:', error);
        // Ë®≠ÂÆö„Ç®„É©„Éº„Åß„ÇÇÂá¶ÁêÜÁ∂öË°åÔºà„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÂØæÂøúÔºâ
    }
}

// È´òÂ∫¶„Å™Capacitor Preferences„ÉÜ„Çπ„Éà
async function testCapacitorPreferencesAdvanced() {
    if (!CapacitorPreferences) return;
    
    try {
        const testKey = 'advanced_test_key';
        const complexTestData = {
            timestamp: Date.now(),
            data: {
                array: [1, 2, 3, 'test'],
                object: { nested: 'value' },
                unicode: 'Êó•Êú¨Ë™û„ÉÜ„Çπ„Éà'
            }
        };
        const testValue = JSON.stringify(complexTestData);
        
        console.log('üîÑ È´òÂ∫¶„Å™Capacitor Preferences„ÉÜ„Çπ„ÉàÈñãÂßã...');
        
        // 1. Ë§áÈõë„Å™„Éá„Éº„Çø„ÅÆÊõ∏„ÅçËæº„Åø„ÉÜ„Çπ„Éà
        await CapacitorPreferences.set({
            key: testKey,
            value: testValue
        });
        
        // 2. Âç≥Â∫ß„ÅÆË™≠„ÅøËæº„Åø„ÉÜ„Çπ„Éà
        const immediateResult = await CapacitorPreferences.get({ key: testKey });
        
        // 3. „Éá„Éº„ÇøÊï¥ÂêàÊÄß„ÉÜ„Çπ„Éà
        if (immediateResult.value === testValue) {
            const parsedData = JSON.parse(immediateResult.value);
            if (parsedData.timestamp === complexTestData.timestamp) {
                console.log('‚úÖ È´òÂ∫¶„Å™Capacitor Preferences„ÉÜ„Çπ„ÉàÊàêÂäü');
                console.log('üìä „ÉÜ„Çπ„Éà„Éá„Éº„Çø„Çµ„Ç§„Ç∫:', testValue.length, '„Éê„Ç§„Éà');
            } else {
                console.error('‚ùå „Éá„Éº„ÇøÂÜÖÂÆπ„ÅÆÊï¥ÂêàÊÄß„Ç®„É©„Éº');
                isCapacitorEnvironment = false;
            }
        } else {
            console.error('‚ùå È´òÂ∫¶„Å™Capacitor Preferences„ÉÜ„Çπ„ÉàÂ§±Êïó');
            isCapacitorEnvironment = false;
        }
        
        // 4. „Ç≠„Éº‰∏ÄË¶ß„ÉÜ„Çπ„Éà
        const keysResult = await CapacitorPreferences.keys();
        console.log('üìã ÁèæÂú®„ÅÆ„Ç≠„Éº‰∏ÄË¶ß:', keysResult.keys);
        
        // 5. „ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó
        await CapacitorPreferences.remove({ key: testKey });
        
    } catch (error) {
        console.error('‚ùå È´òÂ∫¶„Å™Capacitor Preferences„ÉÜ„Çπ„Éà„Ç®„É©„Éº:', error);
        isCapacitorEnvironment = false;
    }
}

// ===== IndexedDB „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ „Ç∑„Çπ„ÉÜ„É† =====

// IndexedDBÂàùÊúüÂåñ„Å®„Çµ„Éù„Éº„ÉàÁ¢∫Ë™ç
async function initializeIndexedDB() {
    try {
        console.log('üîÑ IndexedDB„Çµ„Éù„Éº„ÉàÁ¢∫Ë™ç...');
        
        if (!window.indexedDB) {
            console.log('‚ùå IndexedDB„ÅØ„Çµ„Éù„Éº„Éà„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì');
            return false;
        }
        
        // IndexedDB„ÉÜ„Çπ„ÉàÂÆüË°å
        const testRequest = indexedDB.open('laminator_test', 1);
        
        return new Promise((resolve) => {
            testRequest.onerror = () => {
                console.log('‚ùå IndexedDB„ÉÜ„Çπ„ÉàÂ§±Êïó');
                resolve(false);
            };
            
            testRequest.onsuccess = (event) => {
                const db = event.target.result;
                db.close();
                indexedDB.deleteDatabase('laminator_test');
                console.log('‚úÖ IndexedDB„Çµ„Éù„Éº„ÉàÁ¢∫Ë™çÂÆå‰∫Ü');
                indexedDBSupported = true;
                resolve(true);
            };
            
            testRequest.onupgradeneeded = (event) => {
                const db = event.target.result;
                db.createObjectStore('test', { keyPath: 'id' });
            };
        });
        
    } catch (error) {
        console.error('‚ùå IndexedDBÂàùÊúüÂåñ„Ç®„É©„Éº:', error);
        return false;
    }
}

// IndexedDB„Åß„Éá„Éº„Çø‰øùÂ≠ò
async function saveToIndexedDB(key, value) {
    return new Promise((resolve, reject) => {
        const request = indexedDB.open('laminator_dashboard', 1);
        
        request.onerror = () => reject(request.error);
        
        request.onupgradeneeded = (event) => {
            const db = event.target.result;
            if (!db.objectStoreNames.contains('data')) {
                db.createObjectStore('data', { keyPath: 'key' });
            }
        };
        
        request.onsuccess = (event) => {
            const db = event.target.result;
            const transaction = db.transaction(['data'], 'readwrite');
            const store = transaction.objectStore('data');
            
            const saveRequest = store.put({ key: key, value: value, timestamp: Date.now() });
            
            saveRequest.onsuccess = () => {
                console.log('‚úÖ IndexedDB„Å´‰øùÂ≠òÊàêÂäü:', key);
                resolve();
            };
            
            saveRequest.onerror = () => reject(saveRequest.error);
        };
    });
}

// IndexedDB„Åã„Çâ„Éá„Éº„ÇøË™≠„ÅøËæº„Åø
async function loadFromIndexedDB(key) {
    return new Promise((resolve, reject) => {
        const request = indexedDB.open('laminator_dashboard', 1);
        
        request.onerror = () => reject(request.error);
        
        request.onsuccess = (event) => {
            const db = event.target.result;
            
            if (!db.objectStoreNames.contains('data')) {
                resolve(null);
                return;
            }
            
            const transaction = db.transaction(['data'], 'readonly');
            const store = transaction.objectStore('data');
            const getRequest = store.get(key);
            
            getRequest.onsuccess = () => {
                const result = getRequest.result;
                if (result) {
                    console.log('‚úÖ IndexedDB„Åã„ÇâË™≠„ÅøËæº„ÅøÊàêÂäü:', key);
                    resolve(result.value);
                } else {
                    console.log('‚ÑπÔ∏è IndexedDB: „Ç≠„Éº„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì:', key);
                    resolve(null);
                }
            };
            
            getRequest.onerror = () => reject(getRequest.error);
        };
    });
}

// =====„Åì„Åì„Åã„Çâ„É≠„Ç∞„Ç∑„Çπ„ÉÜ„É† Ver.2.4 =====
// „Ç∞„É≠„Éº„Éê„É´„É≠„Ç∞ÈÖçÂàó„ÅÆÂàùÊúüÂåñ
window.appLogs = [];

document.addEventListener('DOMContentLoaded', () => {
    // „Ç≥„É≥„ÇΩ„Éº„É´Âá∫Âäõ„ÇíË®òÈå≤„Åô„ÇãÈñ¢Êï∞
    function addLogToArray(level, message, color) {
        const timestamp = new Date().toLocaleTimeString();
        window.appLogs.push({
            timestamp,
            level,
            message,
            color
        });
        // ÊúÄÊñ∞200‰ª∂„ÅÆ„Åø‰øùÊåÅ
        if (window.appLogs.length > 200) {
            window.appLogs.shift();
        }
    }

    // „Ç™„É™„Ç∏„Éä„É´„ÅÆ„Ç≥„É≥„ÇΩ„Éº„É´Ê©üËÉΩ„Çí‰øùÂ≠ò
    const originalConsole = {
        log: console.log,
        error: console.error,
        warn: console.warn
    };

    // console.log„Çí„Ç™„Éº„Éê„Éº„É©„Ç§„Éâ
    console.log = function(...args) {
        originalConsole.log.apply(console, args);
        const message = args.map(a => typeof a === 'object' ? JSON.stringify(a, null, 2) : a).join(' ');
        addLogToArray('LOG', message, '#FFFFFF');
    };

    // console.error„Çí„Ç™„Éº„Éê„Éº„É©„Ç§„Éâ
    console.error = function(...args) {
        originalConsole.error.apply(console, args);
        const message = args.map(a => a instanceof Error ? a.stack : (typeof a === 'object' ? JSON.stringify(a, null, 2) : a)).join(' ');
        addLogToArray('ERROR', message, '#FF7B7B');
    };
    
    // console.warn„Çí„Ç™„Éº„Éê„Éº„É©„Ç§„Éâ
    console.warn = function(...args) {
        originalConsole.warn.apply(console, args);
        const message = args.map(a => typeof a === 'object' ? JSON.stringify(a, null, 2) : a).join(' ');
        addLogToArray('WARN', message, '#FFD700');
    };

    // „Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞
    window.onerror = function(message, source, lineno, colno, error) {
        console.error(`[Uncaught Error] ${message} at ${source}:${lineno}:${colno}`);
        return false;
    };

    window.onunhandledrejection = function(event) {
        console.error(`[Unhandled Promise Rejection] Reason: ${event.reason}`);
    };
    
    console.log('„É≠„Ç∞„Ç∑„Çπ„ÉÜ„É†„ÅåËµ∑Âãï„Åó„Åæ„Åó„Åü„ÄÇ');
});

// „É≠„Ç∞„Éö„Éº„Ç∏Ë°®Á§∫Ê©üËÉΩ
function showLogPage() {
    const mainContent = document.getElementById('main-content');
    if (!mainContent) return;
    
    // „É°„Ç§„É≥„Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÇíÈùûË°®Á§∫
    mainContent.style.display = 'none';
    
    // „É≠„Ç∞„Éö„Éº„Ç∏„Çí‰ΩúÊàê
    const logPageHTML = `
        <div id="log-page" class="main-dashboard">
            <section class="log-page-header">
                <div class="log-page-controls">
                    <button id="back-to-dashboard-btn" class="btn btn-secondary">‚Üê „ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ„Å´Êàª„Çã</button>
                    <button id="clear-logs-btn" class="btn btn-danger btn-sm">„É≠„Ç∞„ÇØ„É™„Ç¢</button>
                </div>
                <h3>üìã „Ç∑„Çπ„ÉÜ„É†„É≠„Ç∞</h3>
                <p class="log-info">Á∑è„É≠„Ç∞Êï∞: ${window.appLogs.length}‰ª∂</p>
            </section>
            
            <section class="log-container">
                ${window.appLogs.length === 0 ? 
                    '<div class="empty-log-state">„Åæ„Å†„É≠„Ç∞„ÅåË®òÈå≤„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì</div>' :
                    window.appLogs.map(log => `
                        <div class="log-entry">
                            <span class="log-timestamp">[${log.timestamp}]</span>
                            <span class="log-level log-level-${log.level.toLowerCase()}">${log.level}</span>
                            <span class="log-message">${log.message}</span>
                        </div>
                    `).join('')
                }
            </section>
        </div>
    `;
    
    // „É≠„Ç∞„Éö„Éº„Ç∏„ÇíÊåøÂÖ•
    mainContent.insertAdjacentHTML('afterend', logPageHTML);
    
    // Êàª„Çã„Éú„Çø„É≥„ÅÆ„Ç§„Éô„É≥„Éà„É™„Çπ„Éä„Éº
    document.getElementById('back-to-dashboard-btn').addEventListener('click', showDashboard);
    document.getElementById('clear-logs-btn').addEventListener('click', clearLogs);
}

// „ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„ÉâË°®Á§∫Ê©üËÉΩ
function showDashboard() {
    const mainContent = document.getElementById('main-content');
    const logPage = document.getElementById('log-page');
    
    if (logPage) {
        logPage.remove();
    }
    
    if (mainContent) {
        mainContent.style.display = 'block';
    }
}

// „É≠„Ç∞„ÇØ„É™„Ç¢Ê©üËÉΩ
function clearLogs() {
    window.appLogs = [];
    showLogPage(); // „Éö„Éº„Ç∏„ÇíÂÜçÊèèÁîª
}

// =====„Åì„Åì„Åæ„Åß„É≠„Ç∞„Ç∑„Çπ„ÉÜ„É† Ver.2.4 =====

// „É©„Éü„Ç™„Éö„Éª„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ Ver.3.0 - Áµ±Âêà„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ‰ªïÊßò

class LaminatorDashboard {
    constructor() {
        this.filmSessions = []; // „Éï„Ç£„É´„É†„Çª„ÉÉ„Ç∑„Éß„É≥ÁÆ°ÁêÜ
        this.currentFilmSession = null; // ÁèæÂú®„ÅÆ„Éï„Ç£„É´„É†„Çª„ÉÉ„Ç∑„Éß„É≥
        this.extraTime = 0; // ÊâãÂãïËøΩÂä†ÊôÇÈñìÔºàÂàÜÔºâ
        this.defaultFilmCapacity = 500; // „Éá„Éï„Ç©„É´„Éà„Éï„Ç£„É´„É†ÂÆπÈáèÔºàmÔºâ
        this.workStarted = false; // Ê•≠ÂãôÈñãÂßã„Éï„É©„Ç∞
        this.workStartTime = null; // Ê•≠ÂãôÈñãÂßãÊôÇÂàª
        this.targetEndTime = "17:00"; // ÁõÆÊ®ôÁµÇÊ•≠ÊôÇÂàª
        
        // ÊôÇÈñìË®≠ÂÆö
        this.timeSettings = {
            workStart: "08:30",
            workEnd: "17:00",
            overtimeEnd: "18:00",  // ÊÆãÊ•≠ÁµÇÊ•≠ÊôÇÂàª
            lunchBreak: 60,        // ÂàÜ
            cleanupTime: 15,       // ÂàÜ
            sameFilmChange: 10,    // ÂàÜÔºàÂêåÁ®Æ„Éï„Ç£„É´„É†‰∫§ÊèõÔºâ
            diffFilmChange: 15     // ÂàÜÔºàÁï∞Á®Æ„Éï„Ç£„É´„É†‰∫§ÊèõÔºâ
        };

        this.init();
    }

    async init() {
        await this.loadData();
        this.setupEventListeners();
        this.autoStartWork();
        this.updateCurrentTime();
        this.updateTimeDisplay();
        this.updateFinishTime();
        this.renderJobList();
        
        // 1Áßí„Åî„Å®„Å´ÊôÇÂàªÊõ¥Êñ∞
        setInterval(() => {
            this.updateCurrentTime();
        }, 1000);
    }

    setupEventListeners() {
        // ÂÖ•Âäõ„É¢„Éº„ÉâÂàáÊõø
        document.querySelectorAll('input[name="inputMode"]').forEach(radio => {
            radio.addEventListener('change', (e) => {
                this.switchInputMode(e.target.value);
            });
        });

        // „É¢„Éº„ÉÄ„É´ËÉåÊôØ„ÇØ„É™„ÉÉ„ÇØ„ÅßÈñâ„Åò„Çã
        document.querySelectorAll('.modal').forEach(modal => {
            modal.addEventListener('click', (e) => {
                if (e.target === modal) {
                    modal.classList.remove('active');
                }
            });
        });

        // Êñ∞Ê©üËÉΩ„ÅÆ„Éú„Çø„É≥„Å´„Ç§„Éô„É≥„Éà„É™„Çπ„Éä„Éº„ÇíË®≠ÂÆö
        const exportCsvBtn = document.getElementById('exportCsvBtn');
        if (exportCsvBtn) exportCsvBtn.addEventListener('click', () => this.exportDataAsCsv());
        
        const clearJobsBtn = document.getElementById('clearJobsBtn');
        if (clearJobsBtn) clearJobsBtn.addEventListener('click', () => this.clearTodaysJobs());
    }

    switchInputMode(mode) {
        const directMode = document.getElementById('directMode');
        const partsMode = document.getElementById('partsMode');

        if (mode === 'direct') {
            directMode.classList.add('active');
            partsMode.classList.remove('active');
        } else {
            directMode.classList.remove('active');
            partsMode.classList.add('active');
        }
    }

    // Ëá™ÂãïÊ•≠ÂãôÈñãÂßã
    autoStartWork() {
        if (!this.workStarted) {
            const now = new Date();
            const startTime = new Date();
            startTime.setHours(8, 30, 0, 0); // 8:30„Å´Ë®≠ÂÆö
            
            this.workStartTime = startTime;
            this.workStarted = true;
            this.saveData();
            console.log("Ê•≠Âãô„Çí8:30„Å´Ëá™ÂãïÈñãÂßã„Åó„Åæ„Åó„Åü„ÄÇ");
        }
    }

    // Ê•≠ÂãôÈñãÂßã
    startWork() {
        if (!this.workStarted) {
            this.workStarted = true;
            this.workStartTime = new Date();
            this.updateTimeDisplay();
            this.updateFinishTime();
            this.saveData();
            this.showToast('Ê•≠Âãô„ÇíÈñãÂßã„Åó„Åæ„Åó„Åü', 'success');
        } else {
            this.showToast('Ê•≠Âãô„ÅØÊó¢„Å´ÈñãÂßã„Åï„Çå„Å¶„ÅÑ„Åæ„Åô', 'info');
        }
    }

    // ÈñãÂßãÊôÇÂàªÁ∑®ÈõÜ
    editStartTime() {
        const currentTimeStr = this.workStarted && this.workStartTime ? 
            this.workStartTime.toTimeString().slice(0, 5) : this.timeSettings.workStart;
        
        const newTime = prompt('ÈñãÂßãÊôÇÂàª„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ (HH:MMÂΩ¢Âºè)', currentTimeStr);
        if (newTime && this.isValidTimeFormat(newTime)) {
            if (!this.workStarted) {
                // Ê•≠ÂãôÊú™ÈñãÂßã„ÅÆÂ†¥Âêà„ÅØÂç≥Â∫ß„Å´Ê•≠ÂãôÈñãÂßã
                const today = new Date();
                const [hours, minutes] = newTime.split(':');
                this.workStartTime = new Date(today.getFullYear(), today.getMonth(), today.getDate(), parseInt(hours), parseInt(minutes));
                this.workStarted = true;
            } else {
                // Ê•≠ÂãôÈñãÂßãÊ∏à„Åø„ÅÆÂ†¥Âêà„ÅØÊôÇÂàª„Çí‰øÆÊ≠£
                const [hours, minutes] = newTime.split(':');
                this.workStartTime.setHours(parseInt(hours), parseInt(minutes));
            }
            this.updateTimeDisplay();
            this.updateFinishTime();
            this.saveData();
            this.showToast('ÈñãÂßãÊôÇÂàª„ÇíÊõ¥Êñ∞„Åó„Åæ„Åó„Åü', 'success');
        }
    }

    // ÁõÆÊ®ôÊôÇÂàªÁ∑®ÈõÜ
    editTargetTime() {
        const currentTarget = this.targetEndTime;
        const isOvertime = currentTarget === this.timeSettings.overtimeEnd;
        
        if (confirm(isOvertime ? 'ÂÆöÊôÇÔºà17:00Ôºâ„Å´Âàá„ÇäÊõø„Åà„Åæ„Åô„ÅãÔºü' : 'ÊÆãÊ•≠„É¢„Éº„Éâ„Å´Âàá„ÇäÊõø„Åà„Åæ„Åô„ÅãÔºü')) {
            this.targetEndTime = isOvertime ? this.timeSettings.workEnd : this.timeSettings.overtimeEnd;
            this.updateTimeDisplay();
            this.showToast(`ÁõÆÊ®ôÊôÇÂàª„Çí${this.targetEndTime}„Å´Â§âÊõ¥„Åó„Åæ„Åó„Åü`, 'success');
            this.saveData();
        }
    }

    // ÊôÇÈñìË°®Á§∫Êõ¥Êñ∞
    updateTimeDisplay() {
        // ÈñãÂßãÊôÇÂàªË°®Á§∫
        const workStartElement = document.getElementById('workStartTime');
        if (this.workStarted && this.workStartTime) {
            workStartElement.textContent = this.workStartTime.toTimeString().slice(0, 5);
            workStartElement.classList.add('active');
        } else {
            workStartElement.textContent = this.timeSettings.workStart;
            workStartElement.classList.remove('active');
        }

        // ÁõÆÊ®ôÊôÇÂàªË°®Á§∫
        const targetElement = document.getElementById('targetEndTime');
        targetElement.textContent = this.targetEndTime;
        targetElement.classList.toggle('overtime', this.targetEndTime === this.timeSettings.overtimeEnd);
    }

    // ÊôÇÂàªÂΩ¢ÂºèÊ§úË®º
    isValidTimeFormat(timeStr) {
        const timeRegex = /^([01]?[0-9]|2[0-3]):[0-5][0-9]$/;
        return timeRegex.test(timeStr);
    }




    // ÁèæÂú®„ÅÆ„Éï„Ç£„É´„É†„Åß„Ç∏„Éß„Éñ„ÇíËøΩÂä†
    addJobToCurrentFilm() {
        const jobData = this.getJobInputData();
        if (!jobData) return;

        // ÁèæÂú®„ÅÆ„Éï„Ç£„É´„É†„Çª„ÉÉ„Ç∑„Éß„É≥„Åå„Å™„ÅÑÂ†¥Âêà„ÅØ‰ΩúÊàê
        if (!this.currentFilmSession) {
            this.currentFilmSession = this.createNewFilmSession();
            this.filmSessions.push(this.currentFilmSession);
        }

        // „Çª„ÉÉ„Ç∑„Éß„É≥Âõ∫Êúâ„ÅÆ„Éï„Ç£„É´„É†ÊÆãÈáè„ÉÅ„Çß„ÉÉ„ÇØ
        // „É¶„Éº„Ç∂„ÉºÊåáÂÆö„ÅÆÂàùÊúüÊÆãÈáè„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅØ„Çª„ÉÉ„Ç∑„Éß„É≥„ÇíÊõ¥Êñ∞
        if (jobData.initialFilmRemaining !== null && jobData.initialFilmRemaining >= 0) {
            this.currentFilmSession.filmCapacity = jobData.initialFilmRemaining;
            this.currentFilmSession.filmRemaining = jobData.initialFilmRemaining;
            this.currentFilmSession.filmUsed = 0;
        }

        if (this.currentFilmSession.filmRemaining < jobData.usageLength) {
            if (!confirm(`„Éï„Ç£„É´„É†ÊÆãÈáè„Åå‰∏çË∂≥„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇ\nÂøÖË¶Å: ${jobData.usageLength.toFixed(2)}m\nÊÆãÈáè: ${this.currentFilmSession.filmRemaining.toFixed(2)}m\n\n„Åù„Çå„Åß„ÇÇËøΩÂä†„Åó„Åæ„Åô„ÅãÔºü`)) {
                return;
            }
        }

        // „Ç∏„Éß„Éñ„ÇíËøΩÂä†„Åó„Å¶„Çª„ÉÉ„Ç∑„Éß„É≥Âõ∫Êúâ„ÅÆÊÆãÈáè„ÇíÊõ¥Êñ∞
        this.currentFilmSession.jobs.push(jobData);
        this.currentFilmSession.filmRemaining = Math.max(0, this.currentFilmSession.filmRemaining - jobData.usageLength);
        this.currentFilmSession.filmUsed += jobData.usageLength;

        this.saveData();
        this.renderJobList();
        this.updateFinishTime();
        this.updateFilmDisplay();
        this.clearInputs();
        this.showToast(`„Ç∏„Éß„Éñ„ÇíÁèæÂú®„ÅÆ„Éï„Ç£„É´„É†„Å´ËøΩÂä†„Åó„Åæ„Åó„Åü (${jobData.sheets}Êûö)`, 'success');
    }

    // Êñ∞„Åó„ÅÑ„Éï„Ç£„É´„É†„Åß„Ç∏„Éß„Éñ„ÇíËøΩÂä†
    addJobToNewFilm() {
        const jobData = this.getJobInputData();
        if (!jobData) return;

        // ÁèæÂú®„ÅÆ„Éï„Ç£„É´„É†„Çª„ÉÉ„Ç∑„Éß„É≥„ÇíÂÆå‰∫Ü
        if (this.currentFilmSession && this.currentFilmSession.jobs.length > 0) {
            this.currentFilmSession.status = 'completed';
            this.currentFilmSession.endTime = new Date();
        }

        // Êñ∞„Åó„ÅÑ„Éï„Ç£„É´„É†„Çª„ÉÉ„Ç∑„Éß„É≥‰ΩúÊàê
        this.currentFilmSession = this.createNewFilmSession();
        
        // „É¶„Éº„Ç∂„ÉºÊåáÂÆö„ÅÆÂàùÊúüÊÆãÈáè„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅØ„Åù„Çå„Çí‰ΩøÁî®
        if (jobData.initialFilmRemaining !== null && jobData.initialFilmRemaining >= 0) {
            this.currentFilmSession.filmCapacity = jobData.initialFilmRemaining;
            this.currentFilmSession.filmRemaining = jobData.initialFilmRemaining;
            this.currentFilmSession.filmUsed = 0;
        }
        
        this.filmSessions.push(this.currentFilmSession);

        // „Ç∏„Éß„Éñ„ÇíËøΩÂä†„Åó„Å¶„Çª„ÉÉ„Ç∑„Éß„É≥Âõ∫Êúâ„ÅÆÊÆãÈáè„ÇíÊõ¥Êñ∞
        this.currentFilmSession.jobs.push(jobData);
        this.currentFilmSession.filmRemaining = Math.max(0, this.currentFilmSession.filmRemaining - jobData.usageLength);
        this.currentFilmSession.filmUsed += jobData.usageLength;

        // „Éï„Ç£„É´„É†‰∫§ÊèõÊôÇÈñì„ÇíËøΩÂä†
        this.extraTime += this.timeSettings.diffFilmChange;

        this.saveData();
        this.renderJobList();
        this.updateFinishTime();
        this.updateFilmDisplay();
        this.clearInputs();
        this.showToast(`Êñ∞„Åó„ÅÑ„Éï„Ç£„É´„É†„Åß„Ç∏„Éß„Éñ„ÇíËøΩÂä†„Åó„Åæ„Åó„Åü (‰∫§ÊèõÊôÇÈñì +${this.timeSettings.diffFilmChange}ÂàÜ)`, 'success');
    }

    // „Ç∏„Éß„ÉñÂÖ•Âäõ„Éá„Éº„Çø„ÇíÂèñÂæó„ÉªÊ§úË®º
    getJobInputData() {
        const inputMode = document.querySelector('input[name="inputMode"]:checked').value;
        let sheets;

        // ÊûöÊï∞Ë®àÁÆó
        if (inputMode === 'direct') {
            sheets = parseInt(document.getElementById('directSheets').value);
            if (!sheets || sheets <= 0) {
                alert('ÁîüÁî£ÊûöÊï∞„ÇíÊ≠£„Åó„ÅèÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
                return null;
            }
        } else {
            const copies = parseInt(document.getElementById('partsCopies').value);
            const pages = parseInt(document.getElementById('partsPages').value);
            const extra = parseInt(document.getElementById('partsExtra').value) || 0;

            if (!copies || !pages || copies <= 0 || pages <= 0) {
                alert('ÈÉ®Êï∞„Å®Èù¢Êï∞„ÇíÊ≠£„Åó„ÅèÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
                return null;
            }

            // CEILINGÈñ¢Êï∞: ÂÆüÁîüÁî£ÊûöÊï∞ = CEILING(ÈÉ®Êï∞ / Èù¢Êï∞) + ‰∫àÂÇôÊûöÊï∞
            sheets = Math.ceil(copies / pages) + extra;
        }

        // ÂÖ±ÈÄö„Éë„É©„É°„Éº„ÇøÂèñÂæó
        const paperLength = parseFloat(document.getElementById('paperLength').value);
        const overlapWidth = parseFloat(document.getElementById('overlapWidth').value);
        const processSpeed = parseFloat(document.getElementById('processSpeed').value);
        const initialFilmRemaining = parseFloat(document.getElementById('initialFilmRemaining').value) || null;

        if (!paperLength || !overlapWidth || !processSpeed || 
            paperLength <= 0 || overlapWidth < 0 || processSpeed <= 0) {
            alert('Âä†Â∑•Êù°‰ª∂„ÇíÊ≠£„Åó„ÅèÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
            return null;
        }

        // Ë®àÁÆóÂÆüË°å
        const usageLength = (paperLength - overlapWidth) / 1000; // „É°„Éº„Éà„É´Â§âÊèõ
        const processingTime = sheets * usageLength / processSpeed; // ÂàÜ
        
        // Â¶•ÂΩìÊÄß„ÉÅ„Çß„ÉÉ„ÇØ
        if (usageLength <= 0) {
            alert('Á¥ô„ÅÆÈï∑„Åï„ÅØÈáç„Å≠ÂπÖ„Çà„ÇäÂ§ß„Åç„Åè„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
            return null;
        }
        
        if (processingTime > 480) { // 8ÊôÇÈñì‰ª•‰∏ä„ÅÆÂ†¥ÂêàË≠¶Âëä
            if (!confirm(`Ë®àÁÆóÁµêÊûú„Åå ${processingTime.toFixed(1)}ÂàÜÔºà${(processingTime/60).toFixed(1)}ÊôÇÈñìÔºâ„Åß„Åô„ÄÇÁ∂öË°å„Åó„Åæ„Åô„ÅãÔºü`)) {
                return null;
            }
        }

        // „Ç∏„Éß„Éñ„Éá„Éº„Çø‰ΩúÊàê
        return {
            id: Date.now().toString(),
            timestamp: new Date(),
            sheets: sheets,
            paperLength: paperLength,
            overlapWidth: overlapWidth,
            processSpeed: processSpeed,
            usageLength: usageLength,
            processingTime: processingTime,
            inputMode: inputMode,
            completed: false,
            initialFilmRemaining: initialFilmRemaining // „É¶„Éº„Ç∂„ÉºÊåáÂÆö„ÅÆÂàùÊúüÊÆãÈáè
        };
    }

    // Êñ∞„Åó„ÅÑ„Éï„Ç£„É´„É†„Çª„ÉÉ„Ç∑„Éß„É≥‰ΩúÊàê
    createNewFilmSession() {
        const filmCapacity = this.getFilmCapacity();
        
        // „Éï„Ç£„É´„É†ÂÆπÈáèÂÖ•Âäõ„Åå„Ç≠„É£„É≥„Çª„É´„Åæ„Åü„ÅØÁÑ°Âäπ„Å™Â†¥Âêà„ÅØ null „ÇíËøî„Åô
        if (filmCapacity === null) {
            return null;
        }
        
        return {
            id: Date.now().toString(),
            startTime: new Date(),
            endTime: null,
            jobs: [],
            status: 'active', // active, completed
            filmCapacity: filmCapacity, // Êñ∞„Åó„ÅÑ„Éï„Ç£„É´„É†„ÅÆÂàùÊúüÂÆπÈáè
            filmRemaining: filmCapacity, // ÁèæÂú®„ÅÆÊÆãÈáè
            filmUsed: 0 // ‰ΩøÁî®Ê∏à„ÅøÈáè
        };
    }

    // „Éï„Ç£„É´„É†ÂÆπÈáè„ÇíÂèñÂæóÔºà„É¶„Éº„Ç∂„ÉºÂÖ•Âäõ„Åæ„Åü„ÅØ„Ç≠„É£„É≥„Çª„É´Ôºâ
    getFilmCapacity() {
        const userInput = prompt('Êñ∞„Åó„ÅÑ„Éï„Ç£„É´„É†„ÅÆÂÆπÈáè (m) „ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ:', '');
        
        // „Ç≠„É£„É≥„Çª„É´„ÅåÊäº„Åï„Çå„ÅüÂ†¥Âêà„ÅÆ„ÅøÂá¶ÁêÜ„Çí‰∏≠Êñ≠
        if (userInput === null) {
            return null;
        }
        
        // Á©∫ÂÖ•Âäõ„Åæ„Åü„ÅØÁÑ°Âäπ„Å™Êï∞ÂÄ§„ÅÆÂ†¥Âêà„ÅØ0„Å®„Åó„Å¶Âá¶ÁêÜ„ÇíÁ∂öË°å
        const filmCapacity = parseFloat(userInput);
        if (isNaN(filmCapacity) || filmCapacity < 0) {
            return 0;
        }
        
        return filmCapacity;
    }

    // „Ç∏„Éß„Éñ„É™„Çπ„ÉàË°®Á§∫
    renderJobList() {
        const container = document.getElementById('jobListContainer');
        
        if (this.filmSessions.length === 0) {
            container.innerHTML = `
                <div class="new-film-button-container">
                    <button class="btn btn-warning new-film-btn" onclick="dashboard.showJobInputForm(this, null)">
                        + Êñ∞„Åó„ÅÑ„Éï„Ç£„É´„É†„Åß„Ç∏„Éß„Éñ„ÇíÈñãÂßã
                    </button>
                </div>
                <div class="empty-state">
                    „Åæ„Å†„Ç∏„Éß„Éñ„ÅåÁôªÈå≤„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì
                </div>
            `;
            return;
        }

        // ÂêÑ„Çª„ÉÉ„Ç∑„Éß„É≥„ÅÆÁä∂ÊÖã„ÇíÊõ¥Êñ∞
        this.updateSessionStatuses();

        // „Éï„Ç£„É´„É†„Çª„ÉÉ„Ç∑„Éß„É≥„ÇíÈôçÈ†Ü„ÅßË°®Á§∫ÔºàÊñ∞„Åó„ÅÑ„Éï„Ç£„É´„É†„Åå‰∏äÈÉ®Ôºâ
        const reversedSessions = [...this.filmSessions].reverse();
        
        const sessionsHtml = reversedSessions.map((session, displayIndex) => {
            const originalIndex = this.filmSessions.length - displayIndex;
            const sessionStatus = this.getSessionStatus(session);
            // ÂÖ®„Ç∏„Éß„Éñ„ÅÆÁ∑è‰ΩøÁî®„É°„Éº„Çø„ÉºÊï∞„ÇíÊ≠£Á¢∫„Å´Ë®àÁÆó
            const totalUsed = session.jobs.reduce((total, job) => total + (job.sheets * job.usageLength), 0);
            
            // Ver.2.5: „Éï„Ç£„É´„É†‰∏çË∂≥Âà§ÂÆö
            const filmShortage = this.getFilmShortageStatus(session);
            
            return `
            <div class="film-session ${filmShortage.isShortage ? 'film-shortage' : ''}">
                <div class="session-header" onclick="dashboard.toggleSession('${session.id}')">
                    <div class="session-title">
                        „Éï„Ç£„É´„É† ${originalIndex} (${session.jobs.length}„Ç∏„Éß„Éñ)
                        <div class="session-film-info">
                            ‰ΩøÁî®: ${totalUsed.toFixed(1)}m / 
                            <span class="film-capacity-display ${filmShortage.cssClass}" onclick="event.stopPropagation(); dashboard.showFilmCapacityInputUI('${session.id}')" title="„ÇØ„É™„ÉÉ„ÇØ„Åó„Å¶ÂàùÊúüÂÆπÈáè„ÇíË®≠ÂÆö">
                                ÊÆã„Çä: ${(session.filmCapacity - totalUsed).toFixed(1)}m (ÂÆπÈáè: ${session.filmCapacity.toFixed(1)}m)
                                ${filmShortage.isShortage ? ` üö® ${filmShortage.message}` : ''}
                            </span>
                        </div>
                        <div class="film-button-group">
                            <button class="btn btn-sm btn-success film-add-job-btn" onclick="event.stopPropagation(); dashboard.showJobInputForm(this, '${session.id}')">
                                + „Ç∏„Éß„Éñ„ÇíËøΩÂä†
                            </button>
                            <button class="btn btn-sm btn-primary film-add-film-btn" onclick="event.stopPropagation(); dashboard.addFilmToSession('${session.id}')">
                                + „Éï„Ç£„É´„É†„ÇíËøΩÂä†
                            </button>
                        </div>
                    </div>
                    <div class="session-status ${sessionStatus.status}">
                        ${sessionStatus.label}
                    </div>
                </div>
                <div id="session-${session.id}" class="session-jobs">
                    ${session.jobs.slice().reverse().map(job => `
                        <div class="job-item ${job.completed ? 'completed' : ''}" onclick="dashboard.editJobSheets('${session.id}', '${job.id}')">
                            <div class="job-actions-left">
                                <button class="job-delete-btn" onclick="event.stopPropagation(); dashboard.deleteJob('${session.id}', '${job.id}')" title="ÂâäÈô§">
                                    üóëÔ∏è
                                </button>
                            </div>
                            <div class="job-info">
                                <div class="job-name">${this.formatTime(job.timestamp)} „ÅÆ„Ç∏„Éß„Éñ</div>
                                <div class="job-details">
                                    ${job.sheets}Êûö / ${job.usageLength.toFixed(2)}m / ${job.processingTime.toFixed(1)}ÂàÜ / ${(job.sheets * job.usageLength).toFixed(1)}m
                                    ${job.completed ? `<br><strong>ÂÆå‰∫ÜÊôÇÂàª: ${this.formatTime(job.completedAt)}</strong>` : ''}
                                </div>
                            </div>
                            <div class="job-actions-right">
                                ${job.completed ? `
                                    <button class="job-uncomplete-btn" onclick="event.stopPropagation(); dashboard.uncompleteJob('${session.id}', '${job.id}')">
                                        Êú™ÂÆå‰∫Ü„Å´Êàª„Åô
                                    </button>
                                ` : `
                                    <button class="job-complete-btn" onclick="event.stopPropagation(); dashboard.completeJob('${session.id}', '${job.id}')">
                                        ÂÆå‰∫Ü
                                    </button>
                                `}
                            </div>
                        </div>
                    `).join('')}
                </div>
            </div>
        `}).join('');

        // Êñ∞„Åó„ÅÑ„Éï„Ç£„É´„É†Áî®„Éú„Çø„É≥„ÇíÊú´Â∞æ„Å´Â∏∏ÊôÇË°®Á§∫
        const newFilmButton = `
            <div class="new-film-button-container">
                <button class="btn btn-warning new-film-btn" onclick="dashboard.showJobInputForm(this, null)">
                    + Êñ∞„Åó„ÅÑ„Éï„Ç£„É´„É†„Åß„Ç∏„Éß„Éñ„ÇíÈñãÂßã
                </button>
            </div>
        `;

        container.innerHTML = sessionsHtml + newFilmButton;
    }

    // „Ç§„É≥„É©„Ç§„É≥„Åß„Ç∏„Éß„ÉñÂÖ•Âäõ„Éï„Ç©„Éº„É†„ÇíË°®Á§∫
    showJobInputForm(targetElement, sessionId) {
        // Êó¢Â≠ò„ÅÆ„Éï„Ç©„Éº„É†„Åå„ÅÇ„Çå„Å∞ÂâäÈô§
        const existingForm = document.querySelector('.inline-job-form');
        if (existingForm) {
            existingForm.remove();
        }

        const formId = `jobForm-${Date.now()}`;
        const formHtml = `
            <div class="inline-job-form" id="${formId}">
                <div class="job-form-container">
                    <h4>${sessionId ? '„Åì„ÅÆ„Éï„Ç£„É´„É†„Å´„Ç∏„Éß„Éñ„ÇíËøΩÂä†' : 'Êñ∞„Åó„ÅÑ„Éï„Ç£„É´„É†„Åß„Ç∏„Éß„Éñ„ÇíÈñãÂßã'}</h4>
                    
                    <!-- ÂÖ•Âäõ„É¢„Éº„ÉâÈÅ∏Êäû -->
                    <div class="input-mode-selector">
                        <div class="radio-option">
                            <input type="radio" id="${formId}-mode-copies" name="${formId}-inputMode" value="copies" checked>
                            <label for="${formId}-mode-copies">ÁîüÁî£ÊûöÊï∞ÊåáÂÆö</label>
                        </div>
                        <div class="radio-option">
                            <input type="radio" id="${formId}-mode-sheets" name="${formId}-inputMode" value="sheets">
                            <label for="${formId}-mode-sheets">ÂÆüÁîüÁî£ÊûöÊï∞ÊåáÂÆö</label>
                        </div>
                    </div>

                    <!-- ÁîüÁî£ÊûöÊï∞ÊåáÂÆö„É¢„Éº„Éâ -->
                    <div id="${formId}-mode-copies-inputs" class="input-mode active">
                        <div class="form-row">
                            <div class="form-group">
                                <label>ÁîüÁî£ÊûöÊï∞</label>
                                <input type="number" id="${formId}-copies" placeholder="1000" min="1" step="1">
                            </div>
                            <div class="form-group">
                                <label>Âç∞Âà∑Èù¢Êï∞ (1„Åæ„Åü„ÅØ2)</label>
                                <input type="number" id="${formId}-pages" placeholder="2" min="1" max="2" step="1" value="2">
                            </div>
                        </div>
                        <div class="form-row">
                            <div class="form-group">
                                <label>Áî®Á¥ôÈï∑„Åï (mm)</label>
                                <input type="number" id="${formId}-paperLength" placeholder="540" min="1" step="0.1">
                            </div>
                            <div class="form-group">
                                <label>Èáç„Å™„ÇäÂπÖ (mm)</label>
                                <input type="number" id="${formId}-overlapWidth" placeholder="0" min="0" step="0.1" value="0">
                            </div>
                        </div>
                    </div>

                    <!-- ÂÆüÁîüÁî£ÊûöÊï∞ÊåáÂÆö„É¢„Éº„Éâ -->
                    <div id="${formId}-mode-sheets-inputs" class="input-mode">
                        <div class="form-row">
                            <div class="form-group">
                                <label>ÂÆüÁîüÁî£ÊûöÊï∞</label>
                                <input type="number" id="${formId}-sheets" placeholder="500" min="1" step="1">
                            </div>
                            <div class="form-group">
                                <label>1Êûö„ÅÇ„Åü„Çä‰ΩøÁî®Èï∑ (m)</label>
                                <input type="number" id="${formId}-usageLength" placeholder="0.54" min="0.001" step="0.001">
                            </div>
                        </div>
                    </div>

                    <!-- ÂÖ±ÈÄöÈ†ÖÁõÆ -->
                    <div class="form-row">
                        <div class="form-group">
                            <label>Âä†Â∑•ÈÄüÂ∫¶ (m/ÂàÜ)</label>
                            <input type="number" id="${formId}-processSpeed" placeholder="12" min="0.1" step="0.1" value="12">
                        </div>
                        ${!sessionId ? `
                        <div class="form-group">
                            <label>„Éï„Ç£„É´„É†ÂàùÊúüÊÆãÈáè (m)</label>
                            <input type="number" id="${formId}-initialFilmRemaining" placeholder="2000" min="0" step="1">
                        </div>
                        ` : ''}
                    </div>

                    <!-- „Éú„Çø„É≥ -->
                    <div class="form-actions">
                        <button type="button" class="btn btn-primary" onclick="dashboard.handleSaveJob('${formId}', '${sessionId}')">
                            ${sessionId ? '„Ç∏„Éß„Éñ„ÇíËøΩÂä†' : '„Ç∏„Éß„Éñ„ÇíÈñãÂßã'}
                        </button>
                        <button type="button" class="btn btn-secondary" onclick="document.getElementById('${formId}').remove()">
                            „Ç≠„É£„É≥„Çª„É´
                        </button>
                    </div>
                </div>
            </div>
        `;

        // „Éú„Çø„É≥„ÅÆÁõ¥Âæå„Å´ÊåøÂÖ•
        targetElement.insertAdjacentHTML('afterend', formHtml);

        // „Ç§„Éô„É≥„Éà„É™„Çπ„Éä„Éº„ÇíË®≠ÂÆö
        const modeRadios = document.querySelectorAll(`input[name="${formId}-inputMode"]`);
        modeRadios.forEach(radio => {
            radio.addEventListener('change', (e) => {
                // „Åô„Åπ„Å¶„ÅÆ„É¢„Éº„Éâ„ÇíÈùûË°®Á§∫
                document.querySelectorAll(`#${formId} .input-mode`).forEach(mode => mode.classList.remove('active'));
                // ÈÅ∏Êäû„Åï„Çå„Åü„É¢„Éº„Éâ„ÇíË°®Á§∫
                document.getElementById(`${formId}-mode-${e.target.value}-inputs`).classList.add('active');
            });
        });
    }

    // „Ç§„É≥„É©„Ç§„É≥„Éï„Ç©„Éº„É†„Åã„Çâ„Ç∏„Éß„Éñ„Éá„Éº„Çø„Çí‰øùÂ≠ò
    handleSaveJob(formId, sessionId) {
        const form = document.getElementById(formId);
        if (!form) return;

        // ÂÖ•Âäõ„É¢„Éº„Éâ„ÇíÂèñÂæó
        const inputMode = form.querySelector('input[name="' + formId + '-inputMode"]:checked').value;
        
        let jobData;
        try {
            if (inputMode === 'copies') {
                // ÁîüÁî£ÊûöÊï∞ÊåáÂÆö„É¢„Éº„Éâ
                const copies = parseFloat(form.querySelector(`#${formId}-copies`).value);
                const pages = parseFloat(form.querySelector(`#${formId}-pages`).value);
                const paperLength = parseFloat(form.querySelector(`#${formId}-paperLength`).value);
                const overlapWidth = parseFloat(form.querySelector(`#${formId}-overlapWidth`).value);
                const processSpeed = parseFloat(form.querySelector(`#${formId}-processSpeed`).value);

                if (!copies || !pages || !paperLength || !processSpeed) {
                    this.showToast('ÂøÖË¶Å„Å™È†ÖÁõÆ„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ', 'error');
                    return;
                }

                // Ë®àÁÆóÂá¶ÁêÜ
                const sheets = Math.ceil(copies / pages);
                const usageLength = (paperLength - overlapWidth) / 1000; // mm ‚Üí m
                const processingTime = (sheets * usageLength) / processSpeed;

                jobData = {
                    id: Date.now().toString(),
                    timestamp: new Date(),
                    sheets: sheets,
                    paperLength: paperLength,
                    overlapWidth: overlapWidth,
                    processSpeed: processSpeed,
                    usageLength: usageLength,
                    processingTime: processingTime,
                    inputMode: 'copies',
                    completed: false,
                    completedAt: null,
                    initialFilmRemaining: sessionId ? null : (parseFloat(form.querySelector(`#${formId}-initialFilmRemaining`)?.value) || null)
                };

            } else {
                // ÂÆüÁîüÁî£ÊûöÊï∞ÊåáÂÆö„É¢„Éº„Éâ
                const sheets = parseFloat(form.querySelector(`#${formId}-sheets`).value);
                const usageLength = parseFloat(form.querySelector(`#${formId}-usageLength`).value);
                const processSpeed = parseFloat(form.querySelector(`#${formId}-processSpeed`).value);

                if (!sheets || !usageLength || !processSpeed) {
                    this.showToast('ÂøÖË¶Å„Å™È†ÖÁõÆ„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ', 'error');
                    return;
                }

                const processingTime = (sheets * usageLength) / processSpeed;

                jobData = {
                    id: Date.now().toString(),
                    timestamp: new Date(),
                    sheets: sheets,
                    paperLength: null,
                    overlapWidth: null,
                    processSpeed: processSpeed,
                    usageLength: usageLength,
                    processingTime: processingTime,
                    inputMode: 'sheets',
                    completed: false,
                    completedAt: null,
                    initialFilmRemaining: sessionId ? null : (parseFloat(form.querySelector(`#${formId}-initialFilmRemaining`)?.value) || null)
                };
            }

            // „Çª„ÉÉ„Ç∑„Éß„É≥„Å´„Ç∏„Éß„Éñ„ÇíËøΩÂä†
            if (sessionId && sessionId !== 'null') {
                // Êó¢Â≠ò„ÅÆ„Éï„Ç£„É´„É†„Çª„ÉÉ„Ç∑„Éß„É≥„Å´ËøΩÂä†
                this.addJobToExistingSession(sessionId, jobData);
            } else {
                // Êñ∞„Åó„ÅÑ„Éï„Ç£„É´„É†„Çª„ÉÉ„Ç∑„Éß„É≥„Çí‰ΩúÊàê
                this.addJobToNewFilmSession(jobData);
            }

            // „Éï„Ç©„Éº„É†„ÇíÂâäÈô§
            form.remove();

        } catch (error) {
            console.error('„Ç∏„Éß„Éñ‰øùÂ≠ò„Ç®„É©„Éº:', error);
            this.showToast('„Ç∏„Éß„Éñ„ÅÆ‰øùÂ≠ò‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü', 'error');
        }
    }

    // Êó¢Â≠ò„Çª„ÉÉ„Ç∑„Éß„É≥„Å´„Ç∏„Éß„Éñ„ÇíËøΩÂä†
    addJobToExistingSession(sessionId, jobData) {
        const session = this.filmSessions.find(s => s.id === sessionId);
        if (!session) {
            this.showToast('ÊåáÂÆö„Åï„Çå„Åü„Éï„Ç£„É´„É†„Çª„ÉÉ„Ç∑„Éß„É≥„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì', 'error');
            return;
        }

        // „Éï„Ç£„É´„É†ÊÆãÈáè„ÉÅ„Çß„ÉÉ„ÇØ
        if (session.filmRemaining < jobData.usageLength) {
            if (!confirm(`„Éï„Ç£„É´„É†ÊÆãÈáè„Åå‰∏çË∂≥„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇ\nÂøÖË¶Å: ${jobData.usageLength.toFixed(2)}m\nÊÆãÈáè: ${session.filmRemaining.toFixed(2)}m\n\n„Åù„Çå„Åß„ÇÇËøΩÂä†„Åó„Åæ„Åô„ÅãÔºü`)) {
                return;
            }
        }

        // „Ç∏„Éß„Éñ„ÇíËøΩÂä†„Åó„Å¶„Çª„ÉÉ„Ç∑„Éß„É≥Âõ∫Êúâ„ÅÆÊÆãÈáè„ÇíÊõ¥Êñ∞
        session.jobs.push(jobData);
        session.filmRemaining = Math.max(0, session.filmRemaining - jobData.usageLength);
        session.filmUsed += jobData.usageLength;

        this.saveData();
        this.renderJobList();
        this.updateFinishTime();
        this.updateFilmDisplay();
        
        this.showToast(`„Ç∏„Éß„Éñ„Çí„Éï„Ç£„É´„É†„Å´ËøΩÂä†„Åó„Åæ„Åó„Åü (${jobData.sheets}Êûö)`, 'success');
    }

    // Êñ∞„Åó„ÅÑ„Éï„Ç£„É´„É†„Çª„ÉÉ„Ç∑„Éß„É≥„Çí‰ΩúÊàê„Åó„Å¶„Ç∏„Éß„Éñ„ÇíËøΩÂä†
    addJobToNewFilmSession(jobData) {
        // Êñ∞„Åó„ÅÑ„Éï„Ç£„É´„É†„Çª„ÉÉ„Ç∑„Éß„É≥‰ΩúÊàê
        this.currentFilmSession = this.createNewFilmSession();
        
        // „Éï„Ç£„É´„É†ÂÆπÈáèÂÖ•Âäõ„Åå„Ç≠„É£„É≥„Çª„É´„Åï„Çå„ÅüÂ†¥Âêà„ÅØÂá¶ÁêÜ„Çí‰∏≠Êñ≠
        if (this.currentFilmSession === null) {
            this.showToast('„Éï„Ç£„É´„É†‰ΩúÊàê„Åå„Ç≠„É£„É≥„Çª„É´„Åï„Çå„Åæ„Åó„Åü', 'info');
            return;
        }
        
        // „É¶„Éº„Ç∂„ÉºÊåáÂÆö„ÅÆÂàùÊúüÊÆãÈáè„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅØ„Åù„Çå„Çí‰ΩøÁî®
        if (jobData.initialFilmRemaining !== null && jobData.initialFilmRemaining >= 0) {
            this.currentFilmSession.filmCapacity = jobData.initialFilmRemaining;
            this.currentFilmSession.filmRemaining = jobData.initialFilmRemaining;
            this.currentFilmSession.filmUsed = 0;
        }
        
        this.filmSessions.push(this.currentFilmSession);

        // „Ç∏„Éß„Éñ„ÇíËøΩÂä†„Åó„Å¶„Çª„ÉÉ„Ç∑„Éß„É≥Âõ∫Êúâ„ÅÆÊÆãÈáè„ÇíÊõ¥Êñ∞
        this.currentFilmSession.jobs.push(jobData);
        this.currentFilmSession.filmRemaining = Math.max(0, this.currentFilmSession.filmRemaining - jobData.usageLength);
        this.currentFilmSession.filmUsed += jobData.usageLength;

        // „Éï„Ç£„É´„É†‰∫§ÊèõÊôÇÈñì„ÇíËøΩÂä†Ôºà2ÂÄãÁõÆ‰ª•Èôç„ÅÆ„Éï„Ç£„É´„É†„ÅÆÂ†¥ÂêàÔºâ
        if (this.filmSessions.length > 1) {
            this.extraTime += this.timeSettings.diffFilmChange;
        }

        this.saveData();
        this.renderJobList();
        this.updateFinishTime();
        this.updateFilmDisplay();
        
        const exchangeMessage = this.filmSessions.length > 1 ? ` (‰∫§ÊèõÊôÇÈñì +${this.timeSettings.diffFilmChange}ÂàÜ)` : '';
        this.showToast(`Êñ∞„Åó„ÅÑ„Éï„Ç£„É´„É†„Åß„Ç∏„Éß„Éñ„ÇíËøΩÂä†„Åó„Åæ„Åó„Åü${exchangeMessage}`, 'success');
    }

    // „Çª„ÉÉ„Ç∑„Éß„É≥Áä∂ÊÖãÁÆ°ÁêÜÔºöË¶™„Éï„Ç£„É´„É†„Éñ„É≠„ÉÉ„ÇØ„ÅÆÁä∂ÊÖã„ÇíÂ≠ê„Ç∏„Éß„Éñ„Å´Âü∫„Å•„ÅÑ„Å¶Ëá™ÂãïÊõ¥Êñ∞
    updateSessionStatuses() {
        this.filmSessions.forEach(session => {
            // null„Çª„ÉÉ„Ç∑„Éß„É≥„Çí„Çπ„Ç≠„ÉÉ„Éó
            if (!session || !session.jobs) return;
            
            const completedJobs = session.jobs.filter(job => job.completed);
            const totalJobs = session.jobs.length;
            
            if (totalJobs === 0) {
                session.status = 'active'; // Á©∫„ÅÆ„Çª„ÉÉ„Ç∑„Éß„É≥„ÅØÈÄ≤Ë°å‰∏≠
            } else if (completedJobs.length === totalJobs) {
                session.status = 'completed'; // ÂÖ®„Ç∏„Éß„ÉñÂÆå‰∫Ü
            } else {
                session.status = 'active'; // ‰∏Ä„Å§„Åß„ÇÇÊú™ÂÆå‰∫Ü„Åå„ÅÇ„Çå„Å∞ÈÄ≤Ë°å‰∏≠
            }
        });
    }

    // „Çª„ÉÉ„Ç∑„Éß„É≥Áä∂ÊÖã„ÇíÂèñÂæóÔºàË°®Á§∫Áî®Ôºâ
    getSessionStatus(session) {
        const completedJobs = session.jobs.filter(job => job.completed);
        const totalJobs = session.jobs.length;
        
        if (totalJobs === 0) {
            return { status: 'active', label: 'ÈÄ≤Ë°å‰∏≠' };
        } else if (completedJobs.length === totalJobs) {
            return { status: 'completed', label: 'ÂÆå‰∫Ü' };
        } else {
            return { status: 'active', label: 'ÈÄ≤Ë°å‰∏≠' };
        }
    }

    // „Çª„ÉÉ„Ç∑„Éß„É≥Â±ïÈñã/Êäò„Çä„Åü„Åü„Åø
    toggleSession(sessionId) {
        const sessionJobs = document.getElementById(`session-${sessionId}`);
        sessionJobs.classList.toggle('collapsed');
    }

    // „Ç∏„Éß„ÉñÂÆå‰∫Ü
    completeJob(sessionId, jobId) {
        const session = this.filmSessions.find(s => s.id === sessionId);
        if (!session) {
            console.error('„Çª„ÉÉ„Ç∑„Éß„É≥„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì:', sessionId);
            return;
        }

        const job = session.jobs.find(j => j.id === jobId);
        if (!job) {
            console.error('„Ç∏„Éß„Éñ„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì:', jobId);
            return;
        }

        // Á¢∫ÂÆöÁµÇ‰∫ÜÊôÇÂàª„ÇíË®òÈå≤
        const completedAt = new Date();
        job.completed = true;
        job.completedAt = completedAt;
        job.actualCompletionTime = completedAt; // ÂÆüÈöõ„ÅÆÂÆå‰∫ÜÊôÇÂàª

        // „Éï„Ç£„É´„É†ÊÆãÈáè„ÇíÊ≠£„Åó„ÅèÊõ¥Êñ∞ÔºàÂÆå‰∫ÜÊôÇ„Å´„Éï„Ç£„É´„É†‰ΩøÁî®Èáè„ÇíÂèçÊò†Ôºâ
        if (!job.wasFilmUsageApplied) {
            const totalJobUsage = job.sheets * job.usageLength;
            session.filmRemaining = Math.max(0, session.filmRemaining - totalJobUsage);
            session.filmUsed += totalJobUsage;
            job.wasFilmUsageApplied = true; // ÈáçË§áÈÅ©Áî®Èò≤Ê≠¢„Éï„É©„Ç∞
        }

        // „Çª„ÉÉ„Ç∑„Éß„É≥Áä∂ÊÖã„ÇÇÊõ¥Êñ∞
        this.updateSessionStatuses();

        // ÂÖ®‰Ωì„ÅÆÁµÇ‰∫ÜÊôÇÂàª„ÇíÂÜçË®àÁÆóÔºàÂÆå‰∫Ü„Åó„Åü„Ç∏„Éß„Éñ„ÅØÂÆüÊôÇÈñì„Åã„ÇâÈô§Â§ñÔºâ
        this.recalculateFinishTime();

        this.saveData();
        this.renderJobList();
        this.updateFinishTime();
        
        const completedTimeStr = completedAt.toLocaleTimeString('ja-JP', {
            hour: '2-digit',
            minute: '2-digit'
        });
        this.showToast(`„Ç∏„Éß„Éñ„ÇíÂÆå‰∫Ü„Åó„Åæ„Åó„ÅüÔºà${completedTimeStr}Ôºâ`, 'success');
    }

    // „Ç∏„Éß„ÉñÊú™ÂÆå‰∫Ü„Å´Êàª„Åô
    uncompleteJob(sessionId, jobId) {
        const session = this.filmSessions.find(s => s.id === sessionId);
        if (!session) {
            console.error('„Çª„ÉÉ„Ç∑„Éß„É≥„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì:', sessionId);
            return;
        }

        const job = session.jobs.find(j => j.id === jobId);
        if (!job) {
            console.error('„Ç∏„Éß„Éñ„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì:', jobId);
            return;
        }

        // ÂÆå‰∫ÜÁä∂ÊÖã„Çí„É™„Çª„ÉÉ„Éà
        job.completed = false;
        job.completedAt = null;
        job.actualCompletionTime = null;

        // „Éï„Ç£„É´„É†ÊÆãÈáè„ÇíÊàª„ÅôÔºàÊú™ÂÆå‰∫Ü„Å´Êàª„ÅôÊôÇ„Å´„Éï„Ç£„É´„É†‰ΩøÁî®Èáè„ÇíÊàª„ÅôÔºâ
        if (job.wasFilmUsageApplied) {
            const totalJobUsage = job.sheets * job.usageLength;
            session.filmRemaining += totalJobUsage;
            session.filmUsed = Math.max(0, session.filmUsed - totalJobUsage);
            job.wasFilmUsageApplied = false; // „Éï„É©„Ç∞„Çí„É™„Çª„ÉÉ„Éà
        }

        // „Çª„ÉÉ„Ç∑„Éß„É≥Áä∂ÊÖã„ÇÇÊõ¥Êñ∞ÔºàË¶™„Éñ„É≠„ÉÉ„ÇØ„ÅåËá™ÂãïÁöÑ„Å´„ÄåÈÄ≤Ë°å‰∏≠„Äç„Å´Êàª„ÇãÔºâ
        this.updateSessionStatuses();

        // ÂÖ®‰Ωì„ÅÆÁµÇ‰∫ÜÊôÇÂàª„ÇíÂÜçË®àÁÆó
        this.recalculateFinishTime();

        this.saveData();
        this.renderJobList();
        this.updateFinishTime();
        
        this.showToast('„Ç∏„Éß„Éñ„ÇíÊú™ÂÆå‰∫Ü„Å´Êàª„Åó„Åæ„Åó„Åü', 'info');
    }

    // „Éï„Ç£„É´„É†ÊÆãÈáèËøΩÂä†Ê©üËÉΩ
    addFilmRemaining(sessionId, jobId) {
        const session = this.filmSessions.find(s => s.id === sessionId);
        if (!session) return;

        const job = session.jobs.find(j => j.id === jobId);
        if (!job) return;

        const currentRemaining = session.filmRemaining;
        const adjustmentAmount = prompt(
            `„Éï„Ç£„É´„É†ÊÆãÈáè„ÇíË™øÊï¥„Åó„Å¶„Åè„Å†„Åï„ÅÑ:\n\n` +
            `ÁèæÂú®„ÅÆÊÆãÈáè: ${currentRemaining.toFixed(1)}m\n` +
            `„Åì„ÅÆ„Ç∏„Éß„Éñ„ÅÆÂøÖË¶ÅÈáè: ${(job.sheets * job.usageLength).toFixed(2)}m\n\n` +
            `Ë™øÊï¥Èáè (Ê≠£Êï∞„ÅßËøΩÂä†„ÄÅË≤†Êï∞„ÅßÊ∏õÁÆó):`,
            ''
        );
        
        if (adjustmentAmount && !isNaN(adjustmentAmount)) {
            const adjustAmount = parseFloat(adjustmentAmount);
            
            // „Çª„ÉÉ„Ç∑„Éß„É≥„ÅÆ„Éï„Ç£„É´„É†ÊÆãÈáè„Å®ÂÆπÈáè„ÇíË™øÊï¥
            session.filmRemaining += adjustAmount;
            session.filmCapacity += adjustAmount;
            
            // ÊÆãÈáè„ÅåË≤†„Å´„Å™„Çâ„Å™„ÅÑ„Çà„ÅÜ„Å´Âà∂Èôê
            if (session.filmRemaining < 0) {
                session.filmRemaining = 0;
            }
            if (session.filmCapacity < 0) {
                session.filmCapacity = 0;
            }
            
            this.saveData();
            this.renderJobList();
            this.updateFilmDisplay();
            
            const actionText = adjustAmount >= 0 ? `ËøΩÂä†` : `Ê∏õÁÆó`;
            this.showToast(`„Éï„Ç£„É´„É†ÊÆãÈáè„Çí ${Math.abs(adjustAmount)}m ${actionText}„Åó„Åæ„Åó„Åü`, 'success');
        }
    }

    // „Ç∏„Éß„Éñ„ÅÆÁîüÁî£ÊûöÊï∞„ÇíÁ∑®ÈõÜ
    editJobSheets(sessionId, jobId) {
        const session = this.filmSessions.find(s => s.id === sessionId);
        if (!session) return;

        const job = session.jobs.find(j => j.id === jobId);
        if (!job) return;

        const currentSheets = job.sheets;
        const newSheets = prompt(
            `ÁîüÁî£ÊûöÊï∞„Çí‰øÆÊ≠£„Åó„Å¶„Åè„Å†„Åï„ÅÑ:\n\n` +
            `ÁèæÂú®„ÅÆÊûöÊï∞: ${currentSheets}Êûö\n` +
            `Êñ∞„Åó„ÅÑÊûöÊï∞„ÇíÂÖ•Âäõ:`,
            currentSheets.toString()
        );
        
        if (newSheets && !isNaN(newSheets)) {
            const sheets = parseInt(newSheets);
            if (sheets > 0) {
                // Êóß‰ΩøÁî®Èáè„ÇíÊàª„ÅôÔºàÂÆå‰∫ÜÊ∏à„Åø„ÅÆÂ†¥ÂêàÔºâ
                if (job.completed && job.wasFilmUsageApplied) {
                    const oldTotalUsage = currentSheets * job.usageLength;
                    session.filmRemaining += oldTotalUsage;
                    session.filmUsed -= oldTotalUsage;
                }
                
                // „Ç∏„Éß„ÉñÊÉÖÂ†±„ÇíÊõ¥Êñ∞
                job.sheets = sheets;
                const newTotalUsage = sheets * job.usageLength;
                job.processingTime = newTotalUsage / job.processSpeed; // Âá¶ÁêÜÊôÇÈñì„ÇÇÂÜçË®àÁÆó
                
                // Êñ∞‰ΩøÁî®Èáè„ÇíÈÅ©Áî®ÔºàÂÆå‰∫ÜÊ∏à„Åø„ÅÆÂ†¥ÂêàÔºâ
                if (job.completed && job.wasFilmUsageApplied) {
                    session.filmRemaining = Math.max(0, session.filmRemaining - newTotalUsage);
                    session.filmUsed += newTotalUsage;
                }
                
                this.saveData();
                this.renderJobList();
                this.updateFinishTime();
                
                this.showToast(`ÁîüÁî£ÊûöÊï∞„Çí ${currentSheets}Êûö ‚Üí ${sheets}Êûö „Å´Â§âÊõ¥„Åó„Åæ„Åó„Åü`, 'success');
            }
        }
    }

    // „Éï„Ç£„É´„É†„Çí„Çª„ÉÉ„Ç∑„Éß„É≥„Å´ËøΩÂä†
    addFilmToSession(sessionId) {
        const session = this.filmSessions.find(s => s.id === sessionId);
        if (!session) return;

        const currentCapacity = session.filmCapacity;
        const additionalFilm = prompt(
            `„Éï„Ç£„É´„É†„ÇíËøΩÂä†„Åó„Å¶„Åè„Å†„Åï„ÅÑ:\n\n` +
            `ÁèæÂú®„ÅÆÂÆπÈáè: ${currentCapacity.toFixed(1)}m\n` +
            `ËøΩÂä†„Åô„Çã„Éï„Ç£„É´„É†„ÅÆÈï∑„Åï (m) „ÇíÂÖ•Âäõ:`,
            ''
        );
        
        if (additionalFilm && !isNaN(additionalFilm)) {
            const addAmount = parseFloat(additionalFilm);
            if (addAmount > 0) {
                session.filmCapacity += addAmount;
                session.filmRemaining += addAmount;
                
                this.saveData();
                this.renderJobList();
                this.updateFilmDisplay();
                
                this.showToast(`„Éï„Ç£„É´„É†„Çí ${addAmount}m ËøΩÂä†„Åó„Åæ„Åó„Åü`, 'success');
            }
        }
    }

    // ÁµÇ‰∫ÜÊôÇÂàªÂÜçË®àÁÆóÔºàÂÆå‰∫Ü„Ç∏„Éß„Éñ„ÇíËÄÉÊÖÆÔºâ
    recalculateFinishTime() {
        if (!this.workStarted) return;

        // Êú™ÂÆå‰∫Ü„Ç∏„Éß„Éñ„ÅÆ„Åø„ÅÆÂêàË®àÊôÇÈñì„ÇíË®àÁÆó
        const allJobs = this.filmSessions.flatMap(session => session.jobs);
        const incompleteJobs = allJobs.filter(job => !job.completed);
        const totalProcessingTime = incompleteJobs.reduce((total, job) => total + job.processingTime, 0);
        
        // ÂÆå‰∫Ü„Ç∏„Éß„Éñ„ÅÆÂÆüÈöõ„ÅÆÊôÇÈñìÊ∂àË≤ª„ÇíËÄÉÊÖÆÔºàÁèæÂú®ÊôÇÂàªÂü∫Ê∫ñÔºâ
        const now = new Date();
        const elapsedTime = (now - this.workStartTime) / 60000; // ÂàÜ
        
        // ÊÆã„ÇäÊôÇÈñì = Êú™ÂÆå‰∫Ü„Ç∏„Éß„Éñ„ÅÆÊôÇÈñì + ËøΩÂä†ÊôÇÈñì + Áâá‰ªò„ÅëÊôÇÈñì
        const remainingTime = totalProcessingTime + this.extraTime + this.timeSettings.cleanupTime;
        
        // Êñ∞„Åó„ÅÑÁµÇ‰∫Ü‰∫àÂÆöÊôÇÂàª = ÁèæÂú®ÊôÇÂàª + ÊÆã„ÇäÊôÇÈñì
        this.estimatedFinishTime = new Date(now.getTime() + remainingTime * 60000);
        
        return this.estimatedFinishTime;
    }

    // „Ç∏„Éß„ÉñÂâäÈô§
    deleteJob(sessionId, jobId) {
        if (!confirm('„Åì„ÅÆ„Ç∏„Éß„Éñ„ÇíÂâäÈô§„Åó„Åæ„Åô„ÅãÔºü')) return;

        const session = this.filmSessions.find(s => s.id === sessionId);
        if (!session) return;

        const jobIndex = session.jobs.findIndex(j => j.id === jobId);
        if (jobIndex === -1) return;

        const job = session.jobs[jobIndex];
        
        // „Çª„ÉÉ„Ç∑„Éß„É≥Âõ∫Êúâ„ÅÆ„Éï„Ç£„É´„É†‰ΩøÁî®Èáè„ÇíÊàª„Åô
        if (!job.completed) {
            session.filmRemaining += job.usageLength;
            session.filmUsed = Math.max(0, session.filmUsed - job.usageLength);
        }

        session.jobs.splice(jobIndex, 1);

        // „Çª„ÉÉ„Ç∑„Éß„É≥„ÅåÁ©∫„Å´„Å™„Å£„ÅüÂ†¥Âêà„ÅØÂâäÈô§
        if (session.jobs.length === 0) {
            const sessionIndex = this.filmSessions.findIndex(s => s.id === sessionId);
            this.filmSessions.splice(sessionIndex, 1);
            
            // ÁèæÂú®„ÅÆ„Çª„ÉÉ„Ç∑„Éß„É≥„ÇíÊõ¥Êñ∞
            if (this.currentFilmSession && this.currentFilmSession.id === sessionId) {
                this.currentFilmSession = this.filmSessions.find(s => s.status === 'active') || null;
            }
        }

        this.saveData();
        this.renderJobList();
        this.updateFinishTime();
        this.showToast('„Ç∏„Éß„Éñ„ÇíÂâäÈô§„Åó„Åæ„Åó„Åü', 'success');
    }

    // ÊâãÂãïÊôÇÈñìËøΩÂä†
    addManualTime() {
        const minutes = prompt('ËøΩÂä†„Åô„ÇãÊôÇÈñì„ÇíÂàÜ„ÅßÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ:');
        if (minutes && !isNaN(minutes) && parseInt(minutes) > 0) {
            this.extraTime += parseInt(minutes);
            this.saveData();
            this.updateFinishTime();
            this.showToast(`${minutes}ÂàÜ„ÇíËøΩÂä†„Åó„Åæ„Åó„Åü`, 'success');
        }
    }

    // Êòº‰ºë„ÅøËøΩÂä†
    addLunchBreak() {
        this.extraTime += this.timeSettings.lunchBreak;
        this.saveData();
        this.updateFinishTime();
        this.showToast(`Êòº‰ºë„Åø ${this.timeSettings.lunchBreak}ÂàÜ„ÇíËøΩÂä†„Åó„Åæ„Åó„Åü`, 'success');
    }

    // ‰∫§ÊèõÊôÇÈñìËøΩÂä†
    addExchangeTime() {
        const exchangeTime = this.timeSettings.diffFilmChange;
        this.extraTime += exchangeTime;
        this.saveData();
        this.updateFinishTime();
        this.showToast(`„Éï„Ç£„É´„É†‰∫§ÊèõÊôÇÈñì ${exchangeTime}ÂàÜ„ÇíËøΩÂä†„Åó„Åæ„Åó„Åü`, 'success');
    }

    // „Éï„Ç£„É´„É†ÊÆãÈáèË®≠ÂÆö
    setFilmAmount() {
        if (!this.currentFilmSession) {
            this.showToast('ÂÖà„Å´„Ç∏„Éß„Éñ„ÇíËøΩÂä†„Åó„Å¶„Éï„Ç£„É´„É†„Çª„ÉÉ„Ç∑„Éß„É≥„ÇíÈñãÂßã„Åó„Å¶„Åè„Å†„Åï„ÅÑ', 'warning');
            return;
        }

        const currentRemaining = this.currentFilmSession.filmRemaining;
        const amount = prompt('ÁèæÂú®„ÅÆ„Éï„Ç£„É´„É†ÊÆãÈáè (m) „ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ:', currentRemaining.toString());
        if (amount && !isNaN(amount) && parseFloat(amount) >= 0) {
            this.currentFilmSession.filmRemaining = parseFloat(amount);
            // ‰ΩøÁî®Èáè„ÇÇÂÜçË®àÁÆóÔºàÂÆπÈáè - ÊÆãÈáè = ‰ΩøÁî®ÈáèÔºâ
            this.currentFilmSession.filmUsed = this.currentFilmSession.filmCapacity - parseFloat(amount);
            this.updateFilmDisplay();
            this.saveData();
            this.showToast(`„Éï„Ç£„É´„É†ÊÆãÈáè„Çí ${amount}m „Å´Ë®≠ÂÆö„Åó„Åæ„Åó„Åü`, 'success');
        }
    }

    // Ë®≠ÂÆö„É¢„Éº„ÉÄ„É´Ë°®Á§∫
    showSettings() {
        this.loadSettingsToUI();
        const modal = document.getElementById('settingsModal');
        modal.classList.add('active');
    }

    // Ë®≠ÂÆö„É¢„Éº„ÉÄ„É´ÈùûË°®Á§∫
    hideSettings() {
        const modal = document.getElementById('settingsModal');
        modal.classList.remove('active');
    }

    // Ë®≠ÂÆö„ÇíUI„Å´Ë™≠„ÅøËæº„Åø
    loadSettingsToUI() {
        document.getElementById('settingWorkStart').value = this.timeSettings.workStart;
        document.getElementById('settingWorkEnd').value = this.timeSettings.workEnd;
        document.getElementById('settingOvertimeEnd').value = this.timeSettings.overtimeEnd;
        document.getElementById('settingLunchBreak').value = this.timeSettings.lunchBreak;
        document.getElementById('settingCleanupTime').value = this.timeSettings.cleanupTime;
        document.getElementById('settingDiffFilmChange').value = this.timeSettings.diffFilmChange;
    }

    // Ë®≠ÂÆö„Çí‰øùÂ≠ò
    saveSettings() {
        const newSettings = {
            workStart: document.getElementById('settingWorkStart').value,
            workEnd: document.getElementById('settingWorkEnd').value,
            overtimeEnd: document.getElementById('settingOvertimeEnd').value,
            lunchBreak: parseInt(document.getElementById('settingLunchBreak').value),
            cleanupTime: parseInt(document.getElementById('settingCleanupTime').value),
            sameFilmChange: this.timeSettings.sameFilmChange, // Á∂≠ÊåÅ
            diffFilmChange: parseInt(document.getElementById('settingDiffFilmChange').value)
        };

        // ÂÖ•ÂäõÂÄ§Ê§úË®º
        if (!newSettings.workStart || !newSettings.workEnd || !newSettings.overtimeEnd ||
            newSettings.lunchBreak < 0 || newSettings.cleanupTime < 0 || newSettings.diffFilmChange < 0) {
            alert('Ë®≠ÂÆöÂÄ§„ÇíÊ≠£„Åó„ÅèÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
            return;
        }

        this.timeSettings = newSettings;
        this.saveData();
        this.updateFinishTime(); // ÁµÇ‰∫ÜÊôÇÂàª„ÇíÂÜçË®àÁÆó
        this.hideSettings();
        this.showToast('Ë®≠ÂÆö„Çí‰øùÂ≠ò„Åó„Åæ„Åó„Åü', 'success');
    }

    // Ë®≠ÂÆö„Çí„Éá„Éï„Ç©„É´„Éà„Å´Êàª„Åô
    resetSettings() {
        if (confirm('Ë®≠ÂÆö„Çí„Éá„Éï„Ç©„É´„ÉàÂÄ§„Å´Êàª„Åó„Åæ„Åô„ÅãÔºü')) {
            this.timeSettings = {
                workStart: "08:30",
                workEnd: "17:00",
                overtimeEnd: "18:00",
                lunchBreak: 60,
                cleanupTime: 15,
                sameFilmChange: 10,
                diffFilmChange: 15
            };
            this.loadSettingsToUI();
            this.saveData();
            this.updateFinishTime();
            this.showToast('Ë®≠ÂÆö„Çí„Éá„Éï„Ç©„É´„Éà„Å´Êàª„Åó„Åæ„Åó„Åü', 'success');
        }
    }

    // „É¨„Éù„Éº„ÉàË°®Á§∫
    showReport() {
        // ===== Ver.2.17: „É¨„Éù„Éº„ÉàÊ©üËÉΩÂº∑Âåñ =====
        
        // ÈñãÂßã„ÉªÁõÆÊ®ôÊôÇÂàª„Çí„É¨„Éù„Éº„Éà„Å´Ë°®Á§∫
        if (this.workStartTime) {
            document.getElementById('reportStartTime').textContent = this.workStartTime.toLocaleTimeString();
        }
        const targetTime = new Date();
        const [hours, minutes] = this.targetEndTime.split(':');
        targetTime.setHours(parseInt(hours), parseInt(minutes), 0, 0);
        document.getElementById('reportTargetTime').textContent = targetTime.toLocaleTimeString();
        
        // 1. ÂÆå‰∫ÜÊ∏à„Åø„Ç∏„Éß„Éñ„ÅÆÊäΩÂá∫
        const completedJobs = [];
        this.filmSessions.forEach(session => {
            session.jobs.forEach(job => {
                if (job.completed) {
                    completedJobs.push(job);
                }
            });
        });

        // 2. ÂÆå‰∫ÜÊ∏à„Åø„Çª„ÉÉ„Ç∑„Éß„É≥Êï∞„ÅÆË®àÁÆó
        const completedSessionIds = new Set();
        this.filmSessions.forEach(session => {
            const sessionStatus = this.getSessionStatus(session);
            if (sessionStatus.status === 'completed') {
                completedSessionIds.add(session.id);
            }
        });
        const completedSessionCount = completedSessionIds.size;

        // 3. „Çµ„Éû„É™„ÉºË®àÁÆó
        const totalCompletedJobs = completedJobs.length;
        const totalSheets = completedJobs.reduce((sum, job) => {
            const sheets = job.sheets || 0;
            return sum + (isNaN(sheets) ? 0 : sheets);
        }, 0);
        const totalUsedMeters = completedJobs.reduce((sum, job) => {
            const sheets = job.sheets || 0;
            const usage = job.usageLength || 0;
            const totalUsage = sheets * usage;
            return sum + (isNaN(totalUsage) ? 0 : totalUsage);
        }, 0);
        // „ÄêVer.2.17‰øÆÊ≠£„ÄëNaNÂïèÈ°åËß£Ê±∫ - productionTime „ÅÆÂÆâÂÖ®„Å™ÂêàË®à
        const totalProductionTime = completedJobs.reduce((sum, job) => {
            const prodTime = job.productionTime || job.processingTime || 0;
            return sum + (isNaN(prodTime) ? 0 : prodTime);
        }, 0);
        
        const reportContent = `
            <div class="report-summary">
                <h3>Êú¨Êó•„ÅÆ„Çµ„Éû„É™„Éº</h3>
                <div class="summary-grid">
                    <div class="summary-item">
                        <div class="summary-label">„Éï„Ç£„É´„É†„Çª„ÉÉ„Ç∑„Éß„É≥Êï∞</div>
                        <div class="summary-value" id="report-session-count">${completedSessionCount}</div>
                    </div>
                    <div class="summary-item">
                        <div class="summary-label">ÂêàË®à„Ç∏„Éß„ÉñÊï∞</div>
                        <div class="summary-value" id="report-total-jobs">${totalCompletedJobs}</div>
                    </div>
                    <div class="summary-item">
                        <div class="summary-label">ÂÆå‰∫Ü„Ç∏„Éß„ÉñÊï∞</div>
                        <div class="summary-value" id="report-completed-jobs">${totalCompletedJobs}</div>
                    </div>
                    <div class="summary-item">
                        <div class="summary-label">ÂêàË®àÁîüÁî£ÊûöÊï∞</div>
                        <div class="summary-value" id="report-total-sheets">${totalSheets}Êûö</div>
                    </div>
                    <div class="summary-item">
                        <div class="summary-label">ÂêàË®à‰ΩøÁî®„É°„Éº„Çø„Éº</div>
                        <div class="summary-value" id="report-total-meters">${totalUsedMeters.toFixed(2)}m</div>
                    </div>
                    <div class="summary-item">
                        <div class="summary-label">ÁîüÁî£ÊôÇÈñì</div>
                        <div class="summary-value" id="report-production-time">${totalProductionTime.toFixed(1)}ÂàÜ</div>
                    </div>
                    <div class="summary-item">
                        <div class="summary-label">ÊâãÂãïËøΩÂä†ÊôÇÈñì</div>
                        <div class="summary-value">${this.extraTime}ÂàÜ</div>
                    </div>
                    <div class="summary-item">
                        <div class="summary-label">ÁèæÂú®„Éï„Ç£„É´„É†ÊÆãÈáè</div>
                        <div class="summary-value">${this.currentFilmSession ? this.currentFilmSession.filmRemaining.toFixed(1) : '0.0'}m</div>
                    </div>
                </div>
            </div>
            
            <div class="report-history">
                <h3>„Éï„Ç£„É´„É†„Çª„ÉÉ„Ç∑„Éß„É≥Â±•Ê≠¥</h3>
                <div class="history-list">
                    ${this.filmSessions.map((session, index) => `
                        <div class="history-item" onclick="dashboard.toggleHistoryDetails('history-session-${session.id}')" style="cursor: pointer;">
                            <div class="history-header">
                                <span>„Éï„Ç£„É´„É† ${index + 1}</span>
                                <span>${session.status === 'completed' ? 'ÂÆå‰∫Ü' : 'ÈÄ≤Ë°å‰∏≠'}</span>
                                <span class="toggle-indicator" id="toggle-history-session-${session.id}">‚ñº</span>
                            </div>
                            <div class="history-details">
                                ${session.jobs.length}„Ç∏„Éß„Éñ / ${session.jobs.reduce((sum, job) => {
                                    const usage = job.usageLength || 0;
                                    return sum + (isNaN(usage) ? 0 : usage);
                                }, 0).toFixed(2)}m / ${session.jobs.reduce((sum, job) => {
                                    const procTime = job.processingTime || job.productionTime || 0;
                                    return sum + (isNaN(procTime) ? 0 : procTime);
                                }, 0).toFixed(1)}ÂàÜ
                            </div>
                            <div class="history-job-details" id="history-session-${session.id}" style="display: none; margin-top: 10px; padding-top: 10px; border-top: 1px solid #ddd;">
                                <h4 style="font-size: 13px; margin-bottom: 8px; color: var(--primary-color);">„Ç∏„Éß„ÉñË©≥Á¥∞</h4>
                                ${session.jobs.map((job, jobIndex) => `
                                    <div style="background: #f8f9fa; padding: 8px; margin: 4px 0; border-radius: 4px; font-size: 12px;">
                                        <div style="font-weight: bold; color: ${job.completed ? '#27AE60' : '#6C757D'};">
                                            ${job.completed ? '‚úì' : '‚óã'} ${job.name || `„Ç∏„Éß„Éñ${jobIndex + 1}`}
                                        </div>
                                        <div style="color: #6C757D; margin-top: 2px;">
                                            ${job.sheets || 0}Êûö / ${((job.sheets || 0) * (job.usageLength || 0)).toFixed(2)}m / 
                                            ${(job.processingTime || job.productionTime || 0).toFixed(1)}ÂàÜ
                                            ${job.completed && job.completedAt ? ` / ÂÆå‰∫Ü: ${new Date(job.completedAt).toLocaleTimeString('ja-JP', {hour: '2-digit', minute: '2-digit'})}` : ''}
                                        </div>
                                    </div>
                                `).join('')}
                            </div>
                        </div>
                    `).join('')}
                </div>
            </div>
        `;
        
        // „É¨„Éù„Éº„ÉàÂÜÖÂÆπ„Çí„É¢„Éº„ÉÄ„É´„Å´ÊåøÂÖ•ÔºàÊó¢Â≠ò„ÅÆÈñãÂßãÊôÇÂàª„ÉªÁõÆÊ®ôÊôÇÂàª„Éª„Éú„Çø„É≥„ÅØ‰øùÊåÅÔºâ
        const reportContentElement = document.getElementById('reportContent');
        if (reportContentElement) {
            // Êó¢Â≠ò„ÅÆÂãïÁöÑ„É¨„Éù„Éº„ÉàÈÉ®ÂàÜ„ÇíÂâäÈô§ÔºàID„ÅßË≠òÂà•Ôºâ
            const existingReport = reportContentElement.querySelector('.report-summary');
            if (existingReport) {
                existingReport.remove();
            }
            const existingHistory = reportContentElement.querySelector('.report-history');
            if (existingHistory) {
                existingHistory.remove();
            }
            
            // „Éú„Çø„É≥„ÅÆÁõ¥Ââç„Å´„É¨„Éù„Éº„ÉàÂÜÖÂÆπ„ÇíÊåøÂÖ•
            const buttonsDiv = reportContentElement.querySelector('div[style*="margin-top: 20px"]');
            if (buttonsDiv) {
                buttonsDiv.insertAdjacentHTML('beforebegin', reportContent);
            } else {
                // „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ: „Éú„Çø„É≥„ÅåË¶ã„Å§„Åã„Çâ„Å™„ÅÑÂ†¥Âêà„ÅØÊú´Â∞æ„Å´ËøΩÂä†
                reportContentElement.insertAdjacentHTML('beforeend', reportContent);
            }
        }
        
        document.getElementById('reportModal').classList.add('active');
    }

    // „É¨„Éù„Éº„ÉàÈùûË°®Á§∫
    hideReport() {
        document.getElementById('reportModal').classList.remove('active');
    }

    // „Çª„ÉÉ„Ç∑„Éß„É≥Ë©≥Á¥∞„ÅÆË°®Á§∫/ÈùûË°®Á§∫Âàá„ÇäÊõø„Åà
    toggleSessionDetails(sessionElementId) {
        const element = document.getElementById(sessionElementId);
        const toggleIndicator = document.getElementById(`toggle-${sessionElementId}`);
        
        if (element) {
            if (element.style.display === 'none') {
                element.style.display = 'block';
                if (toggleIndicator) toggleIndicator.textContent = '‚ñ≤';
            } else {
                element.style.display = 'none';
                if (toggleIndicator) toggleIndicator.textContent = '‚ñº';
            }
        }
    }

    // Â±•Ê≠¥Ë©≥Á¥∞„ÅÆË°®Á§∫/ÈùûË°®Á§∫Âàá„ÇäÊõø„ÅàÔºàÁã¨Á´ãÂåñÔºâ
    toggleHistoryDetails(historyElementId) {
        const element = document.getElementById(historyElementId);
        const toggleIndicator = document.getElementById(`toggle-${historyElementId}`);
        
        if (element) {
            if (element.style.display === 'none') {
                element.style.display = 'block';
                if (toggleIndicator) toggleIndicator.textContent = '‚ñ≤';
            } else {
                element.style.display = 'none';
                if (toggleIndicator) toggleIndicator.textContent = '‚ñº';
            }
        }
    }

    // ÁèæÂú®ÊôÇÂàªÊõ¥Êñ∞
    updateCurrentTime() {
        const now = new Date();
        const timeString = now.toLocaleTimeString('ja-JP', {
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit'
        });
        document.getElementById('currentTime').textContent = timeString;
    }

    // ÁµÇ‰∫ÜÊôÇÂàªÊõ¥Êñ∞
    updateFinishTime() {
        if (!this.workStarted) {
            document.getElementById('finalFinishTime').textContent = '--:--';
            document.getElementById('finishStatus').textContent = 'Ê•≠ÂãôÈñãÂßãÂâç';
            return;
        }

        const allJobs = this.filmSessions.flatMap(session => session.jobs);
        const totalProcessingTime = allJobs.reduce((total, job) => {
            const procTime = job.processingTime || job.productionTime || 0;
            return total + (isNaN(procTime) ? 0 : procTime);
        }, 0);
        const totalTime = totalProcessingTime + this.extraTime + this.timeSettings.cleanupTime;
        
        // ÈñãÂßãÊôÇÂàª„Åã„ÇâÁµÇ‰∫ÜÊôÇÂàª„ÇíË®àÁÆó
        const finishTime = new Date(this.workStartTime.getTime() + totalTime * 60000);
        
        const finishTimeString = finishTime.toLocaleTimeString('ja-JP', {
            hour: '2-digit',
            minute: '2-digit'
        });
        
        document.getElementById('finalFinishTime').textContent = finishTimeString;
        
        // „Çπ„ÉÜ„Éº„Çø„ÇπÊõ¥Êñ∞
        this.updateFinishStatus(finishTime);
    }

    // ÁµÇ‰∫Ü„Çπ„ÉÜ„Éº„Çø„ÇπÊõ¥Êñ∞
    updateFinishStatus(finishTime) {
        const statusElement = document.getElementById('finishStatus');
        const now = new Date();
        const targetTime = this.parseTime(this.targetEndTime);
        const warningTime = this.parseTime('16:45');
        
        if (finishTime > targetTime) {
            const overMinutes = Math.floor((finishTime - targetTime) / 60000);
            statusElement.textContent = `ÁõÆÊ®ôË∂ÖÈÅé +${overMinutes}ÂàÜ`;
            statusElement.className = 'time-status danger';
        } else if (finishTime > warningTime) {
            const remainingMinutes = Math.floor((targetTime - finishTime) / 60000);
            statusElement.textContent = `ÁõÆÊ®ô„Åæ„Åß${remainingMinutes}ÂàÜ`;
            statusElement.className = 'time-status warning';
        } else {
            statusElement.textContent = 'ÁõÆÊ®ôÊôÇÂàªÂÜÖ„ÅßÁµÇ‰∫Ü‰∫àÂÆö';
            statusElement.className = 'time-status success';
        }
    }

    // „Éï„Ç£„É´„É†ÊÆãÈáèË°®Á§∫Êõ¥Êñ∞
    updateFilmDisplay() {
        const filmRemaining = this.currentFilmSession ? this.currentFilmSession.filmRemaining : 0;
        const filmRemainingElement = document.getElementById('currentFilmRemaining');
        if (filmRemainingElement) {
            filmRemainingElement.textContent = filmRemaining.toFixed(1);
        }
        // „Éï„Ç£„É´„É†ÊÆãÈáèË°®Á§∫Ë¶ÅÁ¥†„Åå„Å™„ÅÑÂ†¥Âêà„ÅØ‰Ωï„ÇÇ„Åó„Å™„ÅÑÔºà„Ç®„É©„ÉºÂõûÈÅøÔºâ
    }

    // CSV „Ç®„ÇØ„Çπ„Éù„Éº„ÉàÊ©üËÉΩ (Á¥ØÁ©ç‰øùÂ≠òÂØæÂøúÁâà)
    async exportDataAsCsv() {
        const completedJobs = [];
        const today = new Date();
        const todayStr = today.toLocaleDateString('ja-JP');
        
        this.filmSessions.forEach(session => {
            session.jobs.forEach(job => {
                if (job.completed) {
                    const prodTime = job.productionTime || job.processingTime || 0;
                    const usageLength = job.usageLength || 0;
                    const sheets = job.sheets || 0;
                    const completedAt = job.completedAt || new Date().toLocaleString('ja-JP');
                    
                    completedJobs.push({
                        Êó•ÊôÇ: todayStr,
                        ÂÆå‰∫ÜÊôÇÂàª: completedAt,
                        „Ç∏„Éß„ÉñÂêç: job.name || '„Ç∏„Éß„Éñ',
                        ÁîüÁî£ÊûöÊï∞: sheets,
                        ‰ΩøÁî®„Éï„Ç£„É´„É†: `${(sheets * usageLength).toFixed(2)}m`,
                        Âä†Â∑•ÊôÇÈñì: `${(isNaN(prodTime) ? 0 : prodTime).toFixed(1)}ÂàÜ`,
                        „Éï„Ç£„É´„É†„Çª„ÉÉ„Ç∑„Éß„É≥: session.name || `„Çª„ÉÉ„Ç∑„Éß„É≥${session.id}`
                    });
                }
            });
        });

        if (completedJobs.length === 0) {
            alert('„Ç®„ÇØ„Çπ„Éù„Éº„Éà„Åô„ÇãÂÆå‰∫ÜÊ∏à„Åø„Ç∏„Éß„Éñ„Åå„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ');
            return;
        }

        // Á¥ØÁ©çCSV„Éï„Ç°„Ç§„É´ÂêçÔºàÂõ∫ÂÆöÔºâ
        const filename = 'laminator-work-history.csv';
        
        // Êó¢Â≠òCSV„ÇíË™≠„ÅøËæº„Çì„ÅßÊñ∞„Åó„ÅÑ„Éá„Éº„Çø„ÇíËøΩÂä†
        let existingCsvContent = '';
        let headers = Object.keys(completedJobs[0]);
        
        try {
            if (isCapacitorEnvironment && CapacitorFilesystem) {
                // APKÁí∞Â¢É„ÅßÊó¢Â≠ò„Éï„Ç°„Ç§„É´„ÇíË™≠„ÅøËæº„Åø
                try {
                    const existingFile = await CapacitorFilesystem.readFile({
                        path: `LamiOpe/${filename}`,
                        directory: CapacitorDirectory.Documents,
                        encoding: CapacitorEncoding.UTF8
                    });
                    existingCsvContent = existingFile.data;
                    console.log('‚úÖ Êó¢Â≠òCSVË™≠„ÅøËæº„ÅøÊàêÂäü');
                } catch (readError) {
                    console.log('üìù Êñ∞Ë¶èCSV„Éï„Ç°„Ç§„É´‰ΩúÊàêÔºàÊó¢Â≠ò„Éï„Ç°„Ç§„É´„Å™„ÅóÔºâ');
                    existingCsvContent = '';
                }
            }
        } catch (error) {
            console.warn('üìÑ Êó¢Â≠òCSVË™≠„ÅøËæº„Åø„Ç®„É©„Éº„ÄÅÊñ∞Ë¶è‰ΩúÊàê:', error);
        }

        // CSV„Ç≥„É≥„ÉÜ„É≥„ÉÑ‰ΩúÊàê
        let csvContent;
        if (existingCsvContent && existingCsvContent.trim()) {
            // Êó¢Â≠ò„Éá„Éº„Çø„Å´ËøΩÂä†
            const newDataRows = completedJobs.map(job => 
                headers.map(header => `"${job[header]}"`).join(',')
            ).join('\n');
            csvContent = existingCsvContent.trim() + '\n' + newDataRows;
        } else {
            // Êñ∞Ë¶è„Éï„Ç°„Ç§„É´‰ΩúÊàê
            csvContent = [
                '\uFEFF' + headers.join(','), // BOM„ÇíËøΩÂä†„Åó„Å¶Excel„ÅßÊ≠£„Åó„ÅèË°®Á§∫
                ...completedJobs.map(job => headers.map(header => `"${job[header]}"`).join(','))
            ].join('\n');
        }

        try {
            if (isCapacitorEnvironment && CapacitorFilesystem) {
                // APKÁí∞Â¢É: Capacitor Filesystem API‰ΩøÁî®
                console.log('üîÑ Capacitor Filesystem API„ÅßCSV„Ç®„ÇØ„Çπ„Éù„Éº„Éà...');
                
                // Android 11+ „Çπ„Ç≥„Éº„Éó„Éâ„Çπ„Éà„É¨„Éº„Ç∏ÂØæÂøú: Ê®©ÈôêÁ¢∫Ë™ç„Å®„Éï„Ç©„É´„ÉÄ‰ΩúÊàê
                await ensureFsReady();
                
                await CapacitorFilesystem.writeFile({
                    path: `LamiOpe/${filename}`,
                    data: csvContent,
                    directory: CapacitorDirectory.Documents,
                    encoding: CapacitorEncoding.UTF8
                });
                
                console.log('‚úÖ CSV „Ç®„ÇØ„Çπ„Éù„Éº„ÉàÂÆå‰∫Ü:', completedJobs.length + '‰ª∂');
                const isNewFile = !existingCsvContent || !existingCsvContent.trim();
                const actionText = isNewFile ? '‰ΩúÊàê' : 'ËøΩË®ò';
                this.showToast(`Ê•≠ÂãôÂ±•Ê≠¥CSV„Å´${actionText}„Åó„Åæ„Åó„Åü (‰ªäÂõû${completedJobs.length}‰ª∂) - ${filename}`, 'success');
            } else {
                // WebÁí∞Â¢É: Blob download fallback
                console.log('üîÑ Web„Éñ„É©„Ç¶„Ç∂Áí∞Â¢É„ÅßCSV„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ...');
                this.fallbackCsvDownload(csvContent, filename, completedJobs.length);
            }
        } catch (error) {
            console.warn('‚ùå Filesystem‰øùÂ≠òÂ§±Êïó„ÄÅfallback„Çí‰ΩøÁî®:', error);
            this.showToast(`CSV APK„Ç®„É©„Éº: ${error.message || error}`, 'error');
            this.fallbackCsvDownload(csvContent, filename, completedJobs.length);
        }
    }

    // Fallback: CSV Blob „ÉÄ„Ç¶„É≥„É≠„Éº„Éâ
    fallbackCsvDownload(csvContent, filename, jobCount) {
        const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
        const link = document.createElement('a');
        link.href = URL.createObjectURL(blob);
        link.download = filename;
        link.style.display = 'none';
        document.body.appendChild(link);
        
        setTimeout(() => {
            link.click();
            setTimeout(() => {
                document.body.removeChild(link);
                URL.revokeObjectURL(link.href);
            }, 100);
        }, 100);
        
        console.log('CSV „Ç®„ÇØ„Çπ„Éù„Éº„ÉàÂÆå‰∫Ü:', jobCount + '‰ª∂');
        alert(`CSV „Ç®„ÇØ„Çπ„Éù„Éº„ÉàÂÆå‰∫Ü: ${jobCount}‰ª∂„ÅÆ„Ç∏„Éß„Éñ„Çí‰øùÂ≠ò„Åó„Åæ„Åó„Åü`);
    }

    // Êú¨Êó•„ÅÆ„Ç∏„Éß„Éñ„ÇíÊ∂àÂéª
    clearTodaysJobs() {
        if (confirm('Êú¨Êó•„ÅÆÂÖ®„Ç∏„Éß„Éñ„ÇíÊ∂àÂéª„Åó„Åæ„Åô„ÅãÔºü„Åì„ÅÆÊìç‰Ωú„ÅØÂÖÉ„Å´Êàª„Åõ„Åæ„Åõ„Çì„ÄÇ')) {
            this.filmSessions = [];
            this.currentFilmSession = null;
            this.saveData();
            this.renderJobList();
            this.updateFinishTime();
            console.log('Êú¨Êó•„ÅÆ„Ç∏„Éß„Éñ„ÇíÊ∂àÂéª„Åó„Åæ„Åó„Åü„ÄÇ');
            alert('Êú¨Êó•„ÅÆ„Ç∏„Éß„Éñ„ÇíÊ∂àÂéª„Åó„Åæ„Åó„Åü„ÄÇ');
        }
    }

    // ÂÖ•Âäõ„Éï„Ç£„Éº„É´„Éâ„ÇØ„É™„Ç¢
    clearInputs() {
        document.getElementById('directSheets').value = '';
        document.getElementById('partsCopies').value = '';
        document.getElementById('partsPages').value = '';
        document.getElementById('partsExtra').value = '0';
        document.getElementById('paperLength').value = '';
        document.getElementById('overlapWidth').value = '';
        document.getElementById('processSpeed').value = '';
    }

    // Ver.8.10 Directory.Data + Share APIÊñπÂºèÔºàOS-PLUG-FILE-0013ÂØæÁ≠ñÔºâ
    async saveToAppDataAndShare(content, filename, contentType = 'text/plain') {
        try {
            // 1. „Åæ„Åö„ÅØÁßÅÊúâÈ†òÂüüÔºàDirectory.DataÔºâ„Å´‰øùÂ≠ò
            if (isCapacitorEnvironment && CapacitorFilesystem) {
                const BACKUP_DIR = 'LamiOpe';
                
                // „Éï„Ç©„É´„ÉÄ‰ΩúÊàêÔºàÊ®©Èôê‰∏çË¶ÅÔºâ
                try {
                    await CapacitorFilesystem.mkdir({
                        path: BACKUP_DIR,
                        directory: CapacitorDirectory.Data,
                        recursive: true
                    });
                } catch (e) {
                    console.log('üìÅ Directory already exists or created');
                }
                
                // ÁßÅÊúâÈ†òÂüü„Å´‰øùÂ≠òÔºàÁ¢∫ÂÆü„Å´ÊàêÂäüÔºâ
                await CapacitorFilesystem.writeFile({
                    path: `${BACKUP_DIR}/${filename}`,
                    data: content,
                    directory: CapacitorDirectory.Data,
                    encoding: CapacitorEncoding.UTF8
                });
                
                console.log(`‚úÖ ${filename} saved to app private storage`);
                
                // 2. Share API„Åß„É¶„Éº„Ç∂„Éº„Å´‰øùÂ≠òÂÖàÈÅ∏Êäû„Åï„Åõ„Çã
                if (CapacitorShare) {
                    const { uri } = await CapacitorFilesystem.getUri({
                        path: `${BACKUP_DIR}/${filename}`,
                        directory: CapacitorDirectory.Data
                    });
                    
                    await CapacitorShare.share({
                        title: `${filename} „Çí„Ç®„ÇØ„Çπ„Éù„Éº„Éà`,
                        text: `„É©„Éü„Éç„Éº„Çø„Éº‰ΩúÊ•≠Ë®òÈå≤: ${filename}`,
                        url: uri
                    });
                    
                    this.showToast(`${filename} „ÇíÂÖ±Êúâ„Åó„Åæ„Åó„ÅüÔºà‰øùÂ≠òÂÖà„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºâ`, 'success');
                } else {
                    this.showToast(`${filename} „Çí„Ç¢„Éó„É™ÂÜÖ„Å´‰øùÂ≠ò„Åó„Åæ„Åó„Åü`, 'success');
                }
                
                return true;
            }
        } catch (error) {
            console.warn('‚ùå Directory.Data‰øùÂ≠òÂ§±Êïó:', error);
        }
        
        // 3. „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ: Blob download
        this.fallbackBlobDownload(content, filename);
        return false;
    }
    
    // „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ: Blob „ÉÄ„Ç¶„É≥„É≠„Éº„ÉâÔºàWebÁí∞Â¢É„Éª„Ç®„É©„ÉºÊôÇÔºâ
    fallbackBlobDownload(content, filename) {
        const blob = new Blob([content], { type: 'text/plain;charset=utf-8;' });
        const link = document.createElement('a');
        link.href = URL.createObjectURL(blob);
        link.download = filename;
        link.style.display = 'none';
        document.body.appendChild(link);
        
        setTimeout(() => {
            link.click();
            setTimeout(() => {
                document.body.removeChild(link);
                URL.revokeObjectURL(link.href);
            }, 100);
        }, 100);
        
        console.log(`üì• Fallback download: ${filename}`);
        this.showToast(`${filename} „Çí„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„Åó„Åæ„Åó„Åü`, 'success');
    }
    
    // Ver.8.10 „Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„ÉóÊ©üËÉΩÔºàOS-PLUG-FILE-0013ÂØæÁ≠ñÁâàÔºâ
    async backupData() {
        try {
            console.log('üîÑ „Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„ÉóÈñãÂßãÔºàDirectory.DataÊñπÂºèÔºâ...');
            
            const backupData = {
                timestamp: new Date().toISOString(),
                version: '8.10',
                filmSessions: this.filmSessions || [],
                settings: this.settings || {},
                workStarted: this.workStarted || false,
                workStartTime: this.workStartTime || null
            };
            
            const jsonContent = JSON.stringify(backupData, null, 2);
            const timestamp = new Date().toISOString().slice(0, 19).replace(/[:]/g, '-');
            const filename = `laminator-backup-${timestamp}.json`;
            
            const success = await this.saveToAppDataAndShare(jsonContent, filename, 'application/json');
            
            if (success) {
                console.log('‚úÖ „Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„ÉóÂÆå‰∫ÜÔºàDirectory.Data + ShareÔºâ');
            } else {
                console.log('‚úÖ „Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„ÉóÂÆå‰∫ÜÔºàFallback downloadÔºâ');
            }
            
        } catch (error) {
            console.error('‚ùå „Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó„Ç®„É©„Éº:', error);
            this.showToast(`„Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó„Ç®„É©„Éº: ${error.message}`, 'error');
        }
    }
    
    // Ver.8.10 CSV‰øùÂ≠òÊ©üËÉΩÔºàÁ¥ØÁ©ç‰øùÂ≠ò + OS-PLUG-FILE-0013ÂØæÁ≠ñÁâàÔºâ
    async exportDataAsCsvV2() {
        try {
            const completedJobs = [];
            const today = new Date();
            const todayStr = today.toLocaleDateString('ja-JP');
            
            this.filmSessions.forEach(session => {
                session.jobs.forEach(job => {
                    if (job.completed) {
                        const prodTime = job.productionTime || job.processingTime || 0;
                        const usageLength = job.usageLength || 0;
                        const sheets = job.sheets || 0;
                        const completedAt = job.completedAt || new Date().toLocaleString('ja-JP');
                        
                        completedJobs.push({
                            Êó•ÊôÇ: todayStr,
                            ÂÆå‰∫ÜÊôÇÂàª: completedAt,
                            „Ç∏„Éß„ÉñÂêç: job.name || '„Ç∏„Éß„Éñ',
                            ÁîüÁî£ÊûöÊï∞: sheets,
                            ‰ΩøÁî®„Éï„Ç£„É´„É†: `${(sheets * usageLength).toFixed(2)}m`,
                            Âä†Â∑•ÊôÇÈñì: `${(isNaN(prodTime) ? 0 : prodTime).toFixed(1)}ÂàÜ`,
                            „Éï„Ç£„É´„É†„Çª„ÉÉ„Ç∑„Éß„É≥: session.name || `„Çª„ÉÉ„Ç∑„Éß„É≥${session.id}`
                        });
                    }
                });
            });

            if (completedJobs.length === 0) {
                this.showToast('„Ç®„ÇØ„Çπ„Éù„Éº„Éà„Åô„ÇãÂÆå‰∫ÜÊ∏à„Åø„Ç∏„Éß„Éñ„Åå„ÅÇ„Çä„Åæ„Åõ„Çì', 'error');
                return;
            }

            // Á¥ØÁ©çCSV„Éï„Ç°„Ç§„É´ÂêçÔºàÂõ∫ÂÆöÔºâ
            const filename = 'laminator-work-history.csv';
            
            // Êó¢Â≠òÁ¥ØÁ©ç„Éï„Ç°„Ç§„É´„ÇíË™≠„ÅøËæº„Åø
            let existingCsvContent = '';
            let headers = Object.keys(completedJobs[0]);
            
            try {
                if (isCapacitorEnvironment && CapacitorFilesystem) {
                    const { uri } = await CapacitorFilesystem.getUri({
                        path: `LamiOpe/${filename}`,
                        directory: CapacitorDirectory.Data
                    });
                    
                    const existingFile = await CapacitorFilesystem.readFile({
                        path: `LamiOpe/${filename}`,
                        directory: CapacitorDirectory.Data,
                        encoding: CapacitorEncoding.UTF8
                    });
                    existingCsvContent = existingFile.data;
                    console.log('‚úÖ Êó¢Â≠òÁ¥ØÁ©çCSVË™≠„ÅøËæº„ÅøÊàêÂäü');
                }
            } catch (readError) {
                console.log('üìù Êñ∞Ë¶èÁ¥ØÁ©çCSV„Éï„Ç°„Ç§„É´‰ΩúÊàêÔºàÊó¢Â≠ò„Éï„Ç°„Ç§„É´„Å™„ÅóÔºâ');
                existingCsvContent = '';
            }
            
            // CSV„Ç≥„É≥„ÉÜ„É≥„ÉÑ‰ΩúÊàêÔºàÁ¥ØÁ©çÊñπÂºèÔºâ
            let csvContent;
            if (existingCsvContent && existingCsvContent.trim()) {
                // Êó¢Â≠ò„Éá„Éº„Çø„Å´‰ªäÊó•„ÅÆ„Éá„Éº„Çø„ÇíËøΩÂä†
                const newDataRows = completedJobs.map(job => 
                    headers.map(header => `"${job[header]}"`).join(',')
                ).join('\n');
                csvContent = existingCsvContent.trim() + '\n' + newDataRows;
            } else {
                // Êñ∞Ë¶è„Éï„Ç°„Ç§„É´‰ΩúÊàê
                csvContent = [
                    '\uFEFF' + headers.join(','), // BOM‰ªò„Åç„Éò„ÉÉ„ÉÄ„Éº
                    ...completedJobs.map(job => 
                        headers.map(header => `"${job[header]}"`).join(',')
                    )
                ].join('\n');
            }
            
            const success = await this.saveToAppDataAndShare(csvContent, filename, 'text/csv');
            
            const isNewFile = !existingCsvContent || !existingCsvContent.trim();
            const actionText = isNewFile ? '‰ΩúÊàê' : 'ËøΩË®ò';
            console.log(`üìä Á¥ØÁ©çCSV ${actionText}ÂÆå‰∫Ü: ‰ªäÂõû${completedJobs.length}‰ª∂`);
            this.showToast(`Ê•≠ÂãôÂ±•Ê≠¥„Å´${actionText}„Åó„Åæ„Åó„ÅüÔºà‰ªäÂõû${completedJobs.length}‰ª∂Ôºâ`, 'success');
            
        } catch (error) {
            console.error('‚ùå CSV export error:', error);
            this.showToast(`CSV„Ç®„ÇØ„Çπ„Éù„Éº„Éà„Ç®„É©„Éº: ${error.message}`, 'error');
        }
    }
    
    // Â±•Ê≠¥Ë°®Á§∫Ê©üËÉΩÔºöÈÅéÂéª„ÅÆÁîüÁî£„Éá„Éº„Çø‰∏ÄË¶ß
    async showWorkHistory() {
        try {
            console.log('üìä Â±•Ê≠¥Ë°®Á§∫ÈñãÂßã...');
            
            if (!isCapacitorEnvironment || !CapacitorFilesystem) {
                this.showToast('Â±•Ê≠¥Ë°®Á§∫„ÅØAPKÁí∞Â¢É„Åß„ÅÆ„ÅøÂà©Áî®ÂèØËÉΩ„Åß„Åô', 'error');
                return;
            }
            
            // Á¥ØÁ©çCSV„Éï„Ç°„Ç§„É´Ë™≠„ÅøËæº„Åø
            const filename = 'laminator-work-history.csv';
            let csvContent = '';
            
            try {
                const existingFile = await CapacitorFilesystem.readFile({
                    path: `LamiOpe/${filename}`,
                    directory: CapacitorDirectory.Data,
                    encoding: CapacitorEncoding.UTF8
                });
                csvContent = existingFile.data;
            } catch (readError) {
                this.showToast('Â±•Ê≠¥„Éï„Ç°„Ç§„É´„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„ÄÇ„Åæ„ÅöÊ•≠ÂãôË®òÈå≤„ÇíCSV‰øùÂ≠ò„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ', 'error');
                return;
            }
            
            // CSVËß£Êûê
            const lines = csvContent.split('\n').filter(line => line.trim());
            if (lines.length <= 1) {
                this.showToast('Â±•Ê≠¥„Éá„Éº„Çø„Åå„ÅÇ„Çä„Åæ„Åõ„Çì', 'error');
                return;
            }
            
            // „Éò„ÉÉ„ÉÄ„ÉºÈô§Âéª„Åó„Å¶ÊúÄÊñ∞20‰ª∂„ÇíË°®Á§∫
            const dataLines = lines.slice(1).slice(-20).reverse(); // ÊúÄÊñ∞20‰ª∂„ÄÅÊñ∞„Åó„ÅÑÈ†Ü
            
            let historyHtml = `
                <div class="work-history-container">
                    <h4>üìä ÊúÄËøë„ÅÆÊ•≠ÂãôÂ±•Ê≠¥ÔºàÊúÄÊñ∞20‰ª∂Ôºâ</h4>
                    <div class="history-stats">
                        <span>Á∑èÂ±•Ê≠¥‰ª∂Êï∞: ${lines.length - 1}‰ª∂</span>
                    </div>
                    <div class="history-list">
            `;
            
            dataLines.forEach((line, index) => {
                const cols = line.split(',').map(col => col.replace(/"/g, ''));
                if (cols.length >= 6) {
                    const [date, time, jobName, sheets, film, duration] = cols;
                    historyHtml += `
                        <div class="history-item">
                            <div class="history-date">${date} ${time}</div>
                            <div class="history-job">${jobName} - ${sheets}Êûö</div>
                            <div class="history-details">${film} / ${duration}</div>
                        </div>
                    `;
                }
            });
            
            historyHtml += `
                    </div>
                    <div class="history-actions">
                        <button class="btn btn-primary" onclick="dashboard.exportDataAsCsvV2()">üì• „Éï„É´CSV„Ç®„ÇØ„Çπ„Éù„Éº„Éà</button>
                        <button class="btn btn-secondary" onclick="dashboard.hideWorkHistory()">Èñâ„Åò„Çã</button>
                    </div>
                </div>
            `;
            
            // „É¢„Éº„ÉÄ„É´Ë°®Á§∫
            this.showModal('workHistoryModal', 'üìä Ê•≠ÂãôÂ±•Ê≠¥', historyHtml);
            
        } catch (error) {
            console.error('‚ùå Â±•Ê≠¥Ë°®Á§∫„Ç®„É©„Éº:', error);
            this.showToast(`Â±•Ê≠¥Ë°®Á§∫„Ç®„É©„Éº: ${error.message}`, 'error');
        }
    }
    
    hideWorkHistory() {
        this.hideModal('workHistoryModal');
    }
    
    // Ê±éÁî®„É¢„Éº„ÉÄ„É´Ë°®Á§∫Ê©üËÉΩ
    showModal(modalId, title, content) {
        // Êó¢Â≠ò„É¢„Éº„ÉÄ„É´„Çí‰ΩøÁî®„Åæ„Åü„ÅØÂãïÁöÑ‰ΩúÊàê
        let modal = document.getElementById(modalId);
        if (!modal) {
            modal = document.createElement('div');
            modal.id = modalId;
            modal.className = 'modal';
            modal.innerHTML = `
                <div class="modal-content">
                    <div class="modal-header">
                        <h3 id="${modalId}-title">${title}</h3>
                        <button class="modal-close" onclick="dashboard.hideModal('${modalId}')">&times;</button>
                    </div>
                    <div class="modal-body" id="${modalId}-body">
                        ${content}
                    </div>
                </div>
            `;
            document.body.appendChild(modal);
        } else {
            document.getElementById(`${modalId}-title`).innerHTML = title;
            document.getElementById(`${modalId}-body`).innerHTML = content;
        }
        
        modal.style.display = 'block';
        modal.onclick = (e) => {
            if (e.target === modal) this.hideModal(modalId);
        };
    }
    
    hideModal(modalId) {
        const modal = document.getElementById(modalId);
        if (modal) {
            modal.style.display = 'none';
        }
    }
        document.getElementById('initialFilmRemaining').value = '';
    }

    // ÊôÇÂàª„Éë„Éº„Çπ
    parseTime(timeString) {
        const [hours, minutes] = timeString.split(':').map(Number);
        const date = new Date();
        date.setHours(hours, minutes, 0, 0);
        return date;
    }

    // ÊôÇÂàª„Éï„Ç©„Éº„Éû„ÉÉ„Éà
    formatTime(date) {
        return date.toLocaleTimeString('ja-JP', {
            hour: '2-digit',
            minute: '2-digit'
        });
    }

    // „Éá„Éº„Çø‰øùÂ≠ò (Capacitor StorageÂØæÂøúÁâà)
    async saveData() {
        const data = {
            date: new Date().toDateString(),
            filmSessions: this.filmSessions,
            currentFilmSessionId: this.currentFilmSession ? this.currentFilmSession.id : null,
            extraTime: this.extraTime,
            workStarted: this.workStarted,
            workStartTime: this.workStartTime,
            targetEndTime: this.targetEndTime,
            timeSettings: this.timeSettings
        };
        
        const dataString = JSON.stringify(data);
        const dataKey = 'laminator_dashboard_v3';
        
        console.log('üîÑ „Éá„Éº„Çø‰øùÂ≠òÈñãÂßã...Ë§áÊï∞ÊñπÂºè„ÅßË©¶Ë°å');
        
        try {
            // === ÊñπÂºè1: Capacitor Preferences API ===
            if (isCapacitorEnvironment && CapacitorPreferences) {
                console.log('üîÑ ÊñπÂºè1: Capacitor Preferences API„Åß„Éá„Éº„Çø‰øùÂ≠ò...');
                
                await CapacitorPreferences.set({
                    key: dataKey,
                    value: dataString
                });
                
                // ‰øùÂ≠òÁ¢∫Ë™ç„ÅÆ„Åü„ÇÅ„ÅÆË™≠„ÅøÊàª„Åó„ÉÜ„Çπ„Éà
                const verification = await CapacitorPreferences.get({ key: dataKey });
                if (verification.value === dataString) {
                    console.log('‚úÖ ÊñπÂºè1ÊàêÂäü: Capacitor Preferences„Å´Ê≠£Â∏∏‰øùÂ≠òÂÆå‰∫Ü');
                    console.log(`üìä ‰øùÂ≠ò„Éá„Éº„Çø„Çµ„Ç§„Ç∫: ${Math.round(dataString.length / 1024 * 100) / 100}KB`);
                    return; // ÊàêÂäüÊôÇ„ÅØÁµÇ‰∫Ü
                } else {
                    throw new Error('Capacitor Preferences‰øùÂ≠ò„Éá„Éº„Çø„ÅÆÊ§úË®º„Å´Â§±Êïó');
                }
            }
            
            // === ÊñπÂºè2: IndexedDB „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ ===
            if (indexedDBSupported) {
                console.log('üîÑ ÊñπÂºè2: IndexedDB„Åß„Éá„Éº„Çø‰øùÂ≠ò...');
                
                await saveToIndexedDB(dataKey, dataString);
                
                // IndexedDB‰øùÂ≠òÁ¢∫Ë™ç
                const indexedDBVerification = await loadFromIndexedDB(dataKey);
                if (indexedDBVerification === dataString) {
                    console.log('‚úÖ ÊñπÂºè2ÊàêÂäü: IndexedDB„Å´Ê≠£Â∏∏‰øùÂ≠òÂÆå‰∫Ü');
                    console.log(`üìä ‰øùÂ≠ò„Éá„Éº„Çø„Çµ„Ç§„Ç∫: ${Math.round(dataString.length / 1024 * 100) / 100}KB`);
                    return; // ÊàêÂäüÊôÇ„ÅØÁµÇ‰∫Ü
                } else {
                    throw new Error('IndexedDB‰øùÂ≠ò„Éá„Éº„Çø„ÅÆÊ§úË®º„Å´Â§±Êïó');
                }
            }
            
            // === ÊñπÂºè3: localStorageÁ∑äÊÄ•„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ ===
            console.log('üîÑ ÊñπÂºè3: localStorageÁ∑äÊÄ•„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ...');
            localStorage.setItem(dataKey, dataString);
            
            // localStorage‰øùÂ≠òÁ¢∫Ë™ç
            const localStorageVerification = localStorage.getItem(dataKey);
            if (localStorageVerification === dataString) {
                console.log('‚úÖ ÊñπÂºè3ÊàêÂäü: localStorage„Å´Ê≠£Â∏∏‰øùÂ≠òÂÆå‰∫Ü');
                console.log(`üìä ‰øùÂ≠ò„Éá„Éº„Çø„Çµ„Ç§„Ç∫: ${Math.round(dataString.length / 1024 * 100) / 100}KB`);
                return; // ÊàêÂäüÊôÇ„ÅØÁµÇ‰∫Ü
            } else {
                throw new Error('localStorage‰øùÂ≠ò„Éá„Éº„Çø„ÅÆÊ§úË®º„Å´Â§±Êïó');
            }
            
        } catch (error) {
            console.error('‚ùå ÂÖ®„Å¶„ÅÆ‰øùÂ≠òÊñπÂºè„ÅåÂ§±Êïó:', error);
            this.showToast('„Éá„Éº„Çø„ÅÆ‰øùÂ≠ò„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ„Ç¢„Éó„É™„ÇíÂÜçËµ∑Âãï„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ', 'error');
            
            // „Éá„Éê„ÉÉ„Ç∞ÊÉÖÂ†±„ÅÆÂá∫Âäõ
            console.error('üîç „Éá„Éê„ÉÉ„Ç∞ÊÉÖÂ†±:');
            console.error('- CapacitorÁí∞Â¢É:', isCapacitorEnvironment);
            console.error('- CapacitorPreferencesÂà©Áî®ÂèØËÉΩ:', !!CapacitorPreferences);
            console.error('- IndexedDB„Çµ„Éù„Éº„Éà:', indexedDBSupported);
            console.error('- localStorageÂà©Áî®ÂèØËÉΩ:', !!window.localStorage);
            console.error('- ‰øùÂ≠ò„Éá„Éº„Çø„Çµ„Ç§„Ç∫:', dataString.length, '„Éê„Ç§„Éà');
        }
    }

    // „Éá„Éº„ÇøË™≠„ÅøËæº„Åø (Capacitor PreferencesÂØæÂøúÁâà)
    async loadData() {
        try {
            let rawData = null;
            const dataKey = 'laminator_dashboard_v3';
            
            if (isCapacitorEnvironment && CapacitorPreferences) {
                // APKÁí∞Â¢É: Capacitor Preferences API‰ΩøÁî®
                console.log('üîÑ Capacitor Preferences API„Åã„Çâ„Éá„Éº„ÇøË™≠„ÅøËæº„Åø...');
                
                const result = await CapacitorPreferences.get({ key: dataKey });
                rawData = result.value;
                
                if (rawData) {
                    console.log('‚úÖ Capacitor Preferences„Åã„Çâ„Éá„Éº„ÇøË™≠„ÅøËæº„ÅøÊàêÂäü');
                    console.log(`üìä Ë™≠„ÅøËæº„Åø„Éá„Éº„Çø„Çµ„Ç§„Ç∫: ${Math.round(rawData.length / 1024 * 100) / 100}KB`);
                } else {
                    console.log('‚ÑπÔ∏è Capacitor Preferences: ‰øùÂ≠ò„Éá„Éº„Çø„Å™„ÅóÔºàÂàùÂõûËµ∑ÂãïÔºâ');
                }
            } else {
                // WebÁí∞Â¢É: localStorage fallback
                console.log('üîÑ localStorage fallback„Åã„Çâ„Éá„Éº„ÇøË™≠„ÅøËæº„Åø...');
                rawData = localStorage.getItem(dataKey);
                
                if (rawData) {
                    console.log('‚úÖ localStorage„Åã„Çâ„Éá„Éº„ÇøË™≠„ÅøËæº„ÅøÊàêÂäü');
                } else {
                    console.log('‚ÑπÔ∏è localStorage: ‰øùÂ≠ò„Éá„Éº„Çø„Å™„ÅóÔºàÂàùÂõûËµ∑ÂãïÔºâ');
                }
            }
            
            const data = rawData ? JSON.parse(rawData) : {};
            const today = new Date().toDateString();
            
            if (data.date === today && data.filmSessions) {
                // Êó¢Â≠ò„Éá„Éº„Çø„ÅÆÂæ©ÂÖÉÔºànull„ÇíÈô§ÂéªÔºâ
                this.filmSessions = Array.isArray(data.filmSessions) ? 
                    data.filmSessions.filter(session => session !== null && session !== undefined) : [];
                
                // Êó•‰ªòÊñáÂ≠óÂàó„ÇíDate„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„Å´Â§âÊèõ
                if (data.workStartTime) {
                    data.workStartTime = new Date(data.workStartTime);
                }
                
                // „Éï„Ç£„É´„É†„Çª„ÉÉ„Ç∑„Éß„É≥„ÅÆÊó•‰ªòÂ§âÊèõ
                this.filmSessions.forEach(session => {
                    if (session.startTime) {
                        session.startTime = new Date(session.startTime);
                    }
                    if (session.endTime) {
                        session.endTime = new Date(session.endTime);
                    }
                    
                    // „Çª„ÉÉ„Ç∑„Éß„É≥ÂÜÖ„ÅÆ„Ç∏„Éß„Éñ„ÅÆÊó•‰ªòÂ§âÊèõ
                    if (session.jobs && Array.isArray(session.jobs)) {
                        session.jobs.forEach(job => {
                            if (job.timestamp) {
                                job.timestamp = new Date(job.timestamp);
                            }
                            if (job.completedAt) {
                                job.completedAt = new Date(job.completedAt);
                            }
                            if (job.actualCompletionTime) {
                                job.actualCompletionTime = new Date(job.actualCompletionTime);
                            }
                        });
                    }
                });
                
                this.extraTime = Number(data.extraTime) || 0;
                this.workStarted = Boolean(data.workStarted);
                this.workStartTime = data.workStartTime ? data.workStartTime : null;
                this.targetEndTime = data.targetEndTime || "17:00";
                
                // Ë®≠ÂÆö„ÇÇÂæ©ÂÖÉ
                if (data.timeSettings && typeof data.timeSettings === 'object') {
                    this.timeSettings = { ...this.timeSettings, ...data.timeSettings };
                }
                
                // ÁèæÂú®„ÅÆ„Éï„Ç£„É´„É†„Çª„ÉÉ„Ç∑„Éß„É≥„ÇíÂæ©ÂÖÉ
                if (data.currentFilmSessionId && this.filmSessions.length > 0) {
                    this.currentFilmSession = this.filmSessions.find(s => s.id === data.currentFilmSessionId) || null;
                }
                
                console.log('„Éá„Éº„Çø„ÇíÊ≠£Â∏∏„Å´Âæ©ÂÖÉ„Åó„Åæ„Åó„Åü:', this.filmSessions.length + 'ÂÄã„ÅÆ„Çª„ÉÉ„Ç∑„Éß„É≥');
            } else {
                // Êó•‰ªò„ÅåÂ§â„Çè„Å£„ÅüÂ†¥Âêà„Åæ„Åü„ÅØÂàùÂõûËµ∑ÂãïÊôÇ„ÅØ„É™„Çª„ÉÉ„Éà
                this.initDefaultData();
                
                // Ë®≠ÂÆö„ÅÆ„ÅøÂºï„ÅçÁ∂ô„Åé
                if (data.timeSettings && typeof data.timeSettings === 'object') {
                    this.timeSettings = { ...this.timeSettings, ...data.timeSettings };
                }
                
                if (data.date) {
                    this.showToast('Êñ∞„Åó„ÅÑÊó•„ÅÆ‰ΩúÊ•≠„ÇíÈñãÂßã„Åó„Åæ„Åô', 'info');
                } else {
                    console.log('ÂàùÂõûËµ∑Âãï - „Éá„Éï„Ç©„É´„Éà„Éá„Éº„Çø„ÅßÈñãÂßã');
                }
            }
            
            // ÂàùÊúüË°®Á§∫Êõ¥Êñ∞
            this.updateFilmDisplay();
            
        } catch (error) {
            console.error('„Éá„Éº„ÇøË™≠„ÅøËæº„Åø„Ç®„É©„ÉºË©≥Á¥∞:', error);
            console.error('„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„ÅülocalStorage„Éá„Éº„Çø:', localStorage.getItem('laminator_dashboard_v3'));
            this.showToast('„Éá„Éº„Çø„ÅÆË™≠„ÅøËæº„Åø„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇÂàùÊúüÁä∂ÊÖã„ÅßÈñãÂßã„Åó„Åæ„Åô„ÄÇ', 'error');
            this.initDefaultData();
        }
    }

    // „Éá„Éï„Ç©„É´„Éà„Éá„Éº„ÇøÂàùÊúüÂåñ
    initDefaultData() {
        this.filmSessions = [];
        this.currentFilmSession = null;
        this.extraTime = 0;
        this.workStarted = false;
        this.workStartTime = null;
    }

    // „Éà„Éº„Çπ„ÉàÈÄöÁü•
    showToast(message, type = 'info') {
        // Êó¢Â≠ò„ÅÆ„Éà„Éº„Çπ„Éà„ÇíÂâäÈô§
        const existingToast = document.querySelector('.toast-notification');
        if (existingToast) {
            existingToast.remove();
        }

        // „Éà„Éº„Çπ„ÉàË¶ÅÁ¥†„Çí‰ΩúÊàê
        const toast = document.createElement('div');
        toast.className = `toast-notification toast-${type}`;
        toast.textContent = message;
        
        // „Çπ„Çø„Ç§„É´„ÇíË®≠ÂÆö
        Object.assign(toast.style, {
            position: 'fixed',
            bottom: '20px',
            left: '50%',
            transform: 'translateX(-50%) translateY(100px)',
            background: this.getToastColor(type),
            color: 'white',
            padding: '12px 20px',
            borderRadius: '8px',
            fontSize: '14px',
            fontWeight: 'bold',
            boxShadow: '0 4px 12px rgba(0,0,0,0.3)',
            zIndex: '10000',
            opacity: '0',
            transition: 'all 0.3s ease'
        });

        document.body.appendChild(toast);

        // „Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥„Åß„Éà„Éº„Çπ„Éà„ÇíË°®Á§∫
        setTimeout(() => {
            toast.style.opacity = '1';
            toast.style.transform = 'translateX(-50%) translateY(0)';
        }, 50);

        // 3ÁßíÂæå„Å´„Éï„Çß„Éº„Éâ„Ç¢„Ç¶„Éà„Åó„Å¶ÂâäÈô§
        setTimeout(() => {
            toast.style.opacity = '0';
            toast.style.transform = 'translateX(-50%) translateY(100px)';
            setTimeout(() => {
                if (toast.parentNode) {
                    toast.parentNode.removeChild(toast);
                }
            }, 300);
        }, 3000);
    }

    getToastColor(type) {
        const colors = {
            success: '#27AE60',
            error: '#E74C3C',
            warning: '#F39C12',
            info: '#3498DB'
        };
        return colors[type] || colors.info;
    }

    // Ë®≠ÂÆö„É¢„Éº„ÉÄ„É´Ë°®Á§∫
    showSettings() {
        const modal = document.getElementById('settingsModal');
        if (modal) {
            // ÁèæÂú®„ÅÆË®≠ÂÆöÂÄ§„ÇíË®≠ÂÆö„Éï„Ç©„Éº„É†„Å´ÂèçÊò†
            document.getElementById('settingWorkStart').value = this.timeSettings.workStart;
            document.getElementById('settingWorkEnd').value = this.timeSettings.workEnd;
            document.getElementById('settingOvertimeEnd').value = this.timeSettings.overtimeEnd;
            document.getElementById('settingLunchBreak').value = this.timeSettings.lunchBreak;
            document.getElementById('settingCleanupTime').value = this.timeSettings.cleanupTime;
            document.getElementById('settingDiffFilmChange').value = this.timeSettings.diffFilmChange;
            
            modal.classList.add('active');
        }
    }

    // Ë®≠ÂÆö„É¢„Éº„ÉÄ„É´ÈùûË°®Á§∫
    hideSettings() {
        const modal = document.getElementById('settingsModal');
        if (modal) {
            modal.classList.remove('active');
        }
    }

    // Ë®≠ÂÆö‰øùÂ≠ò
    saveSettings() {
        // ÊôÇÈñìË®≠ÂÆö„ÅÆÊõ¥Êñ∞
        this.timeSettings.workStart = document.getElementById('settingWorkStart').value;
        this.timeSettings.workEnd = document.getElementById('settingWorkEnd').value;
        this.timeSettings.overtimeEnd = document.getElementById('settingOvertimeEnd').value;
        this.timeSettings.lunchBreak = parseInt(document.getElementById('settingLunchBreak').value);
        this.timeSettings.cleanupTime = parseInt(document.getElementById('settingCleanupTime').value);
        this.timeSettings.diffFilmChange = parseInt(document.getElementById('settingDiffFilmChange').value);

        // Ë®≠ÂÆö„Çí„É≠„Éº„Ç´„É´„Çπ„Éà„É¨„Éº„Ç∏„Å´‰øùÂ≠ò
        this.saveData();
        
        this.showToast('Ë®≠ÂÆö„Çí‰øùÂ≠ò„Åó„Åæ„Åó„Åü', 'success');
        this.hideSettings();
    }

    // Ë®≠ÂÆö„Çí„Éá„Éï„Ç©„É´„Éà„Å´Êàª„Åô
    resetSettings() {
        if (confirm('Ë®≠ÂÆö„Çí„Éá„Éï„Ç©„É´„Éà„Å´Êàª„Åó„Åæ„Åô„ÅãÔºü')) {
            this.timeSettings = {
                workStart: "08:30",
                workEnd: "17:00",
                overtimeEnd: "18:00",
                lunchBreak: 60,
                cleanupTime: 15,
                sameFilmChange: 10,
                diffFilmChange: 15
            };

            this.saveData();
            this.showSettings(); // Ë®≠ÂÆöÁîªÈù¢„ÇíÊõ¥Êñ∞Ë°®Á§∫
            this.showToast('Ë®≠ÂÆö„Çí„Éá„Éï„Ç©„É´„Éà„Å´Êàª„Åó„Åæ„Åó„Åü', 'success');
        }
    }

    // Ver.2.5: Áµ±‰∏Ä„Ç∏„Éß„ÉñÂÖ•Âäõ„Éï„Ç©„Éº„É†Ë°®Á§∫
    showJobInputForm(targetElement, sessionId) {
        // Êó¢Â≠ò„ÅÆ„Éï„Ç©„Éº„É†„Åå„ÅÇ„Çå„Å∞ÂâäÈô§
        const existingForm = document.querySelector('.inline-job-form');
        if (existingForm) {
            existingForm.remove();
        }

        const formId = `job-form-${Date.now()}`;
        const isNewFilm = sessionId === null;

        const formHTML = `
            <div class="inline-job-form">
                <div class="job-form-container">
                    <h4>${isNewFilm ? 'Êñ∞„Åó„ÅÑ„Éï„Ç£„É´„É†„Åß„Ç∏„Éß„Éñ„ÇíÈñãÂßã' : 'Êó¢Â≠ò„Éï„Ç£„É´„É†„Å´„Ç∏„Éß„Éñ„ÇíËøΩÂä†'}</h4>
                    
                    <!-- ÂÖ•Âäõ„É¢„Éº„ÉâÂàá„ÇäÊõø„Åà -->
                    <div class="input-mode-selector">
                        <div class="radio-option">
                            <input type="radio" name="${formId}-mode" id="${formId}-mode-sheets" value="sheets" checked>
                            <label for="${formId}-mode-sheets">ÁîüÁî£ÊûöÊï∞ÊåáÂÆö</label>
                        </div>
                        <div class="radio-option">
                            <input type="radio" name="${formId}-mode" id="${formId}-mode-parts" value="parts">
                            <label for="${formId}-mode-parts">ÈÉ®Êï∞Ë®àÁÆó</label>
                        </div>
                    </div>

                    <!-- ÁîüÁî£ÊûöÊï∞ÊåáÂÆö„É¢„Éº„Éâ -->
                    <div id="${formId}-sheets-mode" class="input-mode active">
                        <div class="form-group">
                            <label>ÁîüÁî£ÊûöÊï∞</label>
                            <input type="number" id="${formId}-sheets" min="1" step="1" placeholder="ÊûöÊï∞" required>
                        </div>
                        <div class="form-row">
                            <div class="form-group">
                                <label>Áî®Á¥ôÈï∑„Åï (mm)</label>
                                <input type="number" id="${formId}-paperLength" min="1" step="0.1" placeholder="Èï∑„Åï" required>
                            </div>
                            <div class="form-group">
                                <label>Èáç„Å™„ÇäÂπÖ (mm)</label>
                                <input type="number" id="${formId}-overlapWidth" min="0" step="0.1" placeholder="Èáç„Å≠ÂπÖ" required>
                            </div>
                        </div>
                        <div class="form-group">
                            <label>Âä†Â∑•ÈÄüÂ∫¶ (m/ÂàÜ)</label>
                            <input type="number" id="${formId}-machineSpeed" min="0.1" step="0.1" placeholder="ÈÄüÂ∫¶" required>
                        </div>
                    </div>

                    <!-- ÈÉ®Êï∞Ë®àÁÆó„É¢„Éº„Éâ -->
                    <div id="${formId}-parts-mode" class="input-mode">
                        <div class="form-row">
                            <div class="form-group">
                                <label>ÈÉ®Êï∞</label>
                                <input type="number" id="${formId}-parts" min="1" step="1" placeholder="ÈÉ®Êï∞">
                            </div>
                            <div class="form-group">
                                <label>Âç∞Âà∑Èù¢Êï∞</label>
                                <input type="number" id="${formId}-surfaces" min="1" step="1" placeholder="Èù¢Êï∞">
                            </div>
                        </div>
                        <div class="form-group">
                            <label>‰∫àÂÇôÊûöÊï∞</label>
                            <input type="number" id="${formId}-spares" min="0" step="1" placeholder="‰∫àÂÇô" value="0">
                        </div>
                        <div class="form-row">
                            <div class="form-group">
                                <label>Áî®Á¥ôÈï∑„Åï (mm)</label>
                                <input type="number" id="${formId}-paperLength2" min="1" step="0.1" placeholder="Èï∑„Åï">
                            </div>
                            <div class="form-group">
                                <label>Èáç„Å™„ÇäÂπÖ (mm)</label>
                                <input type="number" id="${formId}-overlapWidth2" min="0" step="0.1" placeholder="Èáç„Å≠ÂπÖ">
                            </div>
                        </div>
                        <div class="form-group">
                            <label>Âä†Â∑•ÈÄüÂ∫¶ (m/ÂàÜ)</label>
                            <input type="number" id="${formId}-machineSpeed2" min="0.1" step="0.1" placeholder="ÈÄüÂ∫¶">
                        </div>
                    </div>

                    <!-- „Ç¢„ÇØ„Ç∑„Éß„É≥„Éú„Çø„É≥ -->
                    <div class="form-actions">
                        <button type="button" class="btn btn-primary" onclick="dashboard.handleSaveJob('${formId}', '${sessionId}')">
                            ${isNewFilm ? '„Ç∏„Éß„Éñ„ÇíÊñ∞Ë¶è„Éï„Ç£„É´„É†„ÅßÈñãÂßã' : '„Ç∏„Éß„Éñ„ÇíËøΩÂä†'}
                        </button>
                        <button type="button" class="btn btn-secondary" onclick="dashboard.hideJobInputForm()">
                            „Ç≠„É£„É≥„Çª„É´
                        </button>
                    </div>
                </div>
            </div>
        `;

        // „Éï„Ç©„Éº„É†„ÇíÊåøÂÖ•
        targetElement.insertAdjacentHTML('afterend', formHTML);

        // „É¢„Éº„ÉâÂàá„ÇäÊõø„Åà„Ç§„Éô„É≥„Éà„É™„Çπ„Éä„Éº„ÇíË®≠ÂÆö
        const sheetsRadio = document.getElementById(`${formId}-mode-sheets`);
        const partsRadio = document.getElementById(`${formId}-mode-parts`);
        const sheetsMode = document.getElementById(`${formId}-sheets-mode`);
        const partsMode = document.getElementById(`${formId}-parts-mode`);

        sheetsRadio.addEventListener('change', () => {
            if (sheetsRadio.checked) {
                sheetsMode.classList.add('active');
                partsMode.classList.remove('active');
            }
        });

        partsRadio.addEventListener('change', () => {
            if (partsRadio.checked) {
                partsMode.classList.add('active');
                sheetsMode.classList.remove('active');
            }
        });

        console.log('Job input form displayed:', { sessionId, isNewFilm });
    }

    // „Éï„Ç©„Éº„É†ÈùûË°®Á§∫
    hideJobInputForm() {
        const existingForm = document.querySelector('.inline-job-form');
        if (existingForm) {
            existingForm.remove();
        }
    }

    // „Ç∏„Éß„Éñ‰øùÂ≠òÂá¶ÁêÜ
    handleSaveJob(formId, sessionId) {
        try {
            const jobData = this.collectJobFormData(formId);
            if (!jobData) return;

            if (sessionId === 'null' || sessionId === null) {
                // Êñ∞Ë¶è„Éï„Ç£„É´„É†„Åß„Ç∏„Éß„Éñ„ÇíÈñãÂßã
                this.addJobToNewFilmSession(jobData);
            } else {
                // Êó¢Â≠ò„Éï„Ç£„É´„É†„Å´„Ç∏„Éß„Éñ„ÇíËøΩÂä†
                this.addJobToExistingSession(sessionId, jobData);
            }

            this.hideJobInputForm();
            this.renderJobList();
            this.updateFinishTime();
            this.showToast('„Ç∏„Éß„Éñ„ÇíËøΩÂä†„Åó„Åæ„Åó„Åü', 'success');

        } catch (error) {
            console.error('Error saving job:', error);
            this.showToast('„Ç∏„Éß„Éñ„ÅÆ‰øùÂ≠ò‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü', 'error');
        }
    }

    // „Éï„Ç©„Éº„É†„Éá„Éº„ÇøÂèéÈõÜ
    collectJobFormData(formId) {
        const sheetsRadio = document.getElementById(`${formId}-mode-sheets`);
        const isSheetsMode = sheetsRadio && sheetsRadio.checked;

        let sheets, paperLength, overlapWidth, machineSpeed;

        if (isSheetsMode) {
            sheets = parseInt(document.getElementById(`${formId}-sheets`).value);
            paperLength = parseFloat(document.getElementById(`${formId}-paperLength`).value);
            overlapWidth = parseFloat(document.getElementById(`${formId}-overlapWidth`).value);
            machineSpeed = parseFloat(document.getElementById(`${formId}-machineSpeed`).value);
        } else {
            // ÈÉ®Êï∞Ë®àÁÆó„É¢„Éº„Éâ
            const parts = parseInt(document.getElementById(`${formId}-parts`).value);
            const surfaces = parseInt(document.getElementById(`${formId}-surfaces`).value);
            const spares = parseInt(document.getElementById(`${formId}-spares`).value) || 0;
            
            sheets = Math.ceil(parts / surfaces) + spares;
            paperLength = parseFloat(document.getElementById(`${formId}-paperLength2`).value);
            overlapWidth = parseFloat(document.getElementById(`${formId}-overlapWidth2`).value);
            machineSpeed = parseFloat(document.getElementById(`${formId}-machineSpeed2`).value);
        }

        // „Éê„É™„Éá„Éº„Ç∑„Éß„É≥
        if (!sheets || !paperLength || isNaN(overlapWidth) || !machineSpeed) {
            alert('„Åô„Åπ„Å¶„ÅÆÂøÖÈ†àÈ†ÖÁõÆ„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
            return null;
        }

        return this.createJobData({
            inputMode: isSheetsMode ? 'sheets' : 'parts',
            sheets,
            paperLength,
            overlapWidth,
            processSpeed: machineSpeed
        });
    }

    // Ver.2.5: ÊßãÈÄ†Âåñ„Éá„Éº„Çø„Åã„Çâ„Ç∏„Éß„Éñ„Éá„Éº„Çø„Çí‰ΩúÊàê
    createJobData(params) {
        const { inputMode, sheets, paperLength, overlapWidth, processSpeed } = params;

        // Ë®àÁÆóÂÆüË°å
        const usageLength = (paperLength - overlapWidth) / 1000; // „É°„Éº„Éà„É´Â§âÊèõ
        const processingTime = sheets * usageLength / processSpeed; // ÂàÜ
        
        // NaNÂÆâÂÖ®ÊÄß„ÉÅ„Çß„ÉÉ„ÇØ
        if (isNaN(usageLength) || isNaN(processingTime)) {
            alert('Ë®àÁÆó„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇÂÖ•ÂäõÂÄ§„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ');
            return null;
        }
        
        // Â¶•ÂΩìÊÄß„ÉÅ„Çß„ÉÉ„ÇØ
        if (usageLength <= 0) {
            alert('Áî®Á¥ô„ÅÆÈï∑„Åï„ÅØÈáç„Å™„ÇäÂπÖ„Çà„ÇäÂ§ß„Åç„Åè„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
            return null;
        }
        
        if (processingTime > 480) { // 8ÊôÇÈñì‰ª•‰∏ä„ÅÆÂ†¥ÂêàË≠¶Âëä
            if (!confirm(`Ë®àÁÆóÁµêÊûú„Åå ${processingTime.toFixed(1)}ÂàÜÔºà${(processingTime/60).toFixed(1)}ÊôÇÈñìÔºâ„Åß„Åô„ÄÇÁ∂öË°å„Åó„Åæ„Åô„ÅãÔºü`)) {
                return null;
            }
        }

        // „Ç∏„Éß„Éñ„Éá„Éº„Çø‰ΩúÊàê
        return {
            id: Date.now().toString(),
            timestamp: new Date(),
            sheets: sheets,
            paperLength: paperLength,
            overlapWidth: overlapWidth,
            processSpeed: processSpeed,
            usageLength: usageLength,
            processingTime: processingTime,
            inputMode: inputMode,
            completed: false,
            initialFilmRemaining: null // Ver.2.5„Åß„ÅØÂà•ÈÄîË®≠ÂÆö
        };
    }

    // Ver.2.5: Êñ∞Ë¶è„Éï„Ç£„É´„É†„Çª„ÉÉ„Ç∑„Éß„É≥„Å´„Ç∏„Éß„Éñ„ÇíËøΩÂä†
    addJobToNewFilmSession(jobData) {
        // ÁèæÂú®„ÅÆ„Éï„Ç£„É´„É†„Çª„ÉÉ„Ç∑„Éß„É≥„ÇíÂÆå‰∫Ü
        if (this.currentFilmSession && this.currentFilmSession.jobs.length > 0) {
            this.currentFilmSession.status = 'completed';
            this.currentFilmSession.endTime = new Date();
        }

        // Êñ∞„Åó„ÅÑ„Éï„Ç£„É´„É†„Çª„ÉÉ„Ç∑„Éß„É≥‰ΩúÊàê
        this.currentFilmSession = this.createNewFilmSession();
        this.filmSessions.push(this.currentFilmSession);

        // „Ç∏„Éß„Éñ„ÇíËøΩÂä†„Åó„Å¶„Çª„ÉÉ„Ç∑„Éß„É≥Âõ∫Êúâ„ÅÆÊÆãÈáè„ÇíÊõ¥Êñ∞
        this.currentFilmSession.jobs.push(jobData);
        this.currentFilmSession.filmRemaining = Math.max(0, this.currentFilmSession.filmRemaining - jobData.usageLength);
        this.currentFilmSession.filmUsed += jobData.usageLength;

        // „Éï„Ç£„É´„É†‰∫§ÊèõÊôÇÈñì„ÇíËøΩÂä†
        this.extraTime += this.timeSettings.diffFilmChange;

        this.saveData();
        console.log('Job added to new film session:', jobData);
    }

    // Ver.2.5: Êó¢Â≠ò„Éï„Ç£„É´„É†„Çª„ÉÉ„Ç∑„Éß„É≥„Å´„Ç∏„Éß„Éñ„ÇíËøΩÂä†
    addJobToExistingSession(sessionId, jobData) {
        const session = this.filmSessions.find(s => s.id === sessionId);
        if (!session) {
            console.error('Session not found:', sessionId);
            throw new Error('ÊåáÂÆö„Åï„Çå„Åü„Éï„Ç£„É´„É†„Çª„ÉÉ„Ç∑„Éß„É≥„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì');
        }

        // „Ç∏„Éß„Éñ„ÇíËøΩÂä†„Åó„Å¶„Çª„ÉÉ„Ç∑„Éß„É≥Âõ∫Êúâ„ÅÆÊÆãÈáè„ÇíÊõ¥Êñ∞
        session.jobs.push(jobData);
        session.filmRemaining = Math.max(0, session.filmRemaining - jobData.usageLength);
        session.filmUsed += jobData.usageLength;

        this.saveData();
        console.log('Job added to existing session:', { sessionId, jobData });
    }

    // Ver.2.5: „Éï„Ç£„É´„É†‰∏çË∂≥Áä∂Ê≥Å„ÇíÂà§ÂÆö
    getFilmShortageStatus(session) {
        // Ver.2.6: Ê≠£„Åó„ÅÑË®àÁÆóÂºè„Çí‰ΩøÁî® - ÊÆã„Çä(m) = ÂÆπÈáè(m) - ‰ΩøÁî®(m)
        const totalUsed = session.jobs.reduce((total, job) => total + (job.sheets * job.usageLength), 0);
        const actualRemaining = session.filmCapacity - totalUsed;
        const remainingRatio = actualRemaining / session.filmCapacity;
        const absoluteRemaining = actualRemaining;

        // ‰∏çË∂≥Âà§ÂÆöÂü∫Ê∫ñ
        if (absoluteRemaining <= 0) {
            return {
                isShortage: true,
                message: '„Éï„Ç£„É´„É†Âàá„Çå',
                cssClass: 'film-empty',
                level: 'critical'
            };
        } else if (remainingRatio <= 0.1 || absoluteRemaining <= 2) {
            return {
                isShortage: true,
                message: 'ÊÆãÈáè„Çè„Åö„Åã',
                cssClass: 'film-critical',
                level: 'critical'
            };
        } else if (remainingRatio <= 0.2 || absoluteRemaining <= 5) {
            return {
                isShortage: true,
                message: 'ÊÆãÈáèÂ∞ë',
                cssClass: 'film-low',
                level: 'warning'
            };
        }

        return {
            isShortage: false,
            message: '',
            cssClass: '',
            level: 'normal'
        };
    }

    // Ver.2.5: „Éï„Ç£„É´„É†ÂàùÊúüÊÆãÈáèË®≠ÂÆöUI„ÅÆË°®Á§∫
    showFilmCapacityInputUI(sessionId) {
        const session = this.filmSessions.find(s => s.id === sessionId);
        if (!session) return;

        const capacity = prompt(
            '„Éï„Ç£„É´„É†ÂàùÊúüÂÆπÈáè (m) „ÇíË®≠ÂÆö„Åó„Å¶„Åè„Å†„Åï„ÅÑ:',
            session.filmCapacity.toString()
        );

        if (capacity && !isNaN(capacity) && parseFloat(capacity) > 0) {
            const newCapacity = parseFloat(capacity);
            const currentUsed = session.filmUsed;
            
            // ÂÆπÈáè„ÇíÊõ¥Êñ∞„Åó„ÄÅÊÆãÈáè„ÇíÂÜçË®àÁÆó
            session.filmCapacity = newCapacity;
            session.filmRemaining = Math.max(0, newCapacity - currentUsed);
            
            this.saveData();
            this.renderJobList();
            this.showToast(`„Éï„Ç£„É´„É†ÂÆπÈáè„Çí ${newCapacity}m „Å´Ë®≠ÂÆö„Åó„Åæ„Åó„Åü`, 'success');
        }
    }

    // „Éá„Éº„Çø„Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„ÉóÊ©üËÉΩ (CapacitorÂØæÂøúÁâà)
    async backupData() {
        try {
            let data = null;
            const dataKey = 'laminator_dashboard_v3';
            
            if (isCapacitorEnvironment && CapacitorPreferences) {
                // APKÁí∞Â¢É: Capacitor Preferences‰ΩøÁî®
                console.log('üîÑ Capacitor Preferences„Åã„Çâ„Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó„Éá„Éº„ÇøÂèñÂæó...');
                const result = await CapacitorPreferences.get({ key: dataKey });
                data = result.value;
            } else {
                // WebÁí∞Â¢É: localStorage‰ΩøÁî®
                console.log('üîÑ localStorage„Åã„Çâ„Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó„Éá„Éº„ÇøÂèñÂæó...');
                data = localStorage.getItem(dataKey);
            }
            
            if (!data) {
                this.showToast('„Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó„Åô„Çã„Éá„Éº„Çø„Åå„ÅÇ„Çä„Åæ„Åõ„Çì', 'warning');
                return;
            }

            const today = new Date();
            const dateStr = today.getFullYear() + '-' + 
                String(today.getMonth() + 1).padStart(2, '0') + '-' + 
                String(today.getDate()).padStart(2, '0');
            const filename = `lami-ope-backup-${dateStr}.json`;

            if (isCapacitorEnvironment && CapacitorFilesystem) {
                // APKÁí∞Â¢É: Capacitor Filesystem API‰ΩøÁî®
                try {
                    console.log('üîÑ Capacitor Filesystem API„Åß„Éï„Ç°„Ç§„É´Êõ∏„ÅçËæº„Åø...');
                    
                    // Android 11+ „Çπ„Ç≥„Éº„Éó„Éâ„Çπ„Éà„É¨„Éº„Ç∏ÂØæÂøú: Ê®©ÈôêÁ¢∫Ë™ç„Å®„Éï„Ç©„É´„ÉÄ‰ΩúÊàê
                    await ensureFsReady();
                    
                    // „Éá„Éê„ÉÉ„Ç∞ÊÉÖÂ†±Ë°®Á§∫
                    this.showToast(`„Éá„Éê„ÉÉ„Ç∞: Directory=${CapacitorDirectory?.Documents}, Encoding=${CapacitorEncoding?.UTF8}`, 'info');
                    
                    await CapacitorFilesystem.writeFile({
                        path: `LamiOpe/${filename}`,
                        data: data,
                        directory: CapacitorDirectory.Documents,
                        encoding: CapacitorEncoding.UTF8
                    });
                    
                    console.log('‚úÖ Capacitor Filesystem„Åß„Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó‰øùÂ≠òÊàêÂäü');
                    this.showToast(`„Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó„Éï„Ç°„Ç§„É´„ÇíDocuments/LamiOpe/${filename}„Å´‰øùÂ≠ò„Åó„Åæ„Åó„Åü`, 'success');
                    
                } catch (fsError) {
                    console.warn('‚ùå Filesystem‰øùÂ≠òÂ§±Êïó„ÄÅblob‰øùÂ≠ò„Å´fallback:', fsError);
                    this.showToast(`APK„Ç®„É©„Éº: ${fsError.message || fsError}`, 'error');
                    this.fallbackBlobDownload(data, filename);
                }
            } else {
                // WebÁí∞Â¢É„Åæ„Åü„ÅØfallback: blob‰øùÂ≠ò
                console.log('üîÑ Web„Éñ„É©„Ç¶„Ç∂Áí∞Â¢É„Åßblob‰øùÂ≠òÂÆüË°å...');
                this.fallbackBlobDownload(data, filename);
            }
        } catch (error) {
            console.error('‚ùå „Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó„Ç®„É©„Éº:', error);
            this.showToast('„Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü', 'error');
        }
    }

    // Fallback: Blob „ÉÄ„Ç¶„É≥„É≠„Éº„Éâ
    fallbackBlobDownload(data, filename) {
        const blob = new Blob([data], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
        
        const a = document.createElement('a');
        a.href = url;
        a.download = filename;
        a.style.display = 'none';
        document.body.appendChild(a);
        
        setTimeout(() => {
            a.click();
            setTimeout(() => {
                document.body.removeChild(a);
                URL.revokeObjectURL(url);
            }, 100);
        }, 100);
        
        this.showToast('„Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó„Éï„Ç°„Ç§„É´„Çí„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„Åó„Åæ„Åó„Åü', 'success');
    }

    // Âæ©ÂÖÉ„Éï„Ç°„Ç§„É´ÈÅ∏Êäû„Çí„Éà„É™„Ç¨„Éº
    triggerRestore() {
        const fileInput = document.getElementById('restore-file-input');
        fileInput.click();
    }

    // „Éá„Éº„ÇøÂæ©ÂÖÉÊ©üËÉΩ (Capacitor PreferencesÂØæÂøúÁâà)
    async restoreData(event) {
        const file = event.target.files[0];
        if (!file) return;

        const reader = new FileReader();
        reader.onload = async (e) => {
            try {
                const data = e.target.result;
                JSON.parse(data); // ÊúâÂäπ„Å™JSON„Åã„ÉÅ„Çß„ÉÉ„ÇØ
                const dataKey = 'laminator_dashboard_v3';
                
                if (isCapacitorEnvironment && CapacitorPreferences) {
                    // APKÁí∞Â¢É: Capacitor Preferences‰ΩøÁî®
                    console.log('üîÑ Capacitor Preferences„Å´Âæ©ÂÖÉ„Éá„Éº„Çø‰øùÂ≠ò...');
                    
                    await CapacitorPreferences.set({
                        key: dataKey,
                        value: data
                    });
                    
                    console.log('‚úÖ Capacitor Preferences„Å´Âæ©ÂÖÉÂÆå‰∫Ü');
                } else {
                    // WebÁí∞Â¢É: localStorage‰ΩøÁî®
                    console.log('üîÑ localStorage„Å´Âæ©ÂÖÉ„Éá„Éº„Çø‰øùÂ≠ò...');
                    localStorage.setItem(dataKey, data);
                    console.log('‚úÖ localStorage„Å´Âæ©ÂÖÉÂÆå‰∫Ü');
                }
                
                this.showToast('Âæ©ÂÖÉ„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü„ÄÇ„Éö„Éº„Ç∏„ÇíÊõ¥Êñ∞„Åó„Åæ„Åô„ÄÇ', 'success');
                setTimeout(() => {
                    location.reload();
                }, 1500);
            } catch (error) {
                console.error('Âæ©ÂÖÉ„Ç®„É©„Éº:', error);
                this.showToast('ÁÑ°Âäπ„Å™„Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó„Éï„Ç°„Ç§„É´„Åß„Åô', 'error');
            }
        };
        
        reader.readAsText(file);
        
        // „Éï„Ç°„Ç§„É´ÈÅ∏Êäû„Çí„É™„Çª„ÉÉ„ÉàÔºàÂêå„Åò„Éï„Ç°„Ç§„É´„Åß„ÇÇÂÜçÈÅ∏ÊäûÂèØËÉΩ„Å´„Åô„ÇãÔºâ
        event.target.value = '';
    }
}

// Capacitor „Éó„É©„Ç∞„Ç§„É≥Ë®≠ÂÆö
let CapacitorPreferences, CapacitorFilesystem, CapacitorDirectory, CapacitorEncoding;
let isCapacitorEnvironment = false;

// CapacitorÁí∞Â¢ÉÂà§ÂÆö„Å®„Éó„É©„Ç∞„Ç§„É≥ÂàùÊúüÂåñÔºà‰øÆÊ≠£ÁâàÔºâ
async function initializeCapacitor() {
    console.log('üîÑ CapacitorÁí∞Â¢ÉÂà§ÂÆö„ÇíÈñãÂßã...');
    console.log('üîç Áí∞Â¢ÉÊÉÖÂ†±:', {
        userAgent: navigator.userAgent,
        platform: navigator.platform,
        hasCapacitor: typeof window.Capacitor !== 'undefined',
        locationProtocol: window.location.protocol
    });
    
    try {
        // ‚úÖ Ê≠£„Åó„ÅÑ„Éç„Ç§„ÉÜ„Ç£„Éñ„Éó„É©„ÉÉ„Éà„Éï„Ç©„Éº„É†Âà§ÂÆöÔºàÈñ¢Êï∞„Å®„Åó„Å¶Âëº„Å≥Âá∫„ÅóÔºâ
        const isNative = !!(window.Capacitor?.isNativePlatform?.());
        
        if (isNative) {
            console.log('‚úÖ „Éç„Ç§„ÉÜ„Ç£„Éñ„Éó„É©„ÉÉ„Éà„Éï„Ç©„Éº„É†Áí∞Â¢É„ÇíÊ§úÂá∫');
            isCapacitorEnvironment = true;
            
            // APKÁí∞Â¢É„Åß„ÅØ„Éó„É©„Ç∞„Ç§„É≥„ÅåÊó¢„Å´„Éê„É≥„Éâ„É´Ê∏à„Åø
            try {
                console.log('üîÑ „Éê„É≥„Éâ„É´Ê∏à„ÅøCapacitor„Éó„É©„Ç∞„Ç§„É≥‰ΩøÁî®...');
                
                // APKÁí∞Â¢É„Åß„ÅØ window.Capacitor ÁµåÁî±„Åß„Éó„É©„Ç∞„Ç§„É≥„Å´„Ç¢„ÇØ„Çª„Çπ
                if (window.Capacitor?.Plugins?.Preferences) {
                    CapacitorPreferences = window.Capacitor.Plugins.Preferences;
                    console.log('‚úÖ „Éê„É≥„Éâ„É´Ê∏à„Åø Preferences „Éó„É©„Ç∞„Ç§„É≥ÂèñÂæóÊàêÂäü');
                } else {
                    throw new Error('Preferences „Éó„É©„Ç∞„Ç§„É≥„Åå„Éê„É≥„Éâ„É´„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì');
                }
                
                if (window.Capacitor?.Plugins?.Filesystem) {
                    CapacitorFilesystem = window.Capacitor.Plugins.Filesystem;
                    // Directory „Å® Encoding „ÇÇ Capacitor „Åã„ÇâÂèñÂæó
                    CapacitorDirectory = window.Capacitor.Directory || {
                        Documents: 'DOCUMENTS',
                        Data: 'DATA',
                        Cache: 'CACHE',
                        External: 'EXTERNAL',
                        ExternalStorage: 'EXTERNAL_STORAGE'
                    };
                    CapacitorEncoding = window.Capacitor.Encoding || {
                        UTF8: 'utf8',
                        ASCII: 'ascii',
                        UTF16: 'utf16'
                    };
                    console.log('‚úÖ „Éê„É≥„Éâ„É´Ê∏à„Åø Filesystem „Éó„É©„Ç∞„Ç§„É≥ÂèñÂæóÊàêÂäü');
                } else {
                    throw new Error('Filesystem „Éó„É©„Ç∞„Ç§„É≥„Åå„Éê„É≥„Éâ„É´„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì');
                }
                
                console.log('‚úÖ ÂÖ®Capacitor„Éó„É©„Ç∞„Ç§„É≥ÂàùÊúüÂåñÊàêÂäüÔºà„Éê„É≥„Éâ„É´ÊñπÂºèÔºâ');
                
            } catch (pluginError) {
                console.error('‚ùå „Éê„É≥„Éâ„É´Ê∏à„Åø„Éó„É©„Ç∞„Ç§„É≥ÂèñÂæó„Ç®„É©„Éº:', pluginError);
                console.log('üîÑ CDNÂãïÁöÑ„Ç§„É≥„Éù„Éº„Éà„Å´„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ...');
                
                // CDNÂãïÁöÑ„Ç§„É≥„Éù„Éº„Éà„Çí„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ„Å®„Åó„Å¶Ë©¶Ë°å
                try {
                    const { Preferences } = await import('https://unpkg.com/@capacitor/preferences@7/dist/esm/index.js');
                    const { Filesystem, Directory, Encoding } = await import('https://unpkg.com/@capacitor/filesystem@7/dist/esm/index.js');
                    
                    CapacitorPreferences = Preferences;
                    CapacitorFilesystem = Filesystem;
                    CapacitorDirectory = Directory;
                    CapacitorEncoding = Encoding;
                    
                    console.log('‚úÖ CDNÂãïÁöÑ„Ç§„É≥„Éù„Éº„ÉàÊàêÂäü');
                } catch (cdnError) {
                    console.error('‚ùå CDNÂãïÁöÑ„Ç§„É≥„Éù„Éº„Éà„ÇÇÂ§±Êïó:', cdnError);
                    isCapacitorEnvironment = false;
                }
            }
        } else {
            isCapacitorEnvironment = false;
            console.log('üåê WebÁí∞Â¢É„Å®„Åó„Å¶Âãï‰Ωú');
        }
    } catch (error) {
        console.error('‚ùå CapacitorÂàùÊúüÂåñ‰∏≠„ÅÆ‰∫àÊúü„Åó„Å™„ÅÑ„Ç®„É©„Éº:', error);
        isCapacitorEnvironment = false;
    }
    
    console.log(`üì± ÊúÄÁµÇÂà§ÂÆö: ${isCapacitorEnvironment ? 'Capacitor APKÁí∞Â¢É' : 'WebÁí∞Â¢É'}`);
}

// AndroidÂÆâÂÖ®ÂåñÔºöÊ®©Èôê„ÉÅ„Çß„ÉÉ„ÇØ„Å®„Éï„Ç©„É´„ÉÄ‰ΩúÊàê
async function ensureFsReady() {
    if (!CapacitorFilesystem || !isCapacitorEnvironment) return;

    try {
        // Ê®©Èôê„ÉÅ„Çß„ÉÉ„ÇØ„ÉªË¶ÅÊ±Ç
        if (CapacitorFilesystem.checkPermissions) {
            const status = await CapacitorFilesystem.checkPermissions();
            if (status?.publicStorage && status.publicStorage !== 'granted') {
                console.log('üîÑ „Éï„Ç°„Ç§„É´„Ç∑„Çπ„ÉÜ„É†Ê®©Èôê„ÇíË¶ÅÊ±Ç‰∏≠...');
                await CapacitorFilesystem.requestPermissions();
            }
        }
        
        // LamiOpe„Éï„Ç©„É´„ÉÄ‰ΩúÊàêÔºà„Çπ„Ç≥„Éº„Éó„Éâ„Çπ„Éà„É¨„Éº„Ç∏ÂØæÂøúÔºâ
        try {
            await CapacitorFilesystem.mkdir({
                path: 'LamiOpe',
                directory: CapacitorDirectory.Documents,
                recursive: true // ÈáçË¶ÅÔºöË¶™„Éï„Ç©„É´„ÉÄ„ÇÇ‰ΩúÊàê
            });
            console.log('‚úÖ LamiOpe„Éï„Ç©„É´„ÉÄÊ∫ñÂÇôÂÆå‰∫Ü');
        } catch (mkdirError) {
            if (!mkdirError.message?.includes('exists')) {
                console.warn('üìÅ „Éï„Ç©„É´„ÉÄ‰ΩúÊàê„ÅßË≠¶ÂëäÔºàÊó¢Â≠ò„ÅÆÂèØËÉΩÊÄßÔºâ:', mkdirError);
            }
        }
    } catch (error) {
        console.warn('‚ö†Ô∏è „Éï„Ç°„Ç§„É´„Ç∑„Çπ„ÉÜ„É†Ê∫ñÂÇô„ÅßË≠¶Âëä:', error);
    }
}

// Ê±éÁî®ÁöÑ„Å™Blob„ÉÄ„Ç¶„É≥„É≠„Éº„ÉâÊ©üËÉΩÔºàWebÁí∞Â¢ÉÁî®Ôºâ
function downloadBlob(data, filename, contentType) {
    const blob = new Blob([data], { type: contentType });
    const url = URL.createObjectURL(blob);
    
    const a = document.createElement('a');
    a.href = url;
    a.download = filename;
    a.style.display = 'none';
    document.body.appendChild(a);
    
    setTimeout(() => {
        a.click();
        setTimeout(() => {
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
        }, 100);
    }, 50);
}

// „Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥ÂàùÊúüÂåñ
let dashboard;

document.addEventListener('DOMContentLoaded', async () => {
    // ‚òÖ ÊúÄÂàù„Å´CapacitorÁí∞Â¢É„ÇíÂàùÊúüÂåñ
    try {
        await initializeCapacitor();
    } catch (error) {
        console.warn('CapacitorÂàùÊúüÂåñ„Ç®„É©„Éº:', error);
    }
    
    dashboard = new LaminatorDashboard();
    window.dashboard = dashboard;  // HTML„Åã„ÇâÂëº„Å≥Âá∫„ÅóÂèØËÉΩ„Å´„Åô„Çã
    
    // „Éò„ÉÉ„ÉÄ„Éº„Éú„Çø„É≥„ÅÆ„Ç§„Éô„É≥„Éà„É™„Çπ„Éä„ÉºË®≠ÂÆöÔºàVer.2.5 „Éê„Ç∞‰øÆÊ≠£Ôºâ
    const logTrigger = document.getElementById('log-page-trigger-icon');
    if (logTrigger) {
        logTrigger.addEventListener('click', showLogPage);
        console.log('Log page trigger event listener added');
    }
    
    // Ë®≠ÂÆö„Éú„Çø„É≥„ÅÆ„ÇØ„É™„ÉÉ„ÇØ„Ç§„Éô„É≥„Éà„ÇÇÂøµ„ÅÆ„Åü„ÇÅÁõ¥Êé•Ë®≠ÂÆö
    const settingsBtn = document.querySelector('.header-btn');
    if (settingsBtn && dashboard) {
        settingsBtn.addEventListener('click', (e) => {
            e.preventDefault();
            dashboard.showSettings();
        });
        console.log('Settings button event listener added');
    }
    
    // ‚òÖ „Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó„ÉªÂæ©ÂÖÉ„ÉªCSV„Ç®„ÇØ„Çπ„Éù„Éº„Éà„ÅÆ„Ç§„Éô„É≥„Éà„É™„Çπ„Éä„ÉºË®≠ÂÆö
    const backupBtn = document.getElementById('backup-data-btn');
    if (backupBtn) {
        backupBtn.addEventListener('click', () => dashboard.backupData());
        console.log('‚úÖ Backup button event listener added');
    }

    const restoreTriggerBtn = document.getElementById('restore-data-btn');
    if (restoreTriggerBtn) {
        restoreTriggerBtn.addEventListener('click', () => dashboard.triggerRestore());
        console.log('‚úÖ Restore trigger button event listener added');
    }

    const restoreFileInput = document.getElementById('restore-file-input');
    if (restoreFileInput) {
        restoreFileInput.addEventListener('change', (event) => dashboard.restoreData(event));
        console.log('‚úÖ Restore file input event listener added');
    }

    const exportCsvBtn = document.getElementById('exportCsvBtn');
    if (exportCsvBtn) {
        exportCsvBtn.addEventListener('click', () => dashboard.exportDataAsCsv());
        console.log('‚úÖ CSV export button event listener added');
    }
    
    // PWAÂØæÂøú
    if ('serviceWorker' in navigator) {
        window.addEventListener('load', () => {
            navigator.serviceWorker.register('/sw.js')
                .then(registration => {
                    console.log('SW registered: ', registration);
                })
                .catch(registrationError => {
                    console.log('SW registration failed: ', registrationError);
                });
        });
    }
});
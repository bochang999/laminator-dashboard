name: Build Laminator Dashboard (Simple & Reliable)

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 22
        uses: actions/setup-java@v4
        with:
          java-version: '22'
          distribution: 'temurin'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build web assets
        run: |
          mkdir -p dist
          cp *.html *.css *.js *.json *.png dist/

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Accept Android licenses
        run: yes | sdkmanager --licenses >/dev/null

      - name: Sync Capacitor
        run: npx cap sync android

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Decode Keystore
        env:
          KEYSTORE_FILE: ${{ secrets.KEYSTORE_BASE64 }}
        run: |
          if [ ! -z "$KEYSTORE_FILE" ] && [ "$KEYSTORE_FILE" != "ZHVtbXkta2V5c3RvcmUtY29udGVudAo=" ]; then
            echo "Real keystore found, decoding..."
            echo "$KEYSTORE_FILE" | base64 --decode > android/app/keystore.jks
            
            # キーストアファイルの検証
            if keytool -list -keystore android/app/keystore.jks -storepass "${{ secrets.KEYSTORE_PASSWORD }}" >/dev/null 2>&1; then
              echo "Keystore validation successful"
              echo "KEYSTORE_EXISTS=true" >> $GITHUB_ENV
            else
              echo "Keystore validation failed, will use debug signing"
              echo "KEYSTORE_EXISTS=false" >> $GITHUB_ENV
            fi
          else
            echo "No valid keystore found, will use debug signing"
            echo "KEYSTORE_EXISTS=false" >> $GITHUB_ENV
          fi

      - name: Build APK
        working-directory: android
        env:
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
          VERSION_CODE: ${{ github.run_number }}
        run: |
          if [ "$KEYSTORE_EXISTS" = "true" ]; then
            echo "Building signed APK with versionCode=${VERSION_CODE}..."
            ./gradlew assembleRelease \
              -Pandroid.injected.signing.store.file="$GITHUB_WORKSPACE/android/app/keystore.jks" \
              -Pandroid.injected.signing.store.password="$KEYSTORE_PASSWORD" \
              -Pandroid.injected.signing.key.alias="$KEY_ALIAS" \
              -Pandroid.injected.signing.key.password="$KEY_PASSWORD" \
              -Pandroid.injected.version.code="$VERSION_CODE" \
              -Pandroid.injected.version.name="2.16.$VERSION_CODE" \
              --no-daemon --stacktrace
          else
            echo "No keystore found, building debug APK with versionCode=${VERSION_CODE}..."
            ./gradlew assembleDebug \
              -Pandroid.injected.version.code="$VERSION_CODE" \
              -Pandroid.injected.version.name="2.16.$VERSION_CODE" \
              --no-daemon --stacktrace
          fi

      - name: Rename APK for Release
        run: |
          # 版本号计算: v2.16.01, v2.16.02 等
          MAJOR_VERSION=2.16
          MINOR_VERSION=$(printf "%02d" ${{ github.run_number }})
          VERSION="v${MAJOR_VERSION}.${MINOR_VERSION}"
          
          if [ "$KEYSTORE_EXISTS" = "true" ] && [ -f android/app/build/outputs/apk/release/app-release.apk ]; then
            cp android/app/build/outputs/apk/release/app-release.apk "LaminatorDashboard-${VERSION}.apk"
            echo "APK_FILE=LaminatorDashboard-${VERSION}.apk" >> $GITHUB_ENV
            echo "VERSION=${VERSION}" >> $GITHUB_ENV
          else
            cp android/app/build/outputs/apk/debug/app-debug.apk "LaminatorDashboard-${VERSION}.apk"
            echo "APK_FILE=LaminatorDashboard-${VERSION}.apk" >> $GITHUB_ENV
            echo "VERSION=${VERSION}" >> $GITHUB_ENV
          fi

      - name: APK Verification & Analysis
        run: |
          echo "=== FINAL APK ANALYSIS ==="
          echo "APK file: ${{ env.APK_FILE }}"
          
          # APKの基本情報確認
          if command -v aapt >/dev/null 2>&1; then
            echo ""
            echo "=== APK PACKAGE INFORMATION ==="
            aapt dump badging "${{ env.APK_FILE }}" | grep -E "package|versionCode|versionName" || true
          fi
          
          # APK署名の検証と証明書情報表示
          if command -v apksigner >/dev/null 2>&1; then
            echo ""
            echo "=== APK SIGNATURE VERIFICATION ==="
            apksigner verify --print-certs "${{ env.APK_FILE }}" || true
          else
            echo "apksigner not found - using alternative method"
            # Fallback: jarsignerでの検証
            jarsigner -verify -verbose -certs "${{ env.APK_FILE }}" | head -20 || true
          fi
          
          # APKファイルサイズ確認
          echo ""
          echo "=== APK FILE SIZE ==="
          ls -lh "${{ env.APK_FILE }}"

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APK_FILE }}
          path: ${{ env.APK_FILE }}

      - name: Create Release
        if: github.ref == 'refs/heads/main'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.VERSION }}
          name: 🎛️ ラミオペ・ダッシュボード ${{ env.VERSION }}
          files: ${{ env.APK_FILE }}
          body: |
            # 🎛️ ラミオペ・ダッシュボード ${{ env.VERSION }}
            
            **✨ Ver.2.16 全機能搭載**:
            - ⏰ **時間計算機** - 生産時間・終了時刻予測
            - 🎞️ **フィルムセッション管理** - 消費量シミュレーション  
            - 📋 **ジョブ管理** - リアルタイム進捗追跡
            - 📊 **レポート生成** - 作業効率分析
            - 🌐 **PWA対応** - オフライン動作・ホーム画面追加
            - 🔄 **シームレス更新** - 署名一貫性による上書きインストール
            
            **📥 インストール方法**:
            1. ⬇️ APKファイルをダウンロード
            2. 🔓 Android端末で「不明なソースからのインストール」を許可
            3. 📱 APKファイルをタップしてインストール
            
            **🔧 技術仕様**:
            - **ビルド環境**: Ubuntu Latest + Node.js 20 LTS + Java 22
            - **フレームワーク**: Capacitor + PWA技術
            - **署名方式**: 自動キーストア管理 + 一貫性保証
            - **対応OS**: Android 7.0以上推奨
            
            **Version Info**:
            - Version: ${{ env.VERSION }}
            - Build: ${{ github.sha }}
            - APKタイプ: ${{ env.KEYSTORE_EXISTS == 'true' && 'Release (署名済み)' || 'Debug' }}
            
            ---
            🤖 **自動ビルド**: GitHub Actions (Simple-Reliable-Build)  
            🏗️ **ビルド番号**: ${{ github.run_number }}  
            📅 **ビルド日時**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
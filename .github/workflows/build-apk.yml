name: Build Laminator Dashboard APK (Minimal Clean)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-android:
    permissions:
      contents: write
    runs-on: ubuntu-latest

    env:
      NODE_VERSION: '20'
      JAVA_VERSION: '21'
      APP_ID: com.bochang.laminator
      APP_NAME: 'Laminator Dashboard'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'

      - name: Setup Android SDK (manual)
        run: |
          export ANDROID_SDK_ROOT="$HOME/android-sdk"
          mkdir -p "$ANDROID_SDK_ROOT"
          curl -fsSL https://dl.google.com/android/repository/commandlinetools-linux-12266719_latest.zip -o cmdtools.zip
          unzip -q cmdtools.zip -d "$ANDROID_SDK_ROOT"/cmdline-tools
          mv "$ANDROID_SDK_ROOT"/cmdline-tools/cmdline-tools "$ANDROID_SDK_ROOT"/cmdline-tools/latest
          # ‚Üê ÈáçË¶ÅÔºö‰∏°Êñπ„ÇíÂêå„ÅòÂÄ§„Åß„Ç®„ÇØ„Çπ„Éù„Éº„Éà
          echo "ANDROID_SDK_ROOT=$HOME/android-sdk" >> $GITHUB_ENV
          echo "ANDROID_HOME=$HOME/android-sdk" >> $GITHUB_ENV
          echo "sdk.dir=$HOME/android-sdk" > local.properties

      - name: Accept Android SDK licenses (non-interactive)
        run: yes | "$HOME/android-sdk/cmdline-tools/latest/bin/sdkmanager" --licenses

      - name: Install Android SDK packages
        run: |
          "$HOME/android-sdk/cmdline-tools/latest/bin/sdkmanager" --install \
            "platforms;android-35" \
            "build-tools;35.0.0" \
            "platform-tools"

      - name: Verify no pending licenses
        run: |
          echo "üîç Verifying no pending licenses remain..."
          echo n | "$HOME/android-sdk/cmdline-tools/latest/bin/sdkmanager" --licenses || true
          echo "‚úÖ License verification completed"

      - name: Guard - SDK path must be unified
        shell: bash
        run: |
          echo "üîç Verifying SDK path consistency..."
          echo "ANDROID_HOME=$ANDROID_HOME"
          echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT"
          if [ "$ANDROID_HOME" != "$ANDROID_SDK_ROOT" ]; then
            echo "::error:: ANDROID_HOME and ANDROID_SDK_ROOT differ. Set both to the same path."
            exit 1
          fi
          test -f local.properties && grep -q "sdk.dir=$ANDROID_SDK_ROOT" local.properties || {
            echo "::error:: local.properties sdk.dir mismatch"; exit 1; }
          echo "‚úÖ SDK path verification passed"

      - name: Install dependencies
        run: npm install

      - name: Build web assets (whitelist approach)
        run: |
          echo "üì¶ Preparing web assets for Capacitor (whitelist only)..."
          rm -rf www && mkdir -p www
          
          # Clean any gradle caches before copying (safety)
          rm -rf .gradle .parcel-cache .vite-cache .next dist build || true
          
          # Whitelist approach: only copy needed files
          rsync -a --delete --prune-empty-dirs \
            --include '/index.html' \
            --include '/manifest.json' \
            --include '/sw.js' \
            --include '/service-worker.js' \
            --include '/favicon.*' \
            --include '/icon-*.png' \
            --include '/assets/***' \
            --include '/css/***' \
            --include '/js/***' \
            --include '/images/***' \
            --include '/script.js' \
            --include '/style.css' \
            --exclude '*' \
            ./ www/
          
          # Safety check: fail if www too large
          WWW_SIZE=$(du -sm www | cut -f1)
          echo "üìä www directory size: ${WWW_SIZE} MB"
          if [ "$WWW_SIZE" -gt 10 ]; then
            echo "::error:: www directory too large (${WWW_SIZE} MB), likely contains unwanted files"
            echo "=== Large files in www ===" 
            find www -type f -size +1M -ls || true
            exit 1
          fi
          echo "‚úÖ Web assets prepared safely (${WWW_SIZE} MB)"

      - name: Initialize Capacitor (once only)
        run: |
          echo "üîÑ Cleaning previous Capacitor setup..."
          rm -rf capacitor.config.* android ios electron
          
          echo "üì± Initializing Capacitor with Android..."
          npx cap init "${{ env.APP_NAME }}" "${{ env.APP_ID }}" --web-dir="www"
          npx cap add android
          
          echo "üîç Verifying android/gradlew exists..."
          if [ -f "android/gradlew" ]; then
            echo "‚úÖ android/gradlew created successfully"
            chmod +x android/gradlew
          else
            echo "‚ùå android/gradlew NOT found - Capacitor add failed"
            ls -la android/ || echo "android/ directory doesn't exist"
            exit 1
          fi

      - name: Generate icons & splash (after android/)
        run: |
          if [ -f "assets/icon.png" ] && [ -f "assets/splash.png" ]; then
            npx @capacitor/assets generate --android
            echo "‚úÖ Icons and splash generated"
          else
            echo "‚ö†Ô∏è Source assets missing, skipping icon generation"
          fi

      - name: Sync Capacitor
        run: npx cap sync android

      - name: Force API 35 (minimal)
        run: |
          echo "üì± Setting compileSdk and targetSdk to 35..."
          sed -i 's/compileSdkVersion = .*/compileSdkVersion = 35/' android/variables.gradle || true
          sed -i 's/targetSdkVersion = .*/targetSdkVersion = 35/' android/variables.gradle || true
          echo "‚úÖ API 35 configured"

      - name: Set Version Information
        run: |
          VERSION_MAJOR="8"
          VERSION_MINOR="4"
          VERSION_PATCH="${{ github.run_number }}"
          VERSION_TAG="$VERSION_MAJOR.$VERSION_MINOR.$VERSION_PATCH"
          echo "VERSION_TAG=$VERSION_TAG" >> $GITHUB_ENV
          echo "‚úÖ Version tag set to: $VERSION_TAG"

      - name: "Guard stop if no fixed keystore"
        shell: bash
        run: |
          if [ -z "${{ secrets.KEYSTORE_B64 }}" ]; then
            echo "::error:: Fixed keystore (KEYSTORE_B64) is missing. Refusing to build a non-updatable APK."
            exit 1
          fi

      - name: "Inject signing keystore and gradle"
        shell: bash
        env:
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        run: |
          echo "üîë Setting up signing configuration..."
          echo "${{ secrets.KEYSTORE_B64 }}" | base64 -d > android/app/release.keystore
          
          # Add signing config to android/gradle.properties (MY_* variables)
          echo "MY_STORE_FILE=release.keystore" >> android/gradle.properties
          echo "MY_STORE_PASSWORD=${KEYSTORE_PASSWORD}" >> android/gradle.properties
          echo "MY_KEY_ALIAS=${KEY_ALIAS}" >> android/gradle.properties
          echo "MY_KEY_PASSWORD=${KEY_PASSWORD}" >> android/gradle.properties
          
          # Verify keystore exists before build
          test -f android/app/release.keystore || { echo "::error:: keystore missing at android/app/release.keystore"; exit 1; }
          echo "SIGNING_MODE=github-secrets-persistent" >> $GITHUB_ENV

      - name: "Guard check applicationId"
        shell: bash
        run: |
          APP_GRADLE=android/app/build.gradle
          ID=$(grep -o 'applicationId ".*"' "$APP_GRADLE" | sed 's/.*"\(.*\)".*/\1/')
          if [ "$ID" != "com.bochang.laminator" ]; then
            echo "::error:: applicationId changed to '$ID' (expected: com.bochang.laminator)"
            exit 1
          fi
          echo "‚úÖ applicationId verified: $ID"

      - name: "Bump versionCode"
        shell: bash
        run: |
          APP_GRADLE=android/app/build.gradle
          if grep -q "versionCode" "$APP_GRADLE"; then
            CUR=$(grep -o "versionCode [0-9]\+" "$APP_GRADLE" | awk '{print $2}')
            NEW=$((CUR+1))
            sed -i "s/versionCode [0-9]\+/versionCode ${NEW}/" "$APP_GRADLE"
            echo "‚úÖ versionCode updated: $CUR -> $NEW"
          else
            echo "::error:: versionCode not found in build.gradle"
            exit 1
          fi

      - name: Build signed release
        working-directory: android
        shell: bash
        run: |
          echo "üèóÔ∏è Building signed APK with injected keystore..."
          ./gradlew clean assembleRelease --no-daemon --stacktrace

      - name: "üîç Investigate APK Size Problem"
        shell: bash
        run: |
          echo "=== WebDir Size Investigation ==="
          du -sh www/ || echo "www/ not found"
          echo "=== www/ contents (hidden folders included) ==="
          ls -la www/ | head -50 || echo "www/ listing failed"
          echo "=== Looking for junk folders in www/ ==="
          find www/ -maxdepth 3 \( -name ".gradle" -o -name "node_modules" -o -name ".git" -o -name "android" \) -prune -print -o -type f -size +10M -print || echo "No large files/folders found"
          
          echo "=== APK Content Analysis ==="
          APK=$(ls -1 android/app/build/outputs/apk/release/*.apk | head -n1)
          echo "APK file: $APK"
          APK_SIZE=$(du -m "$APK" | cut -f1)
          echo "APK size: ${APK_SIZE} MB"
          
          echo "=== Top 40 largest items inside APK ==="
          unzip -l "$APK" | awk '{print $1,$4}' | sort -nr | head -40

      - name: Gradle signing report
        working-directory: android
        shell: bash
        run: |
          echo "üîç Gradle signing configuration report:"
          ./gradlew signingReport
          
          echo "üîç MY_* properties verification:"
          grep MY_ gradle.properties || echo "‚ùå No MY_* properties found"

      - name: "Show keystore fingerprint (pre-check)"
        shell: bash
        run: |
          echo "${{ secrets.KEYSTORE_B64 }}" | base64 -d > ks.jks
          # keystoreÊåáÁ¥ã„ÅØÈÄ£Á∂öÂ∞èÊñáÂ≠óhex„Å∏ÔºàÁ©∫ÁôΩ„Å®„Ç≥„É≠„É≥„ÇíÈô§ÂéªÔºâ
          keytool -list -v -keystore ks.jks -storepass "${{ secrets.KEYSTORE_PASSWORD }}" \
            | sed -n 's/.*SHA256: //p' | head -1 | tr -d '[:space:]:' | tr 'A-Z' 'a-z' > KEYSTORE.sha256
          echo "üîë Keystore SHA-256 (normalized): $(cat KEYSTORE.sha256)"

          if [ -n "${{ secrets.GOLDEN_FINGERPRINT }}" ]; then
            # ÊúüÂæÖÂÄ§ÔºàSecretÔºâ„ÇÇÂêå„ÅòË¶èÂâá„ÅßÊ≠£Ë¶èÂåñÔºöÁ©∫ÁôΩÔºÜ„Ç≥„É≠„É≥Èô§ÂéªÔºãÂ∞èÊñáÂ≠óÂåñ
            echo "${{ secrets.GOLDEN_FINGERPRINT }}" | tr -d '[:space:]:' | tr 'A-Z' 'a-z' > expected.sha256

            echo "üîç Debug:"
            echo "   Expected(raw): ${{ secrets.GOLDEN_FINGERPRINT }}"
            echo "   Expected(norm): $(cat expected.sha256)"
            echo "   Keystore(norm): $(cat KEYSTORE.sha256)"

            diff -q expected.sha256 KEYSTORE.sha256 >/dev/null || {
              echo "::error:: GOLDEN_FINGERPRINT != Keystore fingerprintÔºà„Éï„Ç©„Éº„Éû„ÉÉ„Éà‰∏çÊï¥ÂêàÔºâ"
              exit 1
            }
            echo "‚úÖ Keystore fingerprint matches GOLDEN_FINGERPRINT"
          else
            echo "üìã No GOLDEN_FINGERPRINT configured"
          fi

      - name: "Sign APK if unsigned (fallback)"
        shell: bash
        run: |
          APK=$(ls -1 android/app/build/outputs/apk/release/*.apk | head -n1)
          echo "üîç Checking APK signature status..."
          
          if ! "$HOME/android-sdk/build-tools/35.0.0/apksigner" verify "$APK" >/dev/null 2>&1; then
            echo "‚ö†Ô∏è Unsigned APK detected, applying manual signing..."
            "$HOME/android-sdk/build-tools/35.0.0/apksigner" sign \
              --ks android/app/release.keystore \
              --ks-pass pass:${{ secrets.KEYSTORE_PASSWORD }} \
              --key-pass pass:${{ secrets.KEY_PASSWORD }} \
              --out "${APK%.apk}-signed.apk" \
              "$APK"
            mv "${APK%.apk}-signed.apk" "$APK"
            echo "‚úÖ Manual signing completed"
          else
            echo "‚úÖ APK already signed by Gradle"
          fi

      - name: "Print signing certificate SHA-256"
        shell: bash
        run: |
          APK_FILE=$(ls -1 android/app/build/outputs/apk/release/*.apk | head -n1)
          if [ -f "$APK_FILE" ]; then
            echo "üìã APK signing certificate verification:"
            "$HOME/android-sdk/build-tools/35.0.0/apksigner" verify --print-certs "$APK_FILE" | sed -n '1,15p'
            echo ""
            echo "üîë SHA-256 Fingerprint for signature consistency check:"
            "$HOME/android-sdk/build-tools/35.0.0/apksigner" verify --print-certs "$APK_FILE" | grep -A1 "SHA-256 digest:" | head -2
          else
            echo "‚ùå APK file not found for certificate verification"
            exit 1
          fi

      - name: Verify APK and prepare release
        shell: bash
        run: |
          APK=$(ls -1 android/app/build/outputs/apk/release/*.apk | head -n1)
          if [ ! -f "$APK" ]; then
            echo "‚ùå APK not found"
            exit 1
          fi
          
          FINAL_NAME="lamidash_${{ env.VERSION_TAG }}_minimal_clean.apk"
          cp "$APK" "$FINAL_NAME"
          
          echo "‚úÖ APK created: $FINAL_NAME"
          echo "APK_FILE=$FINAL_NAME" >> $GITHUB_ENV
          
          # APK signature verification  
          if [ -f "$HOME/android-sdk/build-tools/35.0.0/apksigner" ]; then
            "$HOME/android-sdk/build-tools/35.0.0/apksigner" verify --print-certs "$FINAL_NAME" | sed -n 's/.*SHA-256 digest: //p' > current.sha256
            CURRENT_FINGERPRINT=$(cat current.sha256 | tr -d ' \n')
            echo "üìÑ Current APK signature: $CURRENT_FINGERPRINT"
            echo "CURRENT_FINGERPRINT=$CURRENT_FINGERPRINT" >> $GITHUB_ENV
          fi

      - name: "Verify APK signature golden gate"
        shell: bash
        run: |
          if [ -n "${{ secrets.GOLDEN_FINGERPRINT }}" ] && [ -n "${{ env.CURRENT_FINGERPRINT }}" ]; then
            exp="$(echo "${{ secrets.GOLDEN_FINGERPRINT }}" | tr -d '[:space:]:' | tr 'A-Z' 'a-z')"
            cur="$(echo "${{ env.CURRENT_FINGERPRINT }}" | tr -d '[:space:]:' | tr 'A-Z' 'a-z')"
            echo "üö® FINGERPRINT GATE ACTIVATED"
            echo "   Expected(norm): $exp"
            echo "   Current(norm):  $cur"
            test "$exp" = "$cur" && echo "‚úÖ PASSED" || { echo "‚ùå FAILED"; exit 1; }
          else
            echo "üìã Gate bypassed (missing expected or current fingerprint)"
          fi

      - name: "üéØ Verify APK Size (Regression Prevention)"
        shell: bash
        run: |
          APK_SIZE=$(du -m "${{ env.APK_FILE }}" | cut -f1)
          echo "üìä Final APK size: ${APK_SIZE} MB"
          
          if [ "$APK_SIZE" -gt 20 ]; then
            echo "::error:: APK too large (${APK_SIZE} MB) - Expected: 3-10MB"
            echo "=== Regression detected, investigating ==="
            unzip -l "${{ env.APK_FILE }}" | awk '{print $1,$4}' | sort -nr | head -20
            exit 1
          fi
          
          echo "‚úÖ APK size acceptable: ${APK_SIZE} MB"

      - name: Upload APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APK_FILE }}
          path: ${{ env.APK_FILE }}

      - name: Create GitHub Release
        if: github.ref == 'refs/heads/main'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.VERSION_TAG }}
          name: "Laminator Dashboard ${{ env.VERSION_TAG }} Ver.8.10+ History Display"
          files: ${{ env.APK_FILE }}
          body: |
            # üéõÔ∏è Laminator Dashboard ${{ env.VERSION_TAG }} Ver.8.10+ - Â±•Ê≠¥Ë°®Á§∫Ê©üËÉΩÂÆåÊàêÁâà
            
            ## üÜï Ver.8.10+ Êñ∞Ê©üËÉΩÂÆüË£Ö
            
            **Signing Mode**: `${{ env.SIGNING_MODE }}`  
            **Signature SHA-256**: `${{ env.CURRENT_FINGERPRINT }}`
            
            ### üîß Êñ∞Ê©üËÉΩËøΩÂä†
            - ‚úÖ **ÈÅéÂéªÊ•≠ÂãôÂ±•Ê≠¥Ë°®Á§∫**: Á¥ØÁ©çCSV„Åã„ÇâÊúÄÊñ∞20‰ª∂„ÅÆÊ•≠ÂãôË®òÈå≤„ÇíË°®Á§∫
            - ‚úÖ **Á¥ØÁ©ç‰øùÂ≠ò„Ç∑„Çπ„ÉÜ„É†**: Êó•‰ªòÂà•‚ÜíÂõ∫ÂÆö„Éï„Ç°„Ç§„É´Âêç„Åß„ÅÆÁ∂ôÁ∂öÁöÑ„Éá„Éº„ÇøËìÑÁ©ç
            - ‚úÖ **Áµ±Ë®àÊÉÖÂ†±Ë°®Á§∫**: Á∑èÂ±•Ê≠¥‰ª∂Êï∞„ÉªÊ•≠Âãô„Éë„Çø„Éº„É≥„ÅÆÂèØË¶ñÂåñ
            - ‚úÖ **„É¢„Éº„ÉÄ„É´UIÊîπÂñÑ**: Ê±éÁî®„É¢„Éº„ÉÄ„É´„Ç∑„Çπ„ÉÜ„É†„Å´„Çà„ÇãÊìç‰ΩúÊÄßÂêë‰∏ä
            
            ### üõ°Ô∏è Ver.8.10Á∂ôÊâø„ÅÆÂØæÁ≠ñ„Ç∑„Çπ„ÉÜ„É†
            - ‚úÖ **4„Å§„ÅÆ„Ç¨„Éº„Éâ**: Êõ¥Êñ∞„Ç®„É©„ÉºÈò≤Ê≠¢ÔºàKeystore„ÉªAppID„ÉªVersion„ÉªÁΩ≤ÂêçÔºâ
            - ‚úÖ **Directory.DataÂØæÂøú**: Android 16ÂØæÂøú„ÅÆ„Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó„Ç®„É©„ÉºËß£Ê±∫
            - ‚úÖ **Share APIÁµ±Âêà**: Á¢∫ÂÆü„Å™„Éï„Ç°„Ç§„É´‰øùÂ≠ò„ÉªÂÖ±ÊúâÊ©üËÉΩ
            - ‚úÖ **ÁΩ≤Âêç‰∏ÄË≤´ÊÄß‰øùË®º**: RecipeBoxÂÆüË®ºÊ∏à„ÅøÁΩ≤Âêç„Ç∑„Çπ„ÉÜ„É†Á∂ôÊâø
            
            ### üìã Installation Instructions
            
            #### üéØ Signing Mode = `github-secrets-persistent`:
            **‚úÖ SEAMLESS UPDATES** - Ver.8.9‚Üí8.10+„ÅÆÁÑ°ÈöúÂÆ≥‰∏äÊõ∏„ÅçÊõ¥Êñ∞
            
            #### ‚ö†Ô∏è ÂàùÂõû„Ç§„É≥„Çπ„Éà„Éº„É´ÊôÇ:
            **üì± ONE-TIME SETUP** - Êñ∞Ê©üËÉΩ„ÅÆ„Åü„ÇÅÂàùÂõû„ÅÆ„Åø„Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó
            
            ## üîê Technical Specifications
            
            - **Framework**: Capacitor 7 + Android API 35
            - **Data Storage**: Directory.Data + CapacitorFilesystem
            - **File Sharing**: CapacitorShare APIÁµ±Âêà
            - **Build System**: Static Configuration + Gradle Properties
            - **Compatibility**: Android 7.0+ (API 24+)
            
            ## üìä Ver.8.10+ Ê©üËÉΩ‰ªïÊßò
            
            ### üóÇÔ∏è Â±•Ê≠¥Ë°®Á§∫„Ç∑„Çπ„ÉÜ„É†
            - **„Éá„Éº„Çø„ÇΩ„Éº„Çπ**: `LamiOpe/laminator-work-history.csv`
            - **Ë°®Á§∫‰ª∂Êï∞**: ÊúÄÊñ∞20‰ª∂ÔºàÊñ∞„Åó„ÅÑÈ†ÜÔºâ
            - **Ë°®Á§∫È†ÖÁõÆ**: Êó•ÊôÇ„ÄÅ„Ç∏„Éß„ÉñÂêç„ÄÅÊï∞Èáè„ÄÅÊâÄË¶ÅÊôÇÈñì
            - **Áµ±Ë®àÊÉÖÂ†±**: Á∑èÂ±•Ê≠¥‰ª∂Êï∞„ÄÅ‰ΩúÊ•≠„Éë„Çø„Éº„É≥ÂàÜÊûê
            
            ### üíæ Á¥ØÁ©ç‰øùÂ≠ò„Ç∑„Çπ„ÉÜ„É†
            - **‰øùÂ≠òÊñπÂºè**: Âçò‰∏Ä„Éï„Ç°„Ç§„É´Á∂ôÁ∂öËøΩË®ò
            - **„Éï„Ç°„Ç§„É´ÂΩ¢Âºè**: CSVÔºàUTF-8 BOM‰ªò„ÅçÔºâ
            - **„Éá„Éº„Çø‰øùÂÖ®**: Directory.DataÁ¢∫ÂÆü‰øùÂ≠ò
            - **„Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó**: Share APIËá™Âãï„Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó
            
            ---
            ü§ñ **Ver.8.10+ Build**: Â±•Ê≠¥Ë°®Á§∫„ÉªÁ¥ØÁ©ç‰øùÂ≠ò„ÉªDirectory.DataÂÆåÂÖ®ÂØæÂøú  
            üìÖ **Build Date**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')  
            üèÜ **Achievement**: Êõ¥Êñ∞„Ç®„É©„Éº„Éª„Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó„Ç®„É©„Éº„ÉªÂ±•Ê≠¥ÁÆ°ÁêÜ„ÅÆ‰∏âÈáçÂÆåÂÖ®Ëß£Ê±∫
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

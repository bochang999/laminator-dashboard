name: Build Laminator Dashboard APK (Ephemeral Capacitor)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-android:
    permissions:
      contents: write
    runs-on: ubuntu-latest

    env:
      NODE_VERSION: '20'
      JAVA_VERSION: '21'          # Capacitor 7 requires JDK 21
      APP_ID: com.bochang.laminator
      APP_NAME: 'Laminator Dashboard'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Setup Android SDK Build Tools Path
        run: |
          echo "Setting up Android SDK Build Tools path..."
          BUILD_TOOLS_PATH=$(find $ANDROID_HOME/build-tools -maxdepth 1 | sort -r | head -n 1)
          echo "Found Build Tools at: $BUILD_TOOLS_PATH"
          echo "$BUILD_TOOLS_PATH" >> $GITHUB_PATH
          echo "✅ Android SDK Build-Tools added to PATH."

      - name: Accept Android licenses
        run: yes | sdkmanager --licenses >/dev/null

      - name: Install API 35 components
        run: |
          echo "📱 Installing Android SDK API 35 for Capacitor 7..."
          sdkmanager "platforms;android-35" "build-tools;35.0.0"
          echo "✅ Android SDK components installed successfully"

      - name: Install dependencies
        run: npm install

      - name: Generate App Icons and Splash Screen
        run: npx @capacitor/assets generate --android

      - name: Detect webDir (robust)
        id: detect
        run: |
          echo "🔍 Detecting webDir location with robust method..."
          for d in dist build www public; do
            if [ -f "$d/index.html" ]; then
              echo "✅ Found index.html in: $d"
              echo "webdir=$d" >> $GITHUB_OUTPUT
              exit 0
            fi
          done
          # If found in current directory, use "www" as webDir name
          if [ -f "./index.html" ]; then
            echo "✅ Found index.html in current directory, using 'www' as webDir"
            mkdir -p www
            cp -r *.html *.css *.js *.json *.png *.ico assets/ www/ 2>/dev/null || true
            echo "webdir=www" >> $GITHUB_OUTPUT
            exit 0
          fi
          echo "::error::index.html not found in any expected directory"
          exit 1

      - name: Clean Capacitor Setup (Ephemeral Init)
        run: |
          echo "🧹 Ensuring clean Capacitor initialization state..."
          rm -rf capacitor.config.* android ios electron
          echo "✅ Previous Capacitor artifacts removed"

      - name: Initialize Capacitor (Fresh Start)
        run: |
          echo "⚡ Fresh Capacitor initialization without config conflicts..."
          echo "📂 Using webDir: ${{ steps.detect.outputs.webdir }}"
          
          # Initialize Capacitor with detected webDir
          npx cap init "${{ env.APP_NAME }}" "${{ env.APP_ID }}" --web-dir="${{ steps.detect.outputs.webdir }}"
          
          echo "🔧 Adding Android platform..."
          npx cap add android
          
          echo "✅ Capacitor initialization completed successfully"

      - name: Clean Development Files Before Sync
        run: |
          echo "🧹 Cleaning development files to reduce APK size..."
          # 一時的に不要ファイルを移動
          mkdir -p .temp_backup
          mv new_icon.png .temp_backup/ 2>/dev/null || true
          mv icon_transparent.png .temp_backup/ 2>/dev/null || true
          mv old_icon_backup.png .temp_backup/ 2>/dev/null || true
          mv package-lock.json .temp_backup/ 2>/dev/null || true
          mv simple_bg_removal.py .temp_backup/ 2>/dev/null || true
          mv process_new_icon.sh .temp_backup/ 2>/dev/null || true
          mv icons/ .temp_backup/ 2>/dev/null || true
          mv devlog.md .temp_backup/ 2>/dev/null || true
          mv spec.md .temp_backup/ 2>/dev/null || true
          mv tasks.md .temp_backup/ 2>/dev/null || true
          mv requirements.md .temp_backup/ 2>/dev/null || true
          echo "✅ Development files temporarily moved"

      - name: Sync Capacitor (Optimized)
        run: |
          echo "⚡ Syncing Capacitor with reduced file set..."
          npx cap sync android
          echo "✅ Capacitor sync completed with optimized assets"

      - name: Configure Build Gradle for Command-line Version Injection
        run: |
          echo "🔧 Configuring build.gradle for command-line version injection..."
          
          # build.gradleを恒久的に修正（一度だけ実行する必要がある）
          if [ -f android/app/build.gradle ]; then
            echo "📝 Updating build.gradle to support -P parameter injection..."
            
            # versionCodeとversionNameをコマンドライン注入対応に変更
            sed -i 's/versionCode .*/versionCode project.hasProperty('\''android.injected.versionCode'\'') ? project.property('\''android.injected.versionCode'\'').toInteger() : 1/' android/app/build.gradle
            sed -i 's/versionName .*/versionName project.hasProperty('\''android.injected.versionName'\'') ? project.property('\''android.injected.versionName'\'') : "1.0"/' android/app/build.gradle
            
            echo "✅ build.gradle configured for command-line version injection"
          else
            echo "⚠️ build.gradle not found, skipping configuration"
          fi

      - name: Configure Android API 35 Settings
        run: |
          echo "📱 Configuring Android for API 35 (VANILLA_ICE_CREAM)..."
          
          # variables.gradle でAPI 35設定
          if [ -f android/variables.gradle ]; then
            echo "🔧 Updating variables.gradle for API 35..."
            cat > android/variables.gradle <<'EOF'
          ext {
              minSdkVersion = 24
              compileSdkVersion = 35
              targetSdkVersion = 35
              androidxActivityVersion = '1.9.2'
              androidxAppCompatVersion = '1.7.0'
              androidxCoordinatorLayoutVersion = '1.2.0'
              androidxCoreVersion = '1.15.0'
              androidxFragmentVersion = '1.8.4'
              coreSplashScreenVersion = '1.0.1'
              androidxWebkitVersion = '1.12.1'
              junitVersion = '4.13.2'
              androidxJunitVersion = '1.2.1'
              androidxEspressoCoreVersion = '3.6.1'
              cordovaAndroidVersion = '10.1.1'
          }
          EOF
            echo "✅ variables.gradle configured for API 35"
          fi
          
          # build.gradle の Android Gradle Plugin バージョン設定
          if [ -f android/build.gradle ]; then
            echo "🔧 Configuring AGP version for API 35 compatibility..."
            sed -i "s/id 'com.android.application' version '[^']*'/id 'com.android.application' version '8.5.2'/" android/build.gradle
            sed -i "s/id 'com.android.library' version '[^']*'/id 'com.android.library' version '8.5.2'/" android/build.gradle
            echo "✅ AGP configured for API 35 compatibility"
          fi

      - name: Set Version Information
        run: |
          echo "📋 Setting version information for build..."
          VERSION_MAJOR="2"
          VERSION_MINOR="16"
          VERSION_PATCH="${{ github.run_number }}"
          VERSION_TAG="$VERSION_MAJOR.$VERSION_MINOR.$VERSION_PATCH"
          echo "VERSION_TAG=$VERSION_TAG" >> $GITHUB_ENV
          echo "✅ Version tag set to: $VERSION_TAG"

      - name: Pre-Build Cleanup
        run: |
          echo "🧹 Pre-build cleanup..."
          cd android
          ./gradlew clean || echo "Clean skipped (first run)"
          cd ..

      - name: Apply Golden Gradle Template
        run: |
          echo "🏆 Applying golden build.gradle template..."
          mkdir -p .github/templates || true
          cp .github/templates/build.gradle.template android/app/build.gradle
          echo "✅ Golden template applied successfully."

      - name: Build Base APK
        run: |
          echo "🏗️ Building base APK for icon processing..."
          cd android
          chmod +x gradlew
          
          echo "🔨 Starting Gradle build with version injection..."
          ./gradlew clean assembleRelease \
            -Pandroid.injected.versionName="${{ env.VERSION_TAG }}" \
            -Pandroid.injected.versionCode="${{ github.run_number }}" \
            --no-daemon --stacktrace || ./gradlew assembleDebug --no-daemon --stacktrace
          
          # Base APK確認
          if [ -f "app/build/outputs/apk/release/app-release.apk" ]; then
              echo "✅ Release APK created successfully"
              BASE_APK="app/build/outputs/apk/release/app-release.apk"
              BUILD_TYPE="release"
          elif [ -f "app/build/outputs/apk/debug/app-debug.apk" ]; then
              echo "✅ Debug APK created successfully"
              BASE_APK="app/build/outputs/apk/debug/app-debug.apk"
              BUILD_TYPE="debug"
          else
              echo "❌ No APK found"
              exit 1
          fi
          
          echo "BASE_APK=$BASE_APK" >> $GITHUB_ENV
          echo "BUILD_TYPE=$BUILD_TYPE" >> $GITHUB_ENV
          cd ..

      - name: Advanced APK Icon Processing (RecipeBox Method)
        run: |
          echo "🎨 Advanced APK icon processing using RecipeBox proven method..."
          
          # アイコンファイルの確認
          if [ ! -f "icon_transparent.png" ]; then
              echo "⚠️ Transparent icon not found, using standard icons"
              CUSTOM_ICON="icon-512.png"
          else
              echo "✅ Using transparent icon: icon_transparent.png"
              CUSTOM_ICON="icon_transparent.png"
          fi
          
          # APKの展開
          echo "📂 Extracting APK for icon replacement..."
          mkdir -p $RUNNER_TEMP/apk_extract
          cd $RUNNER_TEMP/apk_extract
          unzip -q "$GITHUB_WORKSPACE/android/${{ env.BASE_APK }}"
          
          # アイコン置換 (RecipeBox実証済み方式)
          echo "🔄 Replacing icons with beautiful gradient design..."
          for dir in res/mipmap-*; do
              if [ -d "$dir" ]; then
                  echo "Processing $dir..."
                  cp "$GITHUB_WORKSPACE/$CUSTOM_ICON" "$dir/ic_launcher.png" 2>/dev/null || true
                  cp "$GITHUB_WORKSPACE/$CUSTOM_ICON" "$dir/ic_launcher_round.png" 2>/dev/null || true
                  cp "$GITHUB_WORKSPACE/$CUSTOM_ICON" "$dir/ic_launcher_foreground.png" 2>/dev/null || true
                  cp "$GITHUB_WORKSPACE/$CUSTOM_ICON" "$dir/ic_launcher_monochrome.png" 2>/dev/null || true
              fi
          done
          
          # 署名削除
          echo "🗑️ Removing old signatures..."
          rm -rf META-INF
          
          # 無圧縮再パック (RecipeBox Critical Success Factor)
          echo "📦 Re-packing APK with uncompressed method (CRC preservation)..."
          echo "🔍🔍🔍 Diagnosing contents before re-packing..."
          pwd
          ls -lAR
          echo "--- Diagnostic complete. Proceeding to zip. ---"
          zip -r -0 $RUNNER_TEMP/modified.apk .
          
          # APK診断 (RecipeBox品質保証)
          echo "🔍 AAPT diagnostic check..."
          if aapt2 dump badging $RUNNER_TEMP/modified.apk > $RUNNER_TEMP/aapt_output.txt 2>&1; then
              echo "✅ APK structure valid"
              cat $RUNNER_TEMP/aapt_output.txt | head -5
          else
              echo "⚠️ APK structure issues detected"
              cat $RUNNER_TEMP/aapt_output.txt || true
          fi
          
          # zipalign
          echo "🔧 Applying zipalign..."
          zipalign -p -f 4 $RUNNER_TEMP/modified.apk $RUNNER_TEMP/aligned.apk
          
          echo "MODIFIED_APK=$RUNNER_TEMP/aligned.apk" >> $GITHUB_ENV

      - name: Sign Modified APK
        env:
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        run: |
          echo "🔐 Signing modified APK with production keystore..."
          
          # キーストア復元
          echo "$KEYSTORE_BASE64" | base64 -d > $RUNNER_TEMP/release.keystore
          
          # APK署名 (v1+v2+v3 multi-signing for compatibility)
          echo "✍️ Applying production signature..."
          apksigner sign \
            --ks $RUNNER_TEMP/release.keystore \
            --ks-pass pass:"$KEYSTORE_PASSWORD" \
            --key-pass pass:"$KEY_PASSWORD" \
            --ks-key-alias "$KEY_ALIAS" \
            --v1-signing-enabled true \
            --v2-signing-enabled true \
            --v3-signing-enabled true \
            --out $RUNNER_TEMP/final.apk \
            ${{ env.MODIFIED_APK }}
          
          # 署名確認
          echo "🔍 Verifying APK signature..."
          apksigner verify $RUNNER_TEMP/final.apk
          
          if [ $? -eq 0 ]; then
              echo "✅ APK signature verified successfully"
              
              # 最終APKファイル名
              FINAL_NAME="lamidash_${{ env.VERSION_TAG }}_icon-updated.apk"
              cp $RUNNER_TEMP/final.apk "./$FINAL_NAME"
              
              echo "🎉 Icon-updated APK created: $FINAL_NAME"
              echo "📊 Final APK Information:"
              ls -lh "$FINAL_NAME"
              
              echo "APK_FILE=$FINAL_NAME" >> $GITHUB_ENV
          else
              echo "❌ APK signature verification failed"
              exit 1
          fi

      - name: Upload APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APK_FILE }}
          path: ${{ env.APK_FILE }}

      - name: Create GitHub Release
        if: github.ref == 'refs/heads/main'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.VERSION_TAG }}
          name: Laminator Dashboard ${{ env.VERSION_TAG }}
          files: ${{ env.APK_FILE }}
          body: |
            # 🎛️ Laminator Dashboard ${{ env.VERSION_TAG }}
            
            **✨ Production-Ready Signed Release** - Complete APK Signing Implementation
            
            ## 📥 Installation Instructions
            1. ⬇️ Download the APK file
            2. 🔓 Enable "Install from Unknown Sources" on your Android device  
            3. 📱 Tap the APK file to install
            4. 🔄 **Seamless Updates**: Future versions will update without reinstalling
            
            ## ✨ Ver.2.16 Complete Features
            - ⏰ **Time Calculator** - Production time and completion prediction
            - 🎞️ **Film Session Management** - Consumption simulation  
            - 📋 **Job Management** - Real-time progress tracking
            - 📊 **Report Generation** - Work efficiency analysis
            - 🌐 **PWA Support** - Offline operation and home screen installation
            - 🔐 **Production Signed** - Professional app deployment
            
            ## 🔧 Technical Specifications
            - **Build Environment**: Node.js ${{ env.NODE_VERSION }} + Java ${{ env.JAVA_VERSION }}
            - **Framework**: Capacitor 7 + Android API 35 (VANILLA_ICE_CREAM)
            - **Build Method**: Ephemeral Capacitor + Production Signing
            - **APK Type**: ${{ env.BUILD_TYPE == 'production' && '🔐 Production Signed' || '🔧 Debug Build' }}
            - **Compatibility**: Android 7.0+ recommended
            
            ## 🎯 Breakthrough Achievements
            - ✅ **Production Signing System**: Complete keystore-based signing implementation
            - ✅ **Seamless Update Support**: Signature consistency ensures smooth app updates
            - ✅ **Professional Deployment**: Ready for app store or enterprise distribution
            - ✅ **Ephemeral Capacitor Success**: Clean CI build without repository pollution
            - ✅ **API 35 Full Support**: Latest Android compatibility
            
            ## 📈 Build Information
            - **Version**: ${{ env.VERSION_TAG }}
            - **Build Number**: ${{ github.run_number }}
            - **Build Type**: ${{ env.BUILD_TYPE }}
            - **Signing Status**: ${{ env.BUILD_TYPE == 'production' && '🔐 Production Keystore' || '🔧 Debug Keystore' }}
            - **Commit**: ${{ github.sha }}
            
            ---
            🤖 **Auto Build**: GitHub Actions (Ephemeral-Capacitor-Production)  
            📅 **Build Date**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')  
            🏆 **Milestone**: Complete APK Signing Implementation
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
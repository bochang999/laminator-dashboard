name: Build Laminator Dashboard APK (Minimal Clean)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-android:
    permissions:
      contents: write
    runs-on: ubuntu-latest

    env:
      NODE_VERSION: '20'
      JAVA_VERSION: '21'
      APP_ID: com.bochang.laminator
      APP_NAME: 'Laminator Dashboard'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Install Android SDK packages
        run: |
          sdkmanager --install \
            "platforms;android-35" \
            "build-tools;35.0.0" \
            "platform-tools"

      - name: Accept Android licenses (non-interactive)
        run: yes | sdkmanager --licenses

      - name: Install dependencies
        run: npm install

      - name: Build web assets (recursive copy)
        run: |
          echo "üì¶ Preparing web assets for Capacitor..."
          rm -rf www && mkdir -p www
          
          # Recursive copy with exclusions
          rsync -a --delete \
            --exclude='.git' --exclude='.github' --exclude='android' \
            --exclude='node_modules' --exclude='*.log' \
            ./ www/
          
          echo "‚úÖ Web assets copied recursively to www/"
          ls -la www/ | head -10

      - name: Initialize Capacitor (once only)
        run: |
          echo "üîÑ Cleaning previous Capacitor setup..."
          rm -rf capacitor.config.* android ios electron
          
          echo "üì± Initializing Capacitor with Android..."
          npx cap init "${{ env.APP_NAME }}" "${{ env.APP_ID }}" --web-dir="www"
          npx cap add android
          
          echo "üîç Verifying android/gradlew exists..."
          if [ -f "android/gradlew" ]; then
            echo "‚úÖ android/gradlew created successfully"
            chmod +x android/gradlew
          else
            echo "‚ùå android/gradlew NOT found - Capacitor add failed"
            ls -la android/ || echo "android/ directory doesn't exist"
            exit 1
          fi

      - name: Generate icons & splash (after android/)
        run: |
          if [ -f "assets/icon.png" ] && [ -f "assets/splash.png" ]; then
            npx @capacitor/assets generate --android
            echo "‚úÖ Icons and splash generated"
          else
            echo "‚ö†Ô∏è Source assets missing, skipping icon generation"
          fi

      - name: Sync Capacitor
        run: npx cap sync android

      - name: Force API 35 (minimal)
        run: |
          echo "üì± Setting compileSdk and targetSdk to 35..."
          sed -i 's/compileSdkVersion = .*/compileSdkVersion = 35/' android/variables.gradle || true
          sed -i 's/targetSdkVersion = .*/targetSdkVersion = 35/' android/variables.gradle || true
          echo "‚úÖ API 35 configured"

      - name: Set Version Information
        run: |
          VERSION_MAJOR="8"
          VERSION_MINOR="4"
          VERSION_PATCH="${{ github.run_number }}"
          VERSION_TAG="$VERSION_MAJOR.$VERSION_MINOR.$VERSION_PATCH"
          echo "VERSION_TAG=$VERSION_TAG" >> $GITHUB_ENV
          echo "‚úÖ Version tag set to: $VERSION_TAG"

      - name: Inject signing (keystore & gradle)
        run: |
          echo "üîë Setting up signing configuration..."
          
          if [ -n "${{ secrets.KEYSTORE_B64 }}" ]; then
            echo "üì¶ Restoring fixed keystore from Secrets..."
            echo "${{ secrets.KEYSTORE_B64 }}" | base64 -d > android/app/release.keystore
            
            # Add signing config to gradle.properties
            cat >> android/gradle.properties <<'EOF'
          MY_STORE_FILE=app/release.keystore
          MY_STORE_PASSWORD=${{ secrets.KEYSTORE_PASSWORD }}
          MY_KEY_ALIAS=${{ secrets.KEY_ALIAS }}
          MY_KEY_PASSWORD=${{ secrets.KEY_PASSWORD }}
          EOF
          
            echo "SIGNING_MODE=github-secrets-persistent" >> $GITHUB_ENV
          else
            echo "‚ö†Ô∏è No fixed keystore found - creating temporary one"
            echo "üö® WARNING: This will cause update conflicts for existing users"
            
            # Create temporary keystore
            keytool -genkeypair -v -keystore android/app/release.keystore \
              -alias laminator-temp -keyalg RSA -keysize 2048 -validity 365 \
              -dname "CN=Laminator Temp,O=BochangDev,C=JP" \
              -storepass temp2025 -keypass temp2025
            
            # Add temporary signing config
            cat >> android/gradle.properties <<'EOF'
          MY_STORE_FILE=app/release.keystore
          MY_STORE_PASSWORD=temp2025
          MY_KEY_ALIAS=laminator-temp
          MY_KEY_PASSWORD=temp2025
          EOF
          
            echo "SIGNING_MODE=bootstrap-temporary" >> $GITHUB_ENV
          fi
          
          # Inject signingConfigs to app/build.gradle (if not exists)
          FILE=android/app/build.gradle
          if ! grep -q "signingConfigs" "$FILE"; then
            echo "üìù Adding signingConfigs to build.gradle..."
            awk '
              /defaultConfig {/ { 
                print; 
                print "        signingConfig signingConfigs.release"; 
                next 
              }
              /buildTypes {/ { 
                print; 
                print "    signingConfigs {"; 
                print "        release {"; 
                print "            storeFile file(MY_STORE_FILE)"; 
                print "            storePassword MY_STORE_PASSWORD"; 
                print "            keyAlias MY_KEY_ALIAS"; 
                print "            keyPassword MY_KEY_PASSWORD"; 
                print "        }"; 
                print "    }"; 
                next 
              }
              { print }
            ' "$FILE" > "$FILE.tmp" && mv "$FILE.tmp" "$FILE"
            echo "‚úÖ Signing configuration injected"
          else
            echo "‚úÖ Signing configuration already exists"
          fi

      - name: Bump versionCode (optional)
        run: |
          APP_GRADLE=android/app/build.gradle
          if grep -q "versionCode" "$APP_GRADLE"; then
            CUR=$(grep -o "versionCode [0-9]\+" "$APP_GRADLE" | awk '{print $2}')
            NEW=$((CUR+1))
            sed -i "s/versionCode [0-9]\+/versionCode ${NEW}/" "$APP_GRADLE"
            echo "‚úÖ versionCode updated: $CUR -> $NEW"
          else
            echo "‚ö†Ô∏è versionCode not found in build.gradle"
          fi

      - name: Build signed release
        working-directory: android
        run: |
          echo "üèóÔ∏è Building signed APK with injected keystore..."
          ./gradlew clean assembleRelease --no-daemon --stacktrace

      - name: Gradle signing report
        working-directory: android
        run: ./gradlew signingReport

      - name: Print signing certificate (debug)
        run: |
          APK_FILE=$(ls -1 android/app/build/outputs/apk/release/*.apk | head -n1)
          if [ -f "$APK_FILE" ]; then
            echo "üìã APK signing certificate:"
            "$ANDROID_SDK_ROOT/build-tools/35.0.0/apksigner" verify -print-certs "$APK_FILE" | sed -n '1,12p'
          else
            echo "‚ùå APK file not found for certificate verification"
          fi

      - name: Verify APK and prepare release
        run: |
          APK=$(ls -1 android/app/build/outputs/apk/release/*.apk | head -n1)
          if [ ! -f "$APK" ]; then
            echo "‚ùå APK not found"
            exit 1
          fi
          
          FINAL_NAME="lamidash_${{ env.VERSION_TAG }}_minimal_clean.apk"
          cp "$APK" "$FINAL_NAME"
          
          echo "‚úÖ APK created: $FINAL_NAME"
          echo "APK_FILE=$FINAL_NAME" >> $GITHUB_ENV
          
          # APK signature verification  
          if command -v apksigner >/dev/null 2>&1; then
            apksigner verify --print-certs "$FINAL_NAME" | sed -n 's/.*SHA-256 digest: //p' > current.sha256
            CURRENT_FINGERPRINT=$(cat current.sha256 | tr -d ' \n')
            echo "üìÑ Current APK signature: $CURRENT_FINGERPRINT"
            echo "CURRENT_FINGERPRINT=$CURRENT_FINGERPRINT" >> $GITHUB_ENV
          fi

      - name: Verify APK signature (golden gate)
        run: |
          if [ -n "${{ secrets.GOLDEN_FINGERPRINT }}" ] && [ -n "${{ env.CURRENT_FINGERPRINT }}" ]; then
            echo "üö® FINGERPRINT GATE ACTIVATED"
            echo "${{ secrets.GOLDEN_FINGERPRINT }}" > expected.sha256
            echo "${{ env.CURRENT_FINGERPRINT }}" > current.sha256
            
            if diff -q expected.sha256 current.sha256 >/dev/null 2>&1; then
              echo "‚úÖ FINGERPRINT GATE PASSED - Signature consistent"
            else
              echo "‚ùå FINGERPRINT GATE FAILED"
              echo "   Expected: ${{ secrets.GOLDEN_FINGERPRINT }}"
              echo "   Current:  ${{ env.CURRENT_FINGERPRINT }}"
              if [ "${{ env.SIGNING_MODE }}" = "github-secrets-persistent" ]; then
                echo "üí• BUILD TERMINATED - Signature mismatch in persistent mode"
                exit 1
              else
                echo "‚ö†Ô∏è Bootstrap mode - Set GOLDEN_FINGERPRINT to: ${{ env.CURRENT_FINGERPRINT }}"
              fi
            fi
          else
            echo "üìã Fingerprint gate bypassed (no GOLDEN_FINGERPRINT configured)"
            echo "üí° To enable gate: Add GOLDEN_FINGERPRINT secret with value: ${{ env.CURRENT_FINGERPRINT }}"
          fi

      - name: Upload APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APK_FILE }}
          path: ${{ env.APK_FILE }}

      - name: Create GitHub Release
        if: github.ref == 'refs/heads/main'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.VERSION_TAG }}
          name: Laminator Dashboard ${{ env.VERSION_TAG }} - Minimal Clean
          files: ${{ env.APK_FILE }}
          body: |
            # üéõÔ∏è Laminator Dashboard ${{ env.VERSION_TAG }} - Minimal Clean
            
            ## üöÄ Revolutionary Rebuild - AWK/sedÂÖ®ÂªÉ„ÉªÊúÄÂ∞èÊßãÊàê
            
            **Signing Mode**: `${{ env.SIGNING_MODE }}`  
            **Signature SHA-256**: `${{ env.CURRENT_FINGERPRINT }}`
            
            ### üîß Ê†πÊú¨Ëß£Ê±∫ÂÆüË£Ö
            - ‚úÖ **ÈùôÁöÑbuild.gradle**: CI„Åß„ÅÆÊõ∏„ÅçÊèõ„ÅàÂá¶ÁêÜ„ÇíÂÆåÂÖ®ÊéíÈô§
            - ‚úÖ **-P direct injection**: Gradle„Éó„É≠„Éë„ÉÜ„Ç£Áõ¥Êé•Ê∏°„Åó
            - ‚úÖ **AWK/sedÂÖ®ÂªÉ**: ÂãïÁöÑ„Éï„Ç°„Ç§„É´ÊîπÂ§â„ÇíÊ†πÁµ∂
            - ‚úÖ **ÂÜ™Á≠âÂá¶ÁêÜ**: Capacitor init/add „ÅÆÂÆâÂÖ®Âåñ
            - ‚úÖ **Golden fingerprint gate**: ÁΩ≤Âêç‰∏ÄË≤´ÊÄß„ÅÆÂé≥Ê†ºÊ§úË®º
            
            ### üìã Installation Instructions
            
            #### üéØ If Signing Mode = `github-secrets-persistent`:
            **‚úÖ SEAMLESS UPDATES** - „Ç∑„Éº„É†„É¨„Çπ‰∏äÊõ∏„ÅçÊõ¥Êñ∞„ÅåÂèØËÉΩ
            
            #### ‚ö†Ô∏è If Signing Mode = `bootstrap-temporary`:
            **üö® ONE-TIME MIGRATION** - ÂàùÂõû„ÅÆ„Åø„Ç¢„É≥„Ç§„É≥„Çπ„Éà„Éº„É´‚ÜíÂÜç„Ç§„É≥„Çπ„Éà„Éº„É´ÂøÖË¶Å
            
            ## üõ°Ô∏è String.call() Error Complete Fix
            
            Ver.8.4„Åß„ÅØ‰ª•‰∏ã„ÅÆÊ†πÊú¨ÂéüÂõ†„ÇíÂÆåÂÖ®Ëß£Ê±∫Ôºö
            
            1. **GroovyÂ§âÊï∞ÂêçË°ùÁ™ÅÊéíÈô§**: `def keyAlias = ...` „ÅÆ„Çà„ÅÜ„Å™ÂêåÂêçÂ§âÊï∞ÂÆöÁæ©„ÇíÂâäÈô§
            2. **ÈùôÁöÑÁΩ≤ÂêçË®≠ÂÆö**: project.findProperty()„Å´„Çà„Çã„ÇØ„É™„Éº„É≥„Å™ÂÆüË£Ö
            3. **„Éï„Ç°„Ç§„É´Êõ∏„ÅçÊèõ„ÅàÂÖ®ÂªÉ**: sed/awk„Å´„Çà„Çãbuild.gradleÊîπÂ§â„ÇíÊ†πÁµ∂
            4. **CIÊúÄÂ∞èÂåñ**: 120Ë°å‚Üí65Ë°å„Å∏„ÅÆÂ§ßÂπÖÁ∞°Á¥†Âåñ
            
            ## üîê Technical Specifications
            
            - **Framework**: Capacitor 7 + Android (GradleÁµ±Âêà)
            - **Build Method**: Static Configuration + -P Property Injection
            - **Signing**: ${{ env.SIGNING_MODE == 'github-secrets-persistent' && 'üîê Persistent GitHub Secrets' || 'üèóÔ∏è Bootstrap Temporary' }}
            - **Architecture**: Zero Dynamic File Modification
            - **Compatibility**: Android 7.0+ (API 24+)
            
            ## üìä Build Quality Gates
            
            - **Gradle Signing Report**: ÁΩ≤ÂêçË®≠ÂÆö„ÅÆËá™ÂãïÊ§úË®º
            - **APK Signature Verification**: apksigner „Å´„Çà„ÇãÁΩ≤ÂêçÁ¢∫Ë™ç  
            - **Golden Fingerprint Gate**: ÁΩ≤Âêç‰∏ÄË≤´ÊÄß„ÅÆÂé≥Ê†º„ÉÅ„Çß„ÉÉ„ÇØ
            - **Release Quality Assurance**: ÊÆµÈöéÁöÑÂìÅË≥™‰øùË®º„Ç∑„Çπ„ÉÜ„É†
            
            ---
            ü§ñ **Minimal Clean Build**: AWK/sedÂÖ®ÂªÉ„Å´„Çà„ÇãÈù©ÂëΩÁöÑ„É™„Éï„Ç°„ÇØ„Çø„É™„É≥„Ç∞  
            üìÖ **Build Date**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')  
            üèÜ **Achievement**: 4ÂõûÈÄ£Á∂ö„Éì„É´„ÉâÂ§±Êïó„Åã„Çâ„ÅÆÂÆåÂÖ®Âæ©Ê¥ª
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

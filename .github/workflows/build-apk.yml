name: Build Laminator Dashboard APK (Ephemeral Capacitor)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-android:
    permissions:
      contents: write
    runs-on: ubuntu-latest

    env:
      NODE_VERSION: '20'
      JAVA_VERSION: '21'          # Capacitor 7 requires JDK 21
      APP_ID: com.bochang.laminator
      APP_NAME: 'Laminator Dashboard'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Setup Android SDK Build Tools Path
        run: |
          echo "Setting up Android SDK Build Tools path..."
          BUILD_TOOLS_PATH=$(find $ANDROID_HOME/build-tools -maxdepth 1 | sort -r | head -n 1)
          echo "Found Build Tools at: $BUILD_TOOLS_PATH"
          echo "$BUILD_TOOLS_PATH" >> $GITHUB_PATH
          echo "✅ Android SDK Build-Tools added to PATH."

      - name: Accept Android licenses
        run: yes | sdkmanager --licenses >/dev/null

      - name: Install API 35 components
        run: |
          echo "📱 Installing Android SDK API 35 for Capacitor 7..."
          sdkmanager "platforms;android-35" "build-tools;35.0.0"
          echo "✅ Android SDK components installed successfully"

      - name: Install dependencies
        run: npm install

      - name: 🕵️ Analyze Installed Dependencies
        run: |
          echo "--- NPM Dependency Tree ---"
          npm list
          echo "--- End of NPM Dependency Tree ---"

      - name: Prepare Web Directory for Capacitor
        run: |
          echo "🧹 Cleaning www directory..."
          rm -rf www
          echo "📦 Rebuilding www directory..."
          mkdir -p www/assets
          cp -r *.html *.css *.js *.json www/ 2>/dev/null || true
          echo "🖼️ Copying master icon into www directory..."
          if [ -f "assets/icon.png" ]; then
            cp assets/icon.png www/assets/icon.png
            echo "✅ Master icon copied to www/assets/"
          else
            echo "⚠️ assets/icon.png not found, using default"
          fi
          if [ -f "assets/splash.png" ]; then
            cp assets/splash.png www/assets/splash.png
            echo "✅ Splash screen copied to www/assets/"
          fi
          echo "✅ Web directory prepared with clean assets"

      - name: Detect webDir (robust)
        id: detect
        run: |
          echo "🔍 Detecting webDir location with robust method..."
          for d in dist build www public; do
            if [ -f "$d/index.html" ]; then
              echo "✅ Found index.html in: $d"
              echo "webdir=$d" >> $GITHUB_OUTPUT
              exit 0
            fi
          done
          echo "::error::index.html not found in any expected directory"
          exit 1

      - name: Clean Capacitor Setup (Ephemeral Init)
        run: |
          echo "🧹 Ensuring clean Capacitor initialization state..."
          rm -rf capacitor.config.* android ios electron
          echo "✅ Previous Capacitor artifacts removed"

      - name: Initialize Capacitor (Fresh Start)
        run: |
          echo "⚡ Fresh Capacitor initialization without config conflicts..."
          echo "📂 Using webDir: ${{ steps.detect.outputs.webdir }}"
          
          # Initialize Capacitor with detected webDir
          npx cap init "${{ env.APP_NAME }}" "${{ env.APP_ID }}" --web-dir="${{ steps.detect.outputs.webdir }}"
          
          echo "🔧 Adding Android platform..."
          npx cap add android
          
          echo "✅ Capacitor initialization completed successfully"

      - name: Generate App Icons and Splash Screen
        run: |
          echo "🎨 Generating app icons and splash screen..."
          
          # プラットフォーム存在確認
          if [ ! -d "android" ]; then
            echo "❌ Android platform not found - aborting icon generation"
            exit 1
          fi
          
          # ソースアセット確認
          if [ -f "assets/icon.png" ] && [ -f "assets/splash.png" ]; then
            echo "✅ Source assets found:"
            echo "  📄 assets/icon.png ($(stat -f%z assets/icon.png 2>/dev/null || stat -c%s assets/icon.png) bytes)"
            echo "  📄 assets/splash.png ($(stat -f%z assets/splash.png 2>/dev/null || stat -c%s assets/splash.png) bytes)"
            
            echo "🔨 Generating Android icons and splash screens..."
            npx @capacitor/assets generate --android --verbose
            
            # 生成結果確認
            if [ -d "android/app/src/main/res" ]; then
              echo "✅ Icon generation successful! Generated files:"
              find android/app/src/main/res -name "*ic_launcher*" -o -name "*splash*" | sort
            else
              echo "⚠️ Icon generation may have failed - res directory not found"
            fi
            
            echo "✅ App icons and splash screen generated successfully"
          else
            echo "⚠️ Source assets not found (assets/icon.png or assets/splash.png missing)"
            echo "📋 Available files in assets/:"
            ls -la assets/ || echo "❌ No assets folder found"
            echo "📋 Current directory contents:"
            ls -la
            exit 1
          fi

      - name: Sync Capacitor
        run: |
          echo "⚡ Syncing Capacitor..."
          npx cap sync android
          echo "✅ Capacitor sync completed"

      - name: Configure Build Gradle for Command-line Version Injection
        run: |
          echo "🔧 Configuring build.gradle for command-line version injection..."
          
          # build.gradleを恒久的に修正（一度だけ実行する必要がある）
          if [ -f android/app/build.gradle ]; then
            echo "📝 Updating build.gradle to support -P parameter injection..."
            
            # versionCodeとversionNameをコマンドライン注入対応に変更
            sed -i 's/versionCode .*/versionCode project.hasProperty('\''android.injected.versionCode'\'') ? project.property('\''android.injected.versionCode'\'').toInteger() : 1/' android/app/build.gradle
            sed -i 's/versionName .*/versionName project.hasProperty('\''android.injected.versionName'\'') ? project.property('\''android.injected.versionName'\'') : "1.0"/' android/app/build.gradle
            
            echo "✅ build.gradle configured for command-line version injection"
          else
            echo "⚠️ build.gradle not found, skipping configuration"
          fi

      - name: Configure Android API 35 Settings
        run: |
          echo "📱 Configuring Android for API 35 (VANILLA_ICE_CREAM)..."
          
          # variables.gradle でAPI 35設定
          if [ -f android/variables.gradle ]; then
            echo "🔧 Updating variables.gradle for API 35..."
            cat > android/variables.gradle <<'EOF'
          ext {
              minSdkVersion = 24
              compileSdkVersion = 35
              targetSdkVersion = 35
              androidxActivityVersion = '1.9.2'
              androidxAppCompatVersion = '1.7.0'
              androidxCoordinatorLayoutVersion = '1.2.0'
              androidxCoreVersion = '1.15.0'
              androidxFragmentVersion = '1.8.4'
              coreSplashScreenVersion = '1.0.1'
              androidxWebkitVersion = '1.12.1'
              junitVersion = '4.13.2'
              androidxJunitVersion = '1.2.1'
              androidxEspressoCoreVersion = '3.6.1'
              cordovaAndroidVersion = '10.1.1'
          }
          EOF
            echo "✅ variables.gradle configured for API 35"
          fi
          
          # build.gradle の Android Gradle Plugin バージョン設定
          if [ -f android/build.gradle ]; then
            echo "🔧 Configuring AGP version for API 35 compatibility..."
            sed -i "s/id 'com.android.application' version '[^']*'/id 'com.android.application' version '8.5.2'/" android/build.gradle
            sed -i "s/id 'com.android.library' version '[^']*'/id 'com.android.library' version '8.5.2'/" android/build.gradle
            echo "✅ AGP configured for API 35 compatibility"
          fi

      - name: Set Version Information
        run: |
          echo "📋 Setting version information for Ver.8.1 Advanced Signature System - Gradle Fix..."
          VERSION_MAJOR="8"
          VERSION_MINOR="1"
          VERSION_PATCH="${{ github.run_number }}"
          VERSION_TAG="$VERSION_MAJOR.$VERSION_MINOR.$VERSION_PATCH"
          echo "VERSION_TAG=$VERSION_TAG" >> $GITHUB_ENV
          echo "✅ Version tag set to: $VERSION_TAG"

      - name: Pre-Build Cleanup
        run: |
          echo "🧹 Pre-build cleanup..."
          cd android
          ./gradlew clean || echo "Clean skipped (first run)"
          cd ..

      - name: Restore Official Keystore from GitHub Secrets
        run: |
          echo "🔑 Configuring keystore for consistent APK signing..."
          cd android
          
          # Check if GitHub Secrets are properly configured
          if [ -n "${{ secrets.KEYSTORE_B64 }}" ] && [ -n "${{ secrets.KEYSTORE_PASSWORD }}" ] && [ -n "${{ secrets.KEY_ALIAS }}" ] && [ -n "${{ secrets.KEY_PASSWORD }}" ]; then
            echo "✅ GitHub Secrets detected - restoring persistent keystore..."
            
            # Restore keystore from GitHub Secrets
            echo "${{ secrets.KEYSTORE_B64 }}" | base64 -d > laminator-official.keystore 2>/dev/null || \
            echo "${{ secrets.KEYSTORE_B64 }}" | base64 --decode > laminator-official.keystore 2>/dev/null
            
            # Verify keystore file was created
            if [ ! -f "laminator-official.keystore" ]; then
              echo "❌ Failed to create keystore file from Secrets"
              exit 1
            fi
            
            # Verify keystore integrity and alias
            if keytool -list -keystore laminator-official.keystore -alias "${{ secrets.KEY_ALIAS }}" -storepass "${{ secrets.KEYSTORE_PASSWORD }}" >/dev/null 2>&1; then
              echo "✅ Keystore restored and verified successfully"
              echo "🔐 Using persistent keystore for consistent signing"
            else
              echo "❌ Keystore verification failed - alias '${{ secrets.KEY_ALIAS }}' not found or wrong password"
              echo "📋 Available aliases in keystore:"
              keytool -list -keystore laminator-official.keystore -storepass "${{ secrets.KEYSTORE_PASSWORD }}" | grep "Alias name:" || true
              exit 1
            fi
            
            # Set environment variables for persistent signing
            echo "KEYSTORE_FILE=laminator-official.keystore" >> $GITHUB_ENV
            echo "KEYSTORE_PASSWORD=${{ secrets.KEYSTORE_PASSWORD }}" >> $GITHUB_ENV
            echo "KEY_ALIAS=${{ secrets.KEY_ALIAS }}" >> $GITHUB_ENV
            echo "KEY_PASSWORD=${{ secrets.KEY_PASSWORD }}" >> $GITHUB_ENV
            echo "SIGNING_MODE=github-secrets-persistent" >> $GITHUB_ENV
            
          else
            echo "⚠️ GitHub Secrets not configured - using bootstrap keystore"
            echo "🚨 WARNING: This will create signature incompatibility with existing installations"
            echo ""
            echo "📋 TO FIX THIS PERMANENTLY:"
            echo "   1. Generate permanent keystore locally:"
            echo "      keytool -genkeypair -v -keystore laminator-official.keystore \\"
            echo "        -alias laminator-official -keyalg RSA -keysize 4096 -validity 36500 \\"
            echo "        -dname \"CN=Laminator Dashboard,O=BochangDev,C=JP\" \\"
            echo "        -storepass [YOUR_PASSWORD] -keypass [YOUR_PASSWORD]"
            echo ""
            echo "   2. Encode keystore to base64:"
            echo "      base64 -w 0 laminator-official.keystore   # Linux"
            echo "      base64 laminator-official.keystore | tr -d '\\n'   # macOS"
            echo ""
            echo "   3. Add these GitHub Secrets to repository:"
            echo "      KEYSTORE_B64: [base64 encoded keystore file]"
            echo "      KEYSTORE_PASSWORD: [your keystore password]"
            echo "      KEY_ALIAS: laminator-official"
            echo "      KEY_PASSWORD: [your key password - usually same as keystore password]"
            echo ""
            
            # Create bootstrap keystore for initial setup only
            keytool -genkeypair -v -keystore laminator-bootstrap.keystore \
              -alias laminator-bootstrap -keyalg RSA -keysize 4096 -validity 36500 \
              -dname "CN=Laminator Dashboard Bootstrap,O=BochangDev,C=JP" \
              -storepass bootstrap2025temp -keypass bootstrap2025temp
            
            echo "🏗️ Created bootstrap keystore (TEMPORARY - will cause update issues)"
            
            # Set environment variables for bootstrap signing
            echo "KEYSTORE_FILE=laminator-bootstrap.keystore" >> $GITHUB_ENV
            echo "KEYSTORE_PASSWORD=bootstrap2025temp" >> $GITHUB_ENV
            echo "KEY_ALIAS=laminator-bootstrap" >> $GITHUB_ENV
            echo "KEY_PASSWORD=bootstrap2025temp" >> $GITHUB_ENV
            echo "SIGNING_MODE=bootstrap-temporary" >> $GITHUB_ENV
          fi
          
          # Display current signing configuration
          echo "📊 Current Signing Configuration:"
          echo "   🔑 Keystore: $KEYSTORE_FILE"
          echo "   👤 Alias: $KEY_ALIAS"  
          echo "   📋 Mode: $SIGNING_MODE"
          
          cd ..

      - name: Skip Golden Gradle Template (Not Needed for Capacitor Official Signing)
        run: |
          echo "ℹ️ Skipping golden template - using Capacitor official signing configuration instead..."
          echo "✅ Template step skipped for Capacitor methodology."

      - name: Configure Gradle Signing (Environment Variables + Validation)
        run: |
          echo "🔧 Configuring build.gradle with validated environment variable signing..."
          
          if [ -f android/app/build.gradle ]; then
            echo "📝 Creating validated signing configuration..."
            
            # Create robust environment variable-based signing configuration
            cat > android/app/build.gradle.signing << 'GRADLE_EOF'
          android {
              signingConfigs {
                  release {
                      // Validate all required environment variables are present
                      def keystoreFilePath = System.getenv("KEYSTORE_FILE")
                      def keystorePassword = System.getenv("KEYSTORE_PASSWORD")
                      def keyAliasName = System.getenv("KEY_ALIAS")
                      def keyPassword = System.getenv("KEY_PASSWORD")
                      
                      if (keystoreFilePath && keystorePassword && keyAliasName && keyPassword) {
                          storeFile file(keystoreFilePath)
                          storePassword keystorePassword
                          keyAlias keyAliasName
                          keyPassword keyPassword
                          println "✅ Gradle: Using custom keystore: ${keystoreFilePath}"
                      } else {
                          println "❌ Gradle: Missing signing environment variables"
                          println "   KEYSTORE_FILE: ${keystoreFilePath ? 'SET' : 'MISSING'}"
                          println "   KEYSTORE_PASSWORD: ${keystorePassword ? 'SET' : 'MISSING'}"
                          println "   KEY_ALIAS: ${keyAliasName ? 'SET' : 'MISSING'}"
                          println "   KEY_PASSWORD: ${keyPassword ? 'SET' : 'MISSING'}"
                          throw new GradleException("Signing configuration incomplete - cannot build signed APK")
                      }
                  }
                  debug {
                      // Use same signing as release for update compatibility testing
                      initWith signingConfigs.release
                      println "🔧 Gradle: Debug build using release signing for update compatibility"
                  }
              }
              
              buildTypes {
                  release {
                      signingConfig signingConfigs.release
                      minifyEnabled false
                      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
                  }
                  debug {
                      signingConfig signingConfigs.debug
                      debuggable true
                  }
              }
          }
          GRADLE_EOF
            
            # Remove existing signing configurations to avoid conflicts
            if grep -q "signingConfigs" android/app/build.gradle; then
              echo "🔄 Removing existing signing configurations..."
              # More precise removal of existing signing configs
              sed -i '/signingConfigs[[:space:]]*{/,/^[[:space:]]*}/d' android/app/build.gradle
              sed -i '/buildTypes[[:space:]]*{/,/^[[:space:]]*}/d' android/app/build.gradle
            fi
            
            # Insert new signing configuration into android block
            echo "📝 Adding validated signing configuration to build.gradle..."
            sed -i '/android[[:space:]]*{/r android/app/build.gradle.signing' android/app/build.gradle
            
            echo "✅ Gradle signing configuration updated with validation"
            
            # Verify the configuration was added correctly
            echo "📋 Verifying signing configuration in build.gradle:"
            grep -A 25 "signingConfigs" android/app/build.gradle | head -30 || echo "⚠️ Could not locate signingConfigs section"
            
            # Clean up temporary file
            rm -f android/app/build.gradle.signing
          else
            echo "❌ android/app/build.gradle not found - cannot configure signing"
            exit 1
          fi

      - name: Build Signed APK with Environment Variables
        working-directory: android
        env:
          KEYSTORE_FILE: ${{ github.workspace }}/android/${{ env.KEYSTORE_FILE }}
          KEYSTORE_PASSWORD: ${{ env.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ env.KEY_ALIAS }}
          KEY_PASSWORD: ${{ env.KEY_PASSWORD }}
        run: |
          echo "🏗️ Building APK with environment variable signing (robust method)..."
          chmod +x gradlew
          
          echo "🔨 Building signed release APK..."
          ./gradlew clean assembleRelease \
            --no-daemon --stacktrace \
            -Pandroid.injected.versionName="${{ env.VERSION_TAG }}" \
            -Pandroid.injected.versionCode="${{ github.run_number }}"
          
          cd ..
          
          # APK確認
          if [ -f "android/app/build/outputs/apk/release/app-release.apk" ]; then
              echo "✅ Release APK created successfully"
              APK_SOURCE="android/app/build/outputs/apk/release/app-release.apk"
              BUILD_TYPE="release"
          elif [ -f "android/app/build/outputs/apk/debug/app-debug.apk" ]; then
              echo "✅ Debug APK created successfully"
              APK_SOURCE="android/app/build/outputs/apk/debug/app-debug.apk"
              BUILD_TYPE="debug"
          else
              echo "❌ No APK found"
              find android -name "*.apk" -type f || echo "No APK files found anywhere"
              exit 1
          fi
          
          # 最終APKファイル作成
          FINAL_NAME="lamidash_${{ env.VERSION_TAG }}_capacitor_official.apk"
          cp "$APK_SOURCE" "$FINAL_NAME"
          
          echo "✅ Official Capacitor signed APK created: $FINAL_NAME"
          echo "📊 APK Information:"
          ls -lh "$FINAL_NAME"
          
          # APK署名検証
          if command -v apksigner >/dev/null 2>&1; then
            echo "🔐 Verifying APK signature..."
            apksigner verify --verbose "$FINAL_NAME" || echo "⚠️ Signature verification warning"
          fi
          
          echo "APK_FILE=$FINAL_NAME" >> $GITHUB_ENV
          echo "BUILD_TYPE=$BUILD_TYPE" >> $GITHUB_ENV

      - name: Verify Signature Fingerprint (Consistency Check)
        run: |
          echo "🔍 Performing signature fingerprint verification for consistency..."
          
          APK_FILE=$(find . -name "lamidash_*.apk" | head -n 1)
          if [ ! -f "$APK_FILE" ]; then
            echo "❌ APK file not found for fingerprint verification"
            exit 1
          fi
          
          echo "📋 Analyzing APK: $APK_FILE"
          echo "🔧 Signing Mode: ${{ env.SIGNING_MODE }}"
          
          # Extract signature fingerprint
          if command -v apksigner >/dev/null 2>&1; then
            echo "🔐 Extracting signature fingerprint..."
            apksigner verify --print-certs "$APK_FILE" 2>/dev/null | sed -n 's/.*SHA-256 digest: //p' > current_fingerprint.txt
            
            if [ ! -s current_fingerprint.txt ]; then
              echo "❌ Failed to extract signature fingerprint"
              exit 1
            fi
            
            CURRENT_FINGERPRINT=$(cat current_fingerprint.txt | tr -d ' \n')
            echo "📄 Current APK signature SHA-256:"
            echo "$CURRENT_FINGERPRINT"
            
            # Compare with expected fingerprint if GitHub Secrets are configured
            if [ -n "${{ secrets.SIGNING_FINGERPRINT }}" ]; then
              echo "🔍 Comparing with expected signature fingerprint..."
              EXPECTED_FINGERPRINT="${{ secrets.SIGNING_FINGERPRINT }}"
              
              if [ "$CURRENT_FINGERPRINT" = "$EXPECTED_FINGERPRINT" ]; then
                echo "✅ Signature fingerprint matches expected value - signing consistency verified"
                echo "🎯 This APK will seamlessly update existing installations"
              else
                echo "❌ SIGNATURE FINGERPRINT MISMATCH DETECTED"
                echo "   Expected: $EXPECTED_FINGERPRINT"
                echo "   Current:  $CURRENT_FINGERPRINT"
                echo ""
                echo "🚨 CRITICAL: This APK will NOT update existing installations seamlessly"
                echo "📋 This indicates a signing configuration problem"
                echo ""
                
                # Don't fail the build for bootstrap mode, but warn
                if [ "${{ env.SIGNING_MODE }}" = "github-secrets-persistent" ]; then
                  echo "💥 FAILING BUILD: Signature mismatch in persistent signing mode"
                  exit 1
                else
                  echo "⚠️ WARNING: Bootstrap mode detected - signature mismatch expected"
                  echo "🔧 To fix: Configure GitHub Secrets with correct keystore and fingerprint"
                fi
              fi
            else
              echo "📋 No expected fingerprint configured in GitHub Secrets"
              echo "💡 TO ENABLE SIGNATURE VERIFICATION:"
              echo "   Add SIGNING_FINGERPRINT secret with value: $CURRENT_FINGERPRINT"
              echo ""
              
              if [ "${{ env.SIGNING_MODE }}" = "github-secrets-persistent" ]; then
                echo "🎯 This is the first build with persistent signing - fingerprint established"
                echo "✅ Store this fingerprint for future builds"
              else
                echo "⚠️ Bootstrap mode: This fingerprint will change on next build"
                echo "🔧 Configure GitHub Secrets for consistent signing"
              fi
            fi
            
            # Export fingerprint for release notes
            echo "CURRENT_FINGERPRINT=$CURRENT_FINGERPRINT" >> $GITHUB_ENV
          else
            echo "⚠️ apksigner not available - cannot verify signature fingerprint"
            echo "CURRENT_FINGERPRINT=unknown" >> $GITHUB_ENV
          fi

      - name: 🕵️ Analyze APK Contents
        run: |
          echo "--- Analyzing content of APK file ---"
          APK_FILE=$(find . -name "lamidash_*.apk" | head -n 1)
          if [ -f "$APK_FILE" ]; then
            echo "📊 APK Contents Analysis for: $APK_FILE"
            unzip -l "$APK_FILE"
            echo ""
            echo "📈 Top 20 largest files in APK:"
            unzip -l "$APK_FILE" | sort -k1 -nr | head -n 20
          else
            echo "APK file not found for analysis."
          fi
          echo "--- End of APK Content Analysis ---"

      - name: Upload APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APK_FILE }}
          path: ${{ env.APK_FILE }}

      - name: Create GitHub Release
        if: github.ref == 'refs/heads/main'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.VERSION_TAG }}
          name: Laminator Dashboard ${{ env.VERSION_TAG }}
          files: ${{ env.APK_FILE }}
          body: |
            # 🎛️ Laminator Dashboard ${{ env.VERSION_TAG }}
            
            ## 🔐 Advanced Signature System Implementation
            
            **Signing Mode**: `${{ env.SIGNING_MODE }}`  
            **Signature SHA-256**: `${{ env.CURRENT_FINGERPRINT }}`
            
            ### 📋 Installation Instructions
            
            #### 🎯 If Signing Mode = `github-secrets-persistent`:
            **✅ SEAMLESS UPDATES ENABLED** - This APK should update existing installations without uninstalling.
            
            #### ⚠️ If Signing Mode = `bootstrap-temporary`:
            **🚨 ONE-TIME MIGRATION REQUIRED** - You must uninstall the existing app before installing this version.
            
            **Migration Steps for Bootstrap Mode**:
            1. 💾 **BACKUP YOUR DATA** using the app's backup function
            2. 🗑️ Uninstall existing Laminator Dashboard
            3. ⬇️ Download and install this APK
            4. 📄 Restore your data using the backup function
            
            #### 🆕 For New Users:
            1. ⬇️ Download the APK file
            2. 🔓 Enable "Install from Unknown Sources"
            3. 📱 Install the APK
            
            ## 🛡️ Advanced Signature Management System
            
            ### 🔑 Keystore Persistence Technology
            - **GitHub Secrets Integration**: Keystore stored as base64-encoded secret
            - **Environment Variable Validation**: Full validation chain in Gradle
            - **Signature Fingerprint Verification**: Automated consistency checking
            - **Bootstrap Fallback**: Temporary keystore for initial setup
            - **Cross-Build Consistency**: Same signature across all CI runs
            
            ### 📊 Signature Verification Results
            ```
            Current Fingerprint: ${{ env.CURRENT_FINGERPRINT }}
            Signing Mode: ${{ env.SIGNING_MODE }}
            Keystore Type: ${{ env.SIGNING_MODE == 'github-secrets-persistent' && 'Persistent (GitHub Secrets)' || 'Temporary Bootstrap' }}
            Update Compatibility: ${{ env.SIGNING_MODE == 'github-secrets-persistent' && '✅ Seamless Updates' || '⚠️ Manual Reinstall Required' }}
            ```
            
            ### 🔧 For Developers: Setting Up Persistent Signing
            
            If this build shows `bootstrap-temporary` mode, configure GitHub Secrets:
            
            ```bash
            # 1. Generate permanent keystore
            keytool -genkeypair -v -keystore laminator-official.keystore \
              -alias laminator-official -keyalg RSA -keysize 4096 -validity 36500 \
              -dname "CN=Laminator Dashboard,O=BochangDev,C=JP" \
              -storepass YOUR_PASSWORD -keypass YOUR_PASSWORD
            
            # 2. Encode to base64
            base64 -w 0 laminator-official.keystore   # Linux
            base64 laminator-official.keystore | tr -d '\n'   # macOS
            
            # 3. Add GitHub Secrets:
            KEYSTORE_B64: [base64 encoded keystore]
            KEYSTORE_PASSWORD: [your password]
            KEY_ALIAS: laminator-official  
            KEY_PASSWORD: [your key password]
            SIGNING_FINGERPRINT: ${{ env.CURRENT_FINGERPRINT }}
            ```
            
            ## 🚀 App Features
            - ⏰ **Production Time Calculator** - Accurate completion predictions
            - 🎞️ **Film Session Management** - Material consumption tracking
            - 📋 **Real-time Job Tracking** - Live progress monitoring
            - 📊 **Efficiency Analytics** - Comprehensive work reports
            - 🌐 **PWA Technology** - Offline functionality + home screen install
            - 💾 **Data Backup/Restore** - Full data preservation system
            
            ## 🔧 Technical Specifications
            - **Framework**: Capacitor 7.4.2 + Android API 35
            - **Build Environment**: Node.js ${{ env.NODE_VERSION }} + Java ${{ env.JAVA_VERSION }}
            - **Signing Method**: ${{ env.SIGNING_MODE == 'github-secrets-persistent' && '🔐 GitHub Secrets Persistent' || '🏗️ Bootstrap Temporary' }}
            - **APK Type**: ${{ env.BUILD_TYPE == 'release' && '🔐 Release Build' || '🔧 Debug Build' }}
            - **Architecture**: Environment Variable + Gradle Validation Chain
            - **Compatibility**: Android 7.0+ (API 24+)
            
            ## 📈 Build Information
            - **Version**: ${{ env.VERSION_TAG }}
            - **Build Number**: ${{ github.run_number }}
            - **Signature**: ${{ env.CURRENT_FINGERPRINT }}
            - **Build Mode**: ${{ env.SIGNING_MODE }}
            - **Commit**: ${{ github.sha }}
            
            ## 🎯 Signature System Advantages
            - **Permanent Solution**: Once configured, works forever
            - **CI/CD Integration**: Full automation with validation
            - **Update Compatibility**: Seamless APK updates for users
            - **Fingerprint Verification**: Prevents accidental signature breaks
            - **Developer Friendly**: Clear setup instructions and debugging
            
            ---
            🤖 **Auto Build**: GitHub Actions Advanced Signature System  
            📅 **Build Date**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')  
            🏆 **Achievement**: Complete signature consistency solution implemented
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
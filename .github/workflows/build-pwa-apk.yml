name: Build Laminator Dashboard PWA to APK

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        
      - name: Install Capacitor CLI
        run: npm install -g @capacitor/cli @capacitor/core @capacitor/android
        
      - name: Install dependencies
        run: |
          npm init -y
          npm install @capacitor/android @capacitor/core
          
      - name: Initialize Capacitor
        run: |
          # webアセットフォルダを作成してファイルをコピー
          mkdir -p www
          cp *.html *.css *.js *.json *.png www/ 2>/dev/null || true
          cp -r icons www/ 2>/dev/null || true
          
          # Capacitor設定ファイル作成
          cat > capacitor.config.ts << 'EOF'
          import { CapacitorConfig } from '@capacitor/cli';
          
          const config: CapacitorConfig = {
            appId: 'com.bochang.laminator',
            appName: 'ラミオペ・ダッシュボード',
            webDir: 'www',
            bundledWebRuntime: false,
            android: {
              allowMixedContent: true
            }
          };
          
          export default config;
          EOF
          
      - name: Add Android platform
        run: |
          npx cap add android
          
      - name: Copy web assets
        run: |
          npx cap copy android
          
      - name: Create laminator-dashboard keystore
        working-directory: android
        run: |
          # 固定パラメータでキーストア生成（プロジェクト固有）
          if [ ! -f "laminator-dev-key.jks" ]; then
            echo "🔑 Creating project-specific development keystore..."
            keytool -genkeypair -v -keystore laminator-dev-key.jks \
              -alias laminator -keyalg RSA -keysize 2048 -validity 10000 \
              -dname "CN=Laminator,O=BochangDev,C=JP" \
              -storepass laminator123 -keypass laminator123
          fi
          
      - name: Configure Android signing
        working-directory: android
        run: |
          # 署名環境変数の設定
          export LAMINATOR_STORE_FILE="laminator-dev-key.jks"
          export LAMINATOR_STORE_PASSWORD="laminator123"
          export LAMINATOR_KEY_ALIAS="laminator"
          export LAMINATOR_KEY_PASSWORD="laminator123"
          
          # build.gradleに署名設定を追加
          cat >> app/build.gradle << 'EOF'
          
          android {
              signingConfigs {
                  release {
                      storeFile file(System.getenv("LAMINATOR_STORE_FILE") ?: "../laminator-dev-key.jks")
                      storePassword System.getenv("LAMINATOR_STORE_PASSWORD") ?: "laminator123"
                      keyAlias System.getenv("LAMINATOR_KEY_ALIAS") ?: "laminator"
                      keyPassword System.getenv("LAMINATOR_KEY_PASSWORD") ?: "laminator123"
                  }
              }
              
              buildTypes {
                  release {
                      signingConfig signingConfigs.release
                  }
                  debug {
                      signingConfig signingConfigs.release
                  }
              }
          }
          EOF
          
      - name: Build Android APK
        working-directory: android
        env:
          LAMINATOR_STORE_FILE: "laminator-dev-key.jks"
          LAMINATOR_STORE_PASSWORD: "laminator123"
          LAMINATOR_KEY_ALIAS: "laminator"
          LAMINATOR_KEY_PASSWORD: "laminator123"
        run: |
          ./gradlew assembleRelease --no-daemon --stacktrace
          
      - name: Sign and optimize APK
        working-directory: android
        run: |
          # APKファイルを確認
          find . -name "*.apk" -type f
          
          # リリースAPKを検索
          APK_FILE=$(find app/build/outputs/apk/release -name "*.apk" | head -1)
          if [ -n "$APK_FILE" ]; then
            echo "Found APK: $APK_FILE"
            cp "$APK_FILE" ../laminator-dashboard-v$(date +%Y%m%d-%H%M%S).apk
          fi
          
      - name: Upload APK to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: laminator-dashboard-v*.apk
          tag_name: v2.16-build-${{ github.run_number }}
          name: "Laminator Dashboard v2.16 Build ${{ github.run_number }}"
          body: |
            🎛️ **ラミオペ・ダッシュボード v2.16**
            
            自動ビルド APK - GitHub Actions により自動生成
            
            ## 📱 インストール方法
            1. APKファイルをダウンロード
            2. Android端末で「不明なソースからのインストール」を許可
            3. APKファイルをタップしてインストール
            
            ## ✨ Ver.2.16 機能
            - 時間計算機（生産時間・終了時刻予測）
            - フィルムセッション管理
            - ジョブ管理・進捗追跡
            - レポート生成機能
            - PWA対応（オフライン動作）
            
            🤖 Generated with GitHub Actions
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
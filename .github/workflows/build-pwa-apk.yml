name: Build Laminator Dashboard PWA to APK

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        
      - name: Accept Android SDK Licenses
        run: |
          echo "🔑 Accepting Android SDK licenses automatically..."
          yes | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --licenses
        
      - name: Install Capacitor CLI
        run: npm install -g @capacitor/cli @capacitor/core @capacitor/android
        
      - name: Install dependencies
        run: |
          npm init -y
          npm install @capacitor/android @capacitor/core
          
      - name: Prepare and Initialize Capacitor
        run: |
          # --- Web資産の準備 ---
          sudo apt-get update && sudo apt-get install -y rsync
          mkdir -p www
          rsync -av --exclude='.git*' --exclude='.github' --exclude='node_modules' --exclude='android' ./ www/
          
          # --- Capacitorの初期化とAndroidプラットフォームの追加 ---
          cat > capacitor.config.ts << 'EOF'
          import { CapacitorConfig } from '@capacitor/cli';
          const config: CapacitorConfig = {
            appId: 'com.bochang.laminator',
            appName: 'ラミオペ・ダッシュボード',
            webDir: 'www',
            bundledWebRuntime: false,
            android: {
              allowMixedContent: true,
            },
          };
          export default config;
          EOF
          npx cap add android
          
      - name: Prepare web assets
        run: |
          npx cap copy android
          
      - name: Setup Android Keystore
        run: |
          if [ -n "${{ secrets.KEYSTORE_BASE64 }}" ]; then
            echo "📱 Using production keystore from GitHub Secrets"
            echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > android/app/release.keystore
            echo "KEYSTORE_FILE=release.keystore" >> $GITHUB_ENV
            echo "KEYSTORE_PASSWORD=${{ secrets.KEYSTORE_PASSWORD }}" >> $GITHUB_ENV
            echo "KEY_ALIAS=${{ secrets.KEY_ALIAS }}" >> $GITHUB_ENV
            echo "KEY_PASSWORD=${{ secrets.KEY_PASSWORD }}" >> $GITHUB_ENV
            echo "✅ Production keystore created"
          else
            echo "⚠️ KEYSTORE_BASE64 secret not found. App will be unsigned."
          fi

      - name: Configure Build for Signing
        run: |
          if [ -n "${{ secrets.KEYSTORE_BASE64 }}" ]; then
            echo "🔧 Adding signing configuration to build.gradle..."
            cd android
            cat >> app/build.gradle << 'EOF'

            android {
                signingConfigs {
                    release {
                        storeFile file(System.getenv("KEYSTORE_FILE"))
                        storePassword System.getenv("KEYSTORE_PASSWORD")
                        keyAlias System.getenv("KEY_ALIAS")
                        keyPassword System.getenv("KEY_PASSWORD")
                    }
                }
                buildTypes {
                    release {
                        signingConfig signingConfigs.release
                    }
                }
            }
            EOF
            echo "📄 Updated build.gradle with signing configuration"
          fi

      - name: Build Android APK
        run: |
          cd android
          echo "🏗️ Starting Android APK build..."
          ./gradlew clean
          ./gradlew assembleRelease --stacktrace
          echo "✅ APK build completed"

      - name: Verify and Copy APK
        run: |
          echo "🔍 Searching for generated APK files..."
          find android -name "*.apk" -type f
          APK_PATH=$(find android/app/build/outputs/apk/release -name "*.apk" | head -1)
          if [ -n "$APK_PATH" ]; then
            TIMESTAMP=$(date +%Y%m%d-%H%M%S)
            NEW_NAME="laminator-dashboard-v2.16-${TIMESTAMP}.apk"
            echo "✅ Found APK: $APK_PATH"
            echo "📦 Copying to: $NEW_NAME"
            cp "$APK_PATH" "$NEW_NAME"
            echo "APK_FILENAME=$NEW_NAME" >> $GITHUB_ENV
            echo "🎉 APK successfully created and copied"
          else
            echo "❌ APK not found in expected location"
            echo "📂 Full directory listing:"
            find android -type f -name "*.apk"
            exit 1
          fi
          
      - name: Upload APK to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ env.APK_FILENAME }}
          tag_name: v2.16-build-${{ github.run_number }}
          name: "🎛️ Laminator Dashboard v2.16 Build ${{ github.run_number }}"
          body: |
            # 🎛️ ラミオペ・ダッシュボード v2.16
            
            **📱 自動ビルドAPK** - capacitor-community公式アクションで署名済み
            
            ## 📥 インストール方法
            1. ⬇️ APKファイルをダウンロード
            2. 🔓 Android端末で「不明なソースからのインストール」を許可
            3. 📱 APKファイルをタップしてインストール
            
            ## ✨ Ver.2.16 全機能
            - ⏰ **時間計算機** - 生産時間・終了時刻予測
            - 🎞️ **フィルムセッション管理** - 消費量シミュレーション  
            - 📋 **ジョブ管理** - リアルタイム進捗追跡
            - 📊 **レポート生成** - 作業効率分析
            - 🌐 **PWA対応** - オフライン動作・ホーム画面追加
            - 🔄 **シームレス更新** - 署名一貫性による上書きインストール
            
            ## 🔧 技術仕様
            - **ビルド環境**: Ubuntu Latest + Node.js 18 + Java 17
            - **署名方式**: capacitor-community/action-android-release@v1
            - **APKサイズ**: 自動最適化済み
            - **対応OS**: Android 7.0以上推奨
            
            ---
            🤖 **自動ビルド**: GitHub Actions  
            🏗️ **ビルド番号**: ${{ github.run_number }}  
            📅 **ビルド日時**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
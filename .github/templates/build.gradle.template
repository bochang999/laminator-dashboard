apply plugin: 'com.android.application'

android {
    namespace "com.bochang.laminator"
    compileSdkVersion 35
    defaultConfig {
        applicationId "com.bochang.laminator"
        minSdkVersion 24
        targetSdkVersion 35
        versionCode project.hasProperty('android.injected.versionCode') ? project.property('android.injected.versionCode').toInteger() : 1
        versionName project.hasProperty('android.injected.versionName') ? project.property('android.injected.versionName') : "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        aaptOptions {
             // Files and dirs to omit from the packaged assets dir, modified to accommodate modern web apps.
             // Default: https://android.googlesource.com/platform/frameworks/base/+/282e181b58cf72b6ca770dc7ca5f91f135444502/tools/aapt/AaptAssets.cpp#61
            ignoreAssetsPattern '!.svn:!.git:!.ds_store:!*.scc:.*:!CVS:!thumbs.db:!picasa.ini:!*~'
        }
    }
    signingConfigs {
        release {
            if (System.getenv("KEYSTORE_BASE64")) {
                // RecipeBox-proven production signing system
                def keystoreFile = new File(project.rootDir, "laminator-release.keystore")
                def decodedKeystore = System.getenv("KEYSTORE_BASE64").decodeBase64()
                keystoreFile.bytes = decodedKeystore
                
                storeFile keystoreFile
                storePassword System.getenv("KEYSTORE_PASSWORD") ?: "laminator2025"
                keyAlias System.getenv("KEY_ALIAS") ?: "laminator-key"
                keyPassword System.getenv("KEY_PASSWORD") ?: "laminator2025"
            } else {
                // Development fallback - consistent local signing
                def devKeystoreFile = new File(project.rootDir, "laminator-dev.keystore")
                if (!devKeystoreFile.exists()) {
                    // Auto-generate development keystore if missing
                    def proc = ["keytool", "-genkeypair", "-v", 
                              "-keystore", devKeystoreFile.absolutePath,
                              "-alias", "laminator-dev",
                              "-keyalg", "RSA", "-keysize", "2048", "-validity", "10000",
                              "-dname", "CN=Laminator Dashboard,OU=Development,O=BochangDev,L=Tokyo,ST=Tokyo,C=JP",
                              "-storepass", "devpassword123",
                              "-keypass", "devpassword123"].execute()
                    proc.waitFor()
                }
                
                storeFile devKeystoreFile
                storePassword "devpassword123"
                keyAlias "laminator-dev"
                keyPassword "devpassword123"
            }
        }
    }
    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

repositories {
    flatDir{
        dirs '../capacitor-cordova-android-plugins/src/main/libs', 'libs'
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "androidx.appcompat:appcompat:$androidxAppCompatVersion"
    implementation "androidx.coordinatorlayout:coordinatorlayout:$androidxCoordinatorLayoutVersion"
    implementation "androidx.core:core-splashscreen:$coreSplashScreenVersion"
    implementation project(':capacitor-android')
    testImplementation "junit:junit:$junitVersion"
    androidTestImplementation "androidx.test.ext:junit:$androidxJunitVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$androidxEspressoCoreVersion"
    implementation project(':capacitor-cordova-android-plugins')
}

apply from: 'capacitor.build.gradle'

try {
    def servicesJSON = file('google-services.json')
    if (servicesJSON.text) {
        apply plugin: 'com.google.gms.google-services'
    }
} catch(Exception e) {
    logger.info("google-services.json not found, google-services plugin not applied. Push messaging will not work")
}